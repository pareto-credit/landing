{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/vault-categories/libs/vault-categories-client.lib.ts"],"sourcesContent":["import { Axios } from 'axios'\nimport {\n  VaultCategoryData,\n  VaultCategoryRoutes,\n  VaultCategoriesClient,\n  VaultCategoriesSearchQuery,\n} from '../vault-category.model'\nimport { stringify, uriFy } from '../../core'\n\n/**\n * Create vault categories client\n * @param axios - The Axios instance\n * @returns the vault category GOT client\n */\nexport function createVaultCategoriesClient(\n  axios: Axios\n): VaultCategoriesClient {\n  return {\n    // Create new token\n    create: (body: VaultCategoryData) =>\n      axios\n        .request({\n          url: VaultCategoryRoutes.v1Create,\n          method: 'POST',\n          data: stringify(body),\n        })\n        .then((response) => response.data),\n\n    // Search tokens\n    search: (searchParams?: VaultCategoriesSearchQuery) =>\n      axios\n        .request({\n          url: VaultCategoryRoutes.v1Search,\n          method: 'GET',\n          params: searchParams\n            ? new URLSearchParams(uriFy(searchParams))\n            : undefined,\n        })\n        .then((response) => response.data),\n\n    // List tokens\n    list: (searchParams?: VaultCategoriesSearchQuery) =>\n      axios\n        .request({\n          url: VaultCategoryRoutes.v1Search,\n          method: 'GET',\n          params: searchParams\n            ? new URLSearchParams(uriFy(searchParams))\n            : undefined,\n        })\n        .then((response) => {\n          const page = response.data\n          return page.data\n        }),\n    findOne: (searchParams?: VaultCategoriesSearchQuery) =>\n      axios\n        .request({\n          url: VaultCategoryRoutes.v1Search,\n          method: 'GET',\n          params: searchParams\n            ? new URLSearchParams(uriFy(searchParams))\n            : undefined,\n        })\n        .then((response) => {\n          const page = response.data\n          return page.data ? page.data[0] : undefined\n        }),\n  }\n}\n"],"names":["VaultCategoryRoutes","stringify","uriFy","createVaultCategoriesClient","axios","create","body","request","url","v1Create","method","data","then","response","search","searchParams","v1Search","params","URLSearchParams","undefined","list","page","findOne"],"mappings":"AACA,SAEEA,mBAAmB,QAGd,0BAAyB;AAChC,SAASC,SAAS,EAAEC,KAAK,QAAQ,aAAY;AAE7C;;;;CAIC,GACD,OAAO,SAASC,4BACdC,KAAY;IAEZ,OAAO;QACL,mBAAmB;QACnBC,QAAQ,CAACC,OACPF,MACGG,OAAO,CAAC;gBACPC,KAAKR,oBAAoBS,QAAQ;gBACjCC,QAAQ;gBACRC,MAAMV,UAAUK;YAClB,GACCM,IAAI,CAAC,CAACC,WAAaA,SAASF,IAAI;QAErC,gBAAgB;QAChBG,QAAQ,CAACC,eACPX,MACGG,OAAO,CAAC;gBACPC,KAAKR,oBAAoBgB,QAAQ;gBACjCN,QAAQ;gBACRO,QAAQF,eACJ,IAAIG,gBAAgBhB,MAAMa,iBAC1BI;YACN,GACCP,IAAI,CAAC,CAACC,WAAaA,SAASF,IAAI;QAErC,cAAc;QACdS,MAAM,CAACL,eACLX,MACGG,OAAO,CAAC;gBACPC,KAAKR,oBAAoBgB,QAAQ;gBACjCN,QAAQ;gBACRO,QAAQF,eACJ,IAAIG,gBAAgBhB,MAAMa,iBAC1BI;YACN,GACCP,IAAI,CAAC,CAACC;gBACL,MAAMQ,OAAOR,SAASF,IAAI;gBAC1B,OAAOU,KAAKV,IAAI;YAClB;QACJW,SAAS,CAACP,eACRX,MACGG,OAAO,CAAC;gBACPC,KAAKR,oBAAoBgB,QAAQ;gBACjCN,QAAQ;gBACRO,QAAQF,eACJ,IAAIG,gBAAgBhB,MAAMa,iBAC1BI;YACN,GACCP,IAAI,CAAC,CAACC;gBACL,MAAMQ,OAAOR,SAASF,IAAI;gBAC1B,OAAOU,KAAKV,IAAI,GAAGU,KAAKV,IAAI,CAAC,EAAE,GAAGQ;YACpC;IACN;AACF"}