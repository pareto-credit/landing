{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/tokens/libs/token.lib.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport { Token } from '../token.model'\nimport { BigNumberValue, BNFixed, BNify, numberFormat } from '../../core'\n\n/**\n * Fix token price with correct decimals\n * @param token - the token entity\n * @param amount - the full digits amount\n * @returns the token price\n */\nexport function fixTokenAmount(\n  token: Token,\n  amount: BigNumber.Value\n): BigNumber {\n  return fixAmount(amount, token.decimals)\n}\n\n/**\n * Fix amount with correct decimals\n * @param amount full digit amount\n * @param decimals decimals\n * @returns fixed amount\n */\nexport function fixAmount(\n  amount: BigNumber.Value,\n  decimals: number\n): BigNumber {\n  return BNify(amount).div(10 ** decimals)\n}\n\n/**\n * Normalize an amount to token minimum decimals\n * @param token - the token entity\n * @param amount - the amount to multiply\n * @returns the amount to show\n */\nexport function normalizeTokenAmount(\n  token: Token,\n  amount: BigNumber.Value\n): BigNumber {\n  return BNify(\n    BNify(amount)\n      .times(10 ** token.decimals)\n      .toFixed(0)\n  )\n}\n\n/**\n * Get token price\n * @param token - the token entity\n * @param amount - the conversion amount\n * @returns the token price\n */\nexport function getTokenAmount(\n  token: Token,\n  amount: BigNumberValue = 1,\n  decimals?: number\n): string {\n  return BNFixed(BNify(amount).times(10 ** (decimals || token.decimals)))\n}\n\n/**\n * Parse token amount into human readable string\n * @param token - the token entity\n * @param amount - the amount to parse\n * @returns the string to show\n */\nexport function parseTokenAmount(\n  token: Token,\n  amount: BigNumber.Value = 0\n): string {\n  const fixedValue = fixTokenAmount(token, amount)\n  return numberFormat(Number(fixedValue.toNumber()), {\n    minimumFractionDigits: token.decimals,\n  })\n}\n\n/**\n * Return minimum token value\n * @param token - the token\n * @returns the minimum token value\n */\nexport function minTokenAmount(token: Token): BigNumber {\n  return fixTokenAmount(token, 1)\n}\n\n/**\n * Get token USD Amount\n * @param amount - the amount of tokens\n * @param price - the USDC price of the token\n * @returns the token USD amount\n */\nexport function getTokenUSDAmount(\n  amount: BigNumberValue = 1,\n  price: BigNumberValue = 1000000\n): string {\n  // Format token price\n  const tokenPrice = BNify(price).div(10 ** 6)\n  return BNify(amount).times(tokenPrice).toString()\n}\n\n/**\n * Convert token amount from one token to another, considering decimals\n * @param sourceToken - the source token entity\n * @param destToken - the target token entity\n * @param amount - the normalize amount of the source token\n * @returns the converted amount in the target token, normalized\n */\nexport function convertTokenAmount(\n  sourceToken: Token,\n  destToken: Token,\n  amount: BigNumber.Value\n): BigNumber {\n  const fixedAmount = fixTokenAmount(sourceToken, amount)\n  return normalizeTokenAmount(destToken, fixedAmount)\n}\n"],"names":["BNFixed","BNify","numberFormat","fixTokenAmount","token","amount","fixAmount","decimals","div","normalizeTokenAmount","times","toFixed","getTokenAmount","parseTokenAmount","fixedValue","Number","toNumber","minimumFractionDigits","minTokenAmount","getTokenUSDAmount","price","tokenPrice","toString","convertTokenAmount","sourceToken","destToken","fixedAmount"],"mappings":"AAEA,SAAyBA,OAAO,EAAEC,KAAK,EAAEC,YAAY,QAAQ,aAAY;AAEzE;;;;;CAKC,GACD,OAAO,SAASC,eACdC,KAAY,EACZC,MAAuB;IAEvB,OAAOC,UAAUD,QAAQD,MAAMG,QAAQ;AACzC;AAEA;;;;;CAKC,GACD,OAAO,SAASD,UACdD,MAAuB,EACvBE,QAAgB;IAEhB,OAAON,MAAMI,QAAQG,GAAG,CAAC,MAAMD;AACjC;AAEA;;;;;CAKC,GACD,OAAO,SAASE,qBACdL,KAAY,EACZC,MAAuB;IAEvB,OAAOJ,MACLA,MAAMI,QACHK,KAAK,CAAC,MAAMN,MAAMG,QAAQ,EAC1BI,OAAO,CAAC;AAEf;AAEA;;;;;CAKC,GACD,OAAO,SAASC,eACdR,KAAY,EACZC,SAAyB,CAAC,EAC1BE,QAAiB;IAEjB,OAAOP,QAAQC,MAAMI,QAAQK,KAAK,CAAC,MAAOH,CAAAA,YAAYH,MAAMG,QAAQ,AAAD;AACrE;AAEA;;;;;CAKC,GACD,OAAO,SAASM,iBACdT,KAAY,EACZC,SAA0B,CAAC;IAE3B,MAAMS,aAAaX,eAAeC,OAAOC;IACzC,OAAOH,aAAaa,OAAOD,WAAWE,QAAQ,KAAK;QACjDC,uBAAuBb,MAAMG,QAAQ;IACvC;AACF;AAEA;;;;CAIC,GACD,OAAO,SAASW,eAAed,KAAY;IACzC,OAAOD,eAAeC,OAAO;AAC/B;AAEA;;;;;CAKC,GACD,OAAO,SAASe,kBACdd,SAAyB,CAAC,EAC1Be,QAAwB,OAAO;IAE/B,qBAAqB;IACrB,MAAMC,aAAapB,MAAMmB,OAAOZ,GAAG,CAAC,MAAM;IAC1C,OAAOP,MAAMI,QAAQK,KAAK,CAACW,YAAYC,QAAQ;AACjD;AAEA;;;;;;CAMC,GACD,OAAO,SAASC,mBACdC,WAAkB,EAClBC,SAAgB,EAChBpB,MAAuB;IAEvB,MAAMqB,cAAcvB,eAAeqB,aAAanB;IAChD,OAAOI,qBAAqBgB,WAAWC;AACzC"}