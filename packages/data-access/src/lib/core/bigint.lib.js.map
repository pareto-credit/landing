{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/core/bigint.lib.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport { iBigInt } from './utility.model'\n\nexport type BigNumberValue = BigNumber.Value | bigint\n\n/**\n * Transform a value to BigNumber\n * @param value - the value to transform\n * @returns the big number\n */\nexport function BNify(value: BigNumberValue = 0): BigNumber {\n  return new BigNumber(\n    typeof value === 'bigint'\n      ? value.toString()\n      : typeof value === 'object'\n      ? value\n      : String(value)\n  )\n}\n\n/**\n * Divide num by dev avoiding NaN\n * @param num numerator\n * @param den denominator\n * @returns num/den\n */\nexport function BNSafeDiv(num: BigNumberValue, den: BigNumberValue): BigNumber {\n  if (BNeq(den)) return BNify(0)\n  return BNify(num).div(BNify(den))\n}\n\n/**\n * Transform a value to BigNumber string\n * @param value - the value to transform\n * @returns the big number as string\n */\nexport function BNstring(value: BigNumberValue): iBigInt {\n  return BNify(value).toString()\n}\n\n/**\n * Transform a value to BigNumber fixed to specified decimals\n * @param value - the value to transform\n * @returns the big number as fixed string\n */\nexport function BNFixed(value: BigNumberValue = 0, decimals = 0): iBigInt {\n  return BNify(value).toFixed(decimals)\n}\n\n/**\n * Is BigInt greather than\n * @param bigInt - the bigint string\n * @param value - the value to compare\n * @returns true if greater\n */\nexport function BNgt(\n  bigInt: BigNumberValue = 0,\n  value: BigNumberValue = 0\n): boolean {\n  return BNify(bigInt).gt(BNify(value))\n}\n\n/**\n * Is BigInt greather than or equal\n * @param bigInt - the bigint string\n * @param value - the value to compare\n * @returns true if greater\n */\nexport function BNgte(\n  bigInt: BigNumberValue = 0,\n  value: BigNumberValue = 0\n): boolean {\n  return BNify(bigInt).gte(BNify(value))\n}\n\n/**\n * Is BigInt less than\n * @param bigInt - the bigint string\n * @param value - the value to compare\n * @returns true is less than\n */\nexport function BNlt(\n  bigInt: BigNumberValue = 0,\n  value: BigNumberValue = 0\n): boolean {\n  return BNify(bigInt).lt(BNify(value))\n}\n\n/**\n * Is BigInt less than or equal\n * @param bigInt - the bigint string\n * @param value - the value to compare\n * @returns true is less than or equal\n */\nexport function BNlte(\n  bigInt: BigNumberValue = 0,\n  value: BigNumberValue = 0\n): boolean {\n  return BNify(bigInt).lte(BNify(value))\n}\n\n/**\n * Is BigInt equal\n * @param bigInt - the bigint string\n * @param value - the value to compare\n * @returns true if equal\n */\nexport function BNeq(\n  bigInt: BigNumberValue = 0,\n  value: BigNumberValue = 0\n): boolean {\n  return BNify(bigInt).eq(BNify(value))\n}\n\n/**\n * Remove all decimals from bigNumberValue\n * @param value - the value to parse\n * @returns the string of the value\n */\nexport function BNint(value: BigNumberValue = 0): string {\n  return BNify(value).integerValue(BigNumber.ROUND_FLOOR).toFixed(0)\n}\n"],"names":["BigNumber","BNify","value","toString","String","BNSafeDiv","num","den","BNeq","div","BNstring","BNFixed","decimals","toFixed","BNgt","bigInt","gt","BNgte","gte","BNlt","lt","BNlte","lte","eq","BNint","integerValue","ROUND_FLOOR"],"mappings":"AAAA,OAAOA,eAAe,eAAc;AAKpC;;;;CAIC,GACD,OAAO,SAASC,MAAMC,QAAwB,CAAC;IAC7C,OAAO,IAAIF,UACT,OAAOE,UAAU,WACbA,MAAMC,QAAQ,KACd,OAAOD,UAAU,WACjBA,QACAE,OAAOF;AAEf;AAEA;;;;;CAKC,GACD,OAAO,SAASG,UAAUC,GAAmB,EAAEC,GAAmB;IAChE,IAAIC,KAAKD,MAAM,OAAON,MAAM;IAC5B,OAAOA,MAAMK,KAAKG,GAAG,CAACR,MAAMM;AAC9B;AAEA;;;;CAIC,GACD,OAAO,SAASG,SAASR,KAAqB;IAC5C,OAAOD,MAAMC,OAAOC,QAAQ;AAC9B;AAEA;;;;CAIC,GACD,OAAO,SAASQ,QAAQT,QAAwB,CAAC,EAAEU,WAAW,CAAC;IAC7D,OAAOX,MAAMC,OAAOW,OAAO,CAACD;AAC9B;AAEA;;;;;CAKC,GACD,OAAO,SAASE,KACdC,SAAyB,CAAC,EAC1Bb,QAAwB,CAAC;IAEzB,OAAOD,MAAMc,QAAQC,EAAE,CAACf,MAAMC;AAChC;AAEA;;;;;CAKC,GACD,OAAO,SAASe,MACdF,SAAyB,CAAC,EAC1Bb,QAAwB,CAAC;IAEzB,OAAOD,MAAMc,QAAQG,GAAG,CAACjB,MAAMC;AACjC;AAEA;;;;;CAKC,GACD,OAAO,SAASiB,KACdJ,SAAyB,CAAC,EAC1Bb,QAAwB,CAAC;IAEzB,OAAOD,MAAMc,QAAQK,EAAE,CAACnB,MAAMC;AAChC;AAEA;;;;;CAKC,GACD,OAAO,SAASmB,MACdN,SAAyB,CAAC,EAC1Bb,QAAwB,CAAC;IAEzB,OAAOD,MAAMc,QAAQO,GAAG,CAACrB,MAAMC;AACjC;AAEA;;;;;CAKC,GACD,OAAO,SAASM,KACdO,SAAyB,CAAC,EAC1Bb,QAAwB,CAAC;IAEzB,OAAOD,MAAMc,QAAQQ,EAAE,CAACtB,MAAMC;AAChC;AAEA;;;;CAIC,GACD,OAAO,SAASsB,MAAMtB,QAAwB,CAAC;IAC7C,OAAOD,MAAMC,OAAOuB,YAAY,CAACzB,UAAU0B,WAAW,EAAEb,OAAO,CAAC;AAClE"}