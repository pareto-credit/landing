{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/core/api-entity.class.ts"],"sourcesContent":["import { Axios } from 'axios'\nimport { Page, stringify, uriFy } from '../core'\n\nexport class ApiEntity {\n  protected axios\n\n  // Pagination\n  protected defaultLimit = 50\n  protected limit = 200\n\n  constructor(axios: Axios) {\n    this.axios = axios\n  }\n\n  /**\n   * Create item by body\n   * @param url - the url to use\n   * @param body - the body to send\n   * @returns the promise for create the item\n   */\n  protected async _create<T>(url: string, body: any): Promise<T> {\n    return this.axios\n      .request({\n        url,\n        method: 'POST',\n        data: stringify(body),\n      })\n      .then((response) => response.data)\n  }\n\n  /**\n   * Search items by params\n   * @param url - the url to use\n   * @param searchParams - the search params to filter the items\n   * @returns the promise for search items\n   */\n  protected async _search<T>(\n    url: string,\n    searchParams?: any\n  ): Promise<Page<T>> {\n    return this.axios\n      .request({\n        url,\n        method: 'GET',\n        responseType: 'json',\n        params: searchParams\n          ? new URLSearchParams(uriFy(searchParams))\n          : undefined,\n      })\n      .then((response) => response.data)\n  }\n\n  /**\n   * Search ALL items by params\n   * @param url - the url to use\n   * @param searchParams - the search params to filter the items\n   * @returns the promise for search all items\n   */\n  protected async _searchAll<T>(\n    url: string,\n    searchParams: any = {}\n  ): Promise<Page<T>> {\n    let offset = 0\n    let totalCount = this.limit\n    let data = [] as T[]\n\n    do {\n      const response = await this._search<T>(url, {\n        ...searchParams,\n        limit: this.limit,\n        offset,\n      })\n      offset += this.limit\n      totalCount = response.totalCount\n      data = [...data, ...response.data]\n    } while (offset <= totalCount)\n\n    return {\n      data,\n      totalCount,\n    }\n  }\n\n  /**\n   * List items by params\n   * @param url - the url to use\n   * @param searchParams - the search params for items filtering\n   * @returns the promise for list items\n   */\n  protected async _list<T>(url: string, searchParams?: any): Promise<T[]> {\n    return this._search<T>(url, searchParams).then((response) => response.data)\n  }\n\n  /**\n   * List ALL items by params\n   * @param url - the url to use\n   * @param searchParams - the search params for items filtering\n   * @returns the promise for list items\n   */\n  protected async _listAll<T>(url: string, searchParams?: any): Promise<T[]> {\n    return this._searchAll<T>(url, searchParams).then(\n      (response) => response.data\n    )\n  }\n\n  /**\n   * Find one item by search params if exists\n   * @param url - the url to use\n   * @param searchParams - the search params for item search\n   * @returns the promise for find an item\n   */\n  protected async _findOne<T>(\n    url: string,\n    searchParams?: any\n  ): Promise<T | undefined> {\n    return this.axios\n      .request({\n        url,\n        method: 'GET',\n        params: searchParams\n          ? new URLSearchParams(uriFy(searchParams))\n          : undefined,\n      })\n      .then((response) => {\n        const page = response.data\n        return page.data ? page.data[0] : undefined\n      })\n  }\n\n  /**\n   * Read an item by params. Emit an error otherwise\n   * @param url - the url string\n   * @param searchParams - the search params to use\n   * @returns the promise for read an item\n   */\n  protected async _readOne<T>(url: string, searchParams: any): Promise<T> {\n    return this.axios\n      .request({\n        url,\n        method: 'GET',\n        params: new URLSearchParams(uriFy(searchParams)),\n      })\n      .then((response) => {\n        const { data } = response.data\n\n        if (!data.length) {\n          throw Error('Not found')\n        }\n\n        return data[0]\n      })\n  }\n}\n"],"names":["stringify","uriFy","ApiEntity","_create","url","body","axios","request","method","data","then","response","_search","searchParams","responseType","params","URLSearchParams","undefined","_searchAll","offset","totalCount","limit","_list","_listAll","_findOne","page","_readOne","length","Error","constructor","defaultLimit"],"mappings":";AACA,SAAeA,SAAS,EAAEC,KAAK,QAAQ,UAAS;AAEhD,OAAO,MAAMC;IAWX;;;;;GAKC,GACD,MAAgBC,QAAWC,GAAW,EAAEC,IAAS,EAAc;QAC7D,OAAO,IAAI,CAACC,KAAK,CACdC,OAAO,CAAC;YACPH;YACAI,QAAQ;YACRC,MAAMT,UAAUK;QAClB,GACCK,IAAI,CAAC,CAACC,WAAaA,SAASF,IAAI;IACrC;IAEA;;;;;GAKC,GACD,MAAgBG,QACdR,GAAW,EACXS,YAAkB,EACA;QAClB,OAAO,IAAI,CAACP,KAAK,CACdC,OAAO,CAAC;YACPH;YACAI,QAAQ;YACRM,cAAc;YACdC,QAAQF,eACJ,IAAIG,gBAAgBf,MAAMY,iBAC1BI;QACN,GACCP,IAAI,CAAC,CAACC,WAAaA,SAASF,IAAI;IACrC;IAEA;;;;;GAKC,GACD,MAAgBS,WACdd,GAAW,EACXS,eAAoB,CAAC,CAAC,EACJ;QAClB,IAAIM,SAAS;QACb,IAAIC,aAAa,IAAI,CAACC,KAAK;QAC3B,IAAIZ,OAAO,EAAE;QAEb,GAAG;YACD,MAAME,WAAW,MAAM,IAAI,CAACC,OAAO,CAAIR,KAAK,aACvCS;gBACHQ,OAAO,IAAI,CAACA,KAAK;gBACjBF;;YAEFA,UAAU,IAAI,CAACE,KAAK;YACpBD,aAAaT,SAASS,UAAU;YAChCX,OAAO;mBAAIA;mBAASE,SAASF,IAAI;aAAC;QACpC,QAASU,UAAUC,WAAW;QAE9B,OAAO;YACLX;YACAW;QACF;IACF;IAEA;;;;;GAKC,GACD,MAAgBE,MAASlB,GAAW,EAAES,YAAkB,EAAgB;QACtE,OAAO,IAAI,CAACD,OAAO,CAAIR,KAAKS,cAAcH,IAAI,CAAC,CAACC,WAAaA,SAASF,IAAI;IAC5E;IAEA;;;;;GAKC,GACD,MAAgBc,SAAYnB,GAAW,EAAES,YAAkB,EAAgB;QACzE,OAAO,IAAI,CAACK,UAAU,CAAId,KAAKS,cAAcH,IAAI,CAC/C,CAACC,WAAaA,SAASF,IAAI;IAE/B;IAEA;;;;;GAKC,GACD,MAAgBe,SACdpB,GAAW,EACXS,YAAkB,EACM;QACxB,OAAO,IAAI,CAACP,KAAK,CACdC,OAAO,CAAC;YACPH;YACAI,QAAQ;YACRO,QAAQF,eACJ,IAAIG,gBAAgBf,MAAMY,iBAC1BI;QACN,GACCP,IAAI,CAAC,CAACC;YACL,MAAMc,OAAOd,SAASF,IAAI;YAC1B,OAAOgB,KAAKhB,IAAI,GAAGgB,KAAKhB,IAAI,CAAC,EAAE,GAAGQ;QACpC;IACJ;IAEA;;;;;GAKC,GACD,MAAgBS,SAAYtB,GAAW,EAAES,YAAiB,EAAc;QACtE,OAAO,IAAI,CAACP,KAAK,CACdC,OAAO,CAAC;YACPH;YACAI,QAAQ;YACRO,QAAQ,IAAIC,gBAAgBf,MAAMY;QACpC,GACCH,IAAI,CAAC,CAACC;YACL,MAAM,EAAEF,IAAI,EAAE,GAAGE,SAASF,IAAI;YAE9B,IAAI,CAACA,KAAKkB,MAAM,EAAE;gBAChB,MAAMC,MAAM;YACd;YAEA,OAAOnB,IAAI,CAAC,EAAE;QAChB;IACJ;IA7IAoB,YAAYvB,KAAY,CAAE;QAJ1B,aAAa;aACHwB,eAAe;aACfT,QAAQ;QAGhB,IAAI,CAACf,KAAK,GAAGA;IACf;AA4IF"}