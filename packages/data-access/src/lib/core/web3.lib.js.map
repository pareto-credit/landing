{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/core/web3.lib.ts"],"sourcesContent":["import { decodeParameters } from 'web3-eth-abi'\nimport { AbiInput, HexString } from 'web3'\nimport { WEB3_HASH_LINKS } from './web3.const'\nimport { Web3HashType } from './web3.model'\n/**\n * Remove initial '0x' from an address\n * @param addr - the address to strip\n * @returns the address stripped\n */\nexport function strip0x(addr: string): string {\n  return addr.replace(/^0x/, '')\n}\n\n/**\n * Check if a string is a blockchain address\n * @param address - the address string to verify\n * @returns true if is an address\n */\nexport function isAddress(address: string): boolean {\n  return typeof address === 'string' && !!address.match(/^0x[a-fA-F0-9]{40}$/)\n}\n\n/**\n * Check if a string is a blockchain transaction\n * @param hash - the hash string to verify\n * @returns true if is a tx hash\n */\nexport function isTxHash(hash: string): boolean {\n  return typeof hash === 'string' && !!hash.match(/^0x[a-fA-F0-9]{64}$/)\n}\n\n/**\n * Decode ABI parameters\n * @param inputs abi inputs\n * @param bytes hex string\n * @returns decoded parameters\n */\nexport function decodeAbiParameters(inputs: AbiInput[], bytes: HexString): any {\n  return decodeParameters(inputs, bytes)\n}\n\n/**\n * Reduce the length of an hash\n * @param hash - the hash to short\n * @param startLen - the start length\n * @param endLen - the end length\n * @returns the hash shorted\n */\nexport function shortHash(hash: string, startLen = 7, endLen = 4) {\n  const txStart = hash.slice(0, startLen)\n  const txEnd = hash.slice(hash.length - endLen)\n  return `${txStart}...${txEnd}`\n}\n\n/**\n * Make hash link\n * @param hash - the hash\n * @param chainID - the chain ID\n * @returns the link to the transaction/address hash\n */\nexport function makeHashLink(\n  type: Web3HashType,\n  hash: string,\n  chainID: string\n) {\n  const hashLink = WEB3_HASH_LINKS[chainID]\n  return `${hashLink}/${type}/${hash}`\n}\n"],"names":["decodeParameters","WEB3_HASH_LINKS","strip0x","addr","replace","isAddress","address","match","isTxHash","hash","decodeAbiParameters","inputs","bytes","shortHash","startLen","endLen","txStart","slice","txEnd","length","makeHashLink","type","chainID","hashLink"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,eAAc;AAE/C,SAASC,eAAe,QAAQ,eAAc;AAE9C;;;;CAIC,GACD,OAAO,SAASC,QAAQC,IAAY;IAClC,OAAOA,KAAKC,OAAO,CAAC,OAAO;AAC7B;AAEA;;;;CAIC,GACD,OAAO,SAASC,UAAUC,OAAe;IACvC,OAAO,OAAOA,YAAY,YAAY,CAAC,CAACA,QAAQC,KAAK,CAAC;AACxD;AAEA;;;;CAIC,GACD,OAAO,SAASC,SAASC,IAAY;IACnC,OAAO,OAAOA,SAAS,YAAY,CAAC,CAACA,KAAKF,KAAK,CAAC;AAClD;AAEA;;;;;CAKC,GACD,OAAO,SAASG,oBAAoBC,MAAkB,EAAEC,KAAgB;IACtE,OAAOZ,iBAAiBW,QAAQC;AAClC;AAEA;;;;;;CAMC,GACD,OAAO,SAASC,UAAUJ,IAAY,EAAEK,WAAW,CAAC,EAAEC,SAAS,CAAC;IAC9D,MAAMC,UAAUP,KAAKQ,KAAK,CAAC,GAAGH;IAC9B,MAAMI,QAAQT,KAAKQ,KAAK,CAACR,KAAKU,MAAM,GAAGJ;IACvC,OAAO,CAAC,EAAEC,QAAQ,GAAG,EAAEE,MAAM,CAAC;AAChC;AAEA;;;;;CAKC,GACD,OAAO,SAASE,aACdC,IAAkB,EAClBZ,IAAY,EACZa,OAAe;IAEf,MAAMC,WAAWtB,eAAe,CAACqB,QAAQ;IACzC,OAAO,CAAC,EAAEC,SAAS,CAAC,EAAEF,KAAK,CAAC,EAAEZ,KAAK,CAAC;AACtC"}