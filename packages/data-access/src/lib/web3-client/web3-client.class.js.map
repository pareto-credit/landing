{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/web3-client/web3-client.class.ts"],"sourcesContent":["import Web3, { Block, Contract, ContractAbi, Filter, Transaction } from 'web3'\nimport BigNumber from 'bignumber.js'\n\nimport {\n  Web3CallData,\n  Web3CallParam,\n  Web3ClientModel,\n  Web3ClientOptions,\n  Web3DataParam,\n  Web3DataParams,\n  Web3Event,\n  Web3RPCProvider,\n  Web3Topic,\n} from './web3-client.model'\nimport {\n  WEB3_DEFAULT_BLOCK_PER_YEAR,\n  WEB3_MULTICALL_CONTRACT_ADDR,\n  WEB3_MULTICALL_FIRST_BLOCK,\n  WEB3_MULTICALL_METHOD_ABI,\n  WEB3_MULTICALL_PARAM_ABI,\n  WEB3_MULTICALL_RESPONSE_ABI,\n} from './web3-client.const'\nimport { Abi, BNify, BNlt, BlockNumber, isTxHash, strip0x } from '../core'\n\n/**\n * Web3 Client class\n */\nexport class Web3Client implements Web3ClientModel {\n  // The internal data\n  readonly provider: Web3RPCProvider\n\n  // The Web3 instance\n  public web3: Web3\n\n  // Default contract address to use for multi-calls\n  public blocksPerYear: number\n  public contractAddress: string\n\n  // TODO: This logger must be typed\n  private logger?: any\n\n  constructor({\n    web3,\n    provider,\n    contractAddress = WEB3_MULTICALL_CONTRACT_ADDR,\n    blocksPerYear = WEB3_DEFAULT_BLOCK_PER_YEAR,\n    logger,\n  }: Web3ClientOptions) {\n    this.web3 = web3\n    this.provider = provider\n    this.contractAddress = contractAddress\n    this.blocksPerYear = blocksPerYear\n    this.logger = logger\n  }\n\n  /**\n   * Initialize contract instance\n   * @param abi - the contract ABI\n   * @param address - the address\n   * @returns the new instance of Web3 Contract\n   */\n  public initContract(abi: ContractAbi, address: string): Contract<Abi> {\n    return new this.web3.eth.Contract(abi, address)\n  }\n\n  /**\n   * Create a topic from a type\n   * @param topicType - the topic type\n   * @returns the topic encoded\n   */\n  public createTopic(topicType: Web3Topic) {\n    const argument =\n      topicType === 'transfer' ? 'Transfer(address,address,uint256)' : ''\n    return this.web3.utils.sha3(argument) || ''\n  }\n\n  /**\n   * Get web3 transaction from hash\n   * @param hash transaction hash\n   * @returns web3 transaction object\n   */\n  public async getTransaction(hash: string): Promise<Transaction | undefined> {\n    if (!isTxHash(hash)) return\n    return this.web3.eth.getTransaction(hash)\n  }\n\n  /**\n   * Get block data\n   * @param blockNumber - the block number\n   * @returns the promise to load block data\n   */\n  public async getBlock(blockNumber: BlockNumber = 'latest'): Promise<Block> {\n    return this.web3.eth.getBlock(blockNumber)\n  }\n\n  /**\n   * Get contract events using block range\n   * @param contract vault contract\n   * @param eventType event type\n   * @param startBlock start block number\n   * @param endBlock end block number\n   * @param maxBlocks max blocks per batch\n   * @returns concatenated past events\n   */\n  public async getContractEvents(\n    contract: Contract<Abi>,\n    eventType: 'Transfer',\n    startBlock: BlockNumber,\n    endBlock: BlockNumber = 'latest',\n    filters: Filter = {},\n    maxBlocks = 1000\n  ): Promise<Web3Event[]> {\n    // Get latest block if not specified\n    if (endBlock === 'latest') {\n      endBlock = (await this.getBlock()).number\n    }\n\n    if (BNlt(endBlock, startBlock)) {\n      endBlock = startBlock\n    }\n\n    // Total blocks to get\n    const totalBlocks = BigNumber.maximum(\n      1,\n      BNify(endBlock).minus(BNify(startBlock))\n    )\n\n    this.logger?.debug(\n      `Get ${eventType} events for ${contract.options.address} from ${startBlock} to ${endBlock}, maxBlocks: ${maxBlocks}.`\n    )\n\n    // Set from and to block\n    let fromBlock = BNify(startBlock)\n    let toBlock = BNlt(totalBlocks, maxBlocks)\n      ? BNify(endBlock)\n      : BigNumber.minimum(BNify(endBlock), BNify(startBlock).plus(maxBlocks))\n\n    let pastEvents: any[] = []\n    let retry = 0\n    do {\n      try {\n        // @ts-expect-error: use whatever eventType\n        const events = await contract.getPastEvents(eventType, {\n          fromBlock: this.parseBlock(fromBlock.toNumber()),\n          toBlock: this.parseBlock(toBlock.toNumber()),\n          ...filters,\n        })\n\n        // Concat events\n        pastEvents = [...pastEvents, ...events]\n\n        this.logger?.debug(\n          `Get ${eventType} events for ${contract.options.address} from ${fromBlock} to ${toBlock}. Events: ${events.length}, Total: ${pastEvents.length}`\n        )\n\n        // Increment from and to block\n        fromBlock = toBlock.plus(1)\n        toBlock = BigNumber.minimum(BNify(endBlock), toBlock.plus(maxBlocks))\n      } catch (error) {\n        retry++\n        this.logger?.error(\n          `Error while getting past events for ${contract.options.address} from ${fromBlock} to ${toBlock}. Count: ${retry}`\n        )\n      }\n    } while (BNlt(toBlock, endBlock) && retry < 10)\n\n    return pastEvents\n  }\n\n  /**\n   * Parse block number into hex string\n   * @param blockNumber - the block number\n   * @returns the block number HEX string\n   */\n  public parseBlock(blockNumber: BlockNumber): string {\n    return this.web3.utils.toHex(blockNumber)\n  }\n\n  /**\n   * Decode parameters by ABI\n   * @param abi - the ABI\n   * @param params - the params encoded\n   * @returns the parameters\n   */\n  public decodeParams<T = any>(abi: any, params: string): Array<T> {\n    return Object.values(\n      this.web3.eth.abi.decodeParameters(abi, params)\n    ) as Array<T>\n  }\n\n  /**\n   * Extract data param into flag values\n   * @param params - the data params\n   * @returns the object with values\n   */\n  public extractDataParams(params: Web3DataParam[]): Web3DataParams {\n    return params.reduce<Web3DataParams>(\n      (acc, input) => ({\n        names: [...acc.names, input.name],\n        types: [\n          ...acc.types,\n          input.components\n            ? {\n                components: input.components,\n                type: input.type,\n              }\n            : input.type,\n        ],\n        values: [...acc.values, input.value],\n      }),\n      {\n        names: [],\n        types: [],\n        values: [],\n      }\n    )\n  }\n\n  /**\n   * Execute Web3 Call\n   * @param callData - the call params\n   * @param blockNumber - what block to use as the current state\n   * @returns the promise to use for load contract data\n   */\n  public async call(\n    callData: Web3CallData[],\n    blockNumber: BlockNumber = 'latest'\n  ): Promise<Web3CallData[]> {\n    if (\n      blockNumber !== 'latest' &&\n      BNlt(blockNumber, WEB3_MULTICALL_FIRST_BLOCK)\n    ) {\n      return await this.singleCalls(callData, blockNumber)\n    }\n\n    // Encode params\n    const requests = this.encodeCallsParams(callData)\n\n    // Execute multicalls\n    const responses = await this.web3.eth.call(\n      {\n        data: requests,\n        to: this.contractAddress,\n        from: this.contractAddress,\n      },\n      blockNumber\n    )\n\n    // Decode response\n    return this.decodeCallsResponse(responses, callData)\n  }\n\n  /**\n   * Perform single calls to blockchain\n   * @param callData calls data\n   * @param blockNumber block number\n   * @returns parsed data for passed calls\n   */\n  public async singleCalls(\n    callData: Web3CallData[],\n    blockNumber: BlockNumber = 'latest'\n  ): Promise<Web3CallData[]> {\n    const promises = callData.map((param: Web3CallData) => {\n      const request = this.parseCallParams(param)\n      return this.web3.eth\n        .call(\n          {\n            data: request.bytes,\n            to: request.address,\n            from: request.address,\n          },\n          blockNumber\n        )\n        .catch((err) => '')\n    }, [])\n\n    const responses = await Promise.all(promises)\n\n    return responses.map((response: string, i: number) => {\n      const success = !!response.length\n      return this.decodeCallResponse(success, response, callData[i])\n    })\n  }\n\n  /**\n   * Encode multi calls params\n   * @param callData - the list of the call data\n   * @returns the string encoded of the params\n   */\n  private encodeCallsParams(callData: Web3CallData[], limit?: number): string {\n    // Prepare call method\n    const methodEncoded = this.web3.utils\n      .keccak256(WEB3_MULTICALL_METHOD_ABI)\n      .substring(0, 10)\n\n    const callDataLimited = limit ? callData.slice(0, limit) : callData\n\n    // Prepare call params\n    const params = callDataLimited\n      .map((param) => this.parseCallParams(param))\n      .map((param) => [param.address, param.allowFailure, param.bytes])\n\n    const paramsEncoded = strip0x(\n      this.web3.eth.abi.encodeParameters(WEB3_MULTICALL_PARAM_ABI, [params])\n    )\n\n    return methodEncoded + paramsEncoded\n  }\n\n  /**\n   * Parse call parameters\n   * @param callData - the call data to parse\n   * @returns the call data keccak256 encoded string\n   */\n  private parseCallParams(callData: Web3CallData): Web3CallParam {\n    // Encode params\n    const { types, values } = this.extractDataParams(callData.inputs)\n\n    let params\n    try {\n      params = types.length\n        ? strip0x(this.web3.eth.abi.encodeParameters(types, values))\n        : ''\n    } catch (err) {\n      throw new Error(\n        `Error while encoding parameters types(${types.join(\n          ','\n        )}), values(${values.join(',')}) for method ${callData.method}`\n      )\n    }\n\n    // Encode method\n    const method = this.web3.utils.keccak256(callData.method).substring(0, 10)\n\n    return {\n      address: callData.address,\n      allowFailure: 1,\n      bytes: method + params,\n    }\n  }\n\n  /**\n   * Decode multicall response\n   * @param response - the call encoded response\n   */\n  private decodeCallsResponse(\n    encodedResponses: string,\n    requests: Web3CallData[]\n  ) {\n    // Decode response\n    const res = this.decodeParams<\n      Array<{\n        0: boolean\n        1: string\n      }>\n    >(WEB3_MULTICALL_RESPONSE_ABI, encodedResponses)\n\n    if (!res.length || !res[0]) {\n      throw new Error('Response method not available')\n    }\n\n    // Parse responses based of requests\n    const responses = res[0]\n    return responses.map((r, i) => {\n      const response = responses[i]\n      return this.decodeCallResponse(response[0], response[1], requests[i])\n    })\n  }\n\n  /**\n   * Decode single call response\n   * @param success - True if it's ok\n   * @param response - the response encoded\n   * @param request - the request object\n   * @returns the callData object\n   */\n  private decodeCallResponse(\n    success: boolean,\n    response: string,\n    request: Web3CallData\n  ): Web3CallData {\n    // Return empty output if not succeded\n    if (!success) {\n      return request\n    }\n\n    const { types } = this.extractDataParams(request.outputs)\n\n    try {\n      const values = this.decodeParams(types, response)\n      // Parse response values\n      return {\n        ...request,\n        outputs: request.outputs.map((output, i) => ({\n          ...output,\n          value: values[i],\n        })),\n      }\n    } catch (err) {\n      this.logger?.error({ request, types, response }, 'Decode Error')\n      return request\n    }\n  }\n}\n"],"names":["BigNumber","WEB3_DEFAULT_BLOCK_PER_YEAR","WEB3_MULTICALL_CONTRACT_ADDR","WEB3_MULTICALL_FIRST_BLOCK","WEB3_MULTICALL_METHOD_ABI","WEB3_MULTICALL_PARAM_ABI","WEB3_MULTICALL_RESPONSE_ABI","BNify","BNlt","isTxHash","strip0x","Web3Client","initContract","abi","address","web3","eth","Contract","createTopic","topicType","argument","utils","sha3","getTransaction","hash","getBlock","blockNumber","getContractEvents","contract","eventType","startBlock","endBlock","filters","maxBlocks","number","totalBlocks","maximum","minus","logger","debug","options","fromBlock","toBlock","minimum","plus","pastEvents","retry","events","getPastEvents","parseBlock","toNumber","length","error","toHex","decodeParams","params","Object","values","decodeParameters","extractDataParams","reduce","acc","input","names","name","types","components","type","value","call","callData","singleCalls","requests","encodeCallsParams","responses","data","to","contractAddress","from","decodeCallsResponse","promises","map","param","request","parseCallParams","bytes","catch","err","Promise","all","response","i","success","decodeCallResponse","limit","methodEncoded","keccak256","substring","callDataLimited","slice","allowFailure","paramsEncoded","encodeParameters","inputs","Error","join","method","encodedResponses","res","r","outputs","output","constructor","provider","blocksPerYear"],"mappings":"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"}