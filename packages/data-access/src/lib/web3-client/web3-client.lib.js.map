{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/web3-client/web3-client.lib.ts"],"sourcesContent":["import Web3, { PayableCallOptions, WebSocketProvider, HttpProvider } from 'web3'\nimport { PayableMethodObject } from 'web3-eth-contract'\nimport BigNumber from 'bignumber.js'\nimport {\n  Web3TransactionFee,\n  Web3PayableOptionsParams,\n  Web3Provider,\n  Web3ProviderConnection,\n  Web3RPCProvider,\n  Web3Tokens,\n} from './web3-client.model'\nimport { BNify } from '../core'\n\n/**\n * Get Web3 Https Provider\n * @param providers - the web3 providers\n * @param tokens - the provider tokens\n * @returns the Web3 provider data\n */\nexport function getWeb3HttpsProvider(\n  providers: Web3ProviderConnection[],\n  tokens: Web3Tokens\n): Web3Provider {\n  const connection = providers.find((c) => !!c.https)\n\n  if (!connection?.https) {\n    throw new Error(`No HTTPS provider available`)\n  }\n\n  // Get web3 provider\n  const { provider, https } = connection\n  const token = getWeb3ProviderToken(provider, tokens)\n  const web3Provider = new HttpProvider(https + token)\n  const web3 = new Web3(web3Provider)\n\n  return {\n    provider,\n    web3,\n  }\n}\n\n/**\n * Get Web3 Socket Provider\n * @param providers - the web3 providers\n * @param tokens - the provider tokens\n * @returns the Web3 provider data\n */\nexport async function getWeb3SocketProvider(\n  providers: Web3ProviderConnection[],\n  tokens: Web3Tokens\n): Promise<Web3Provider> {\n  for (const connection of providers) {\n    try {\n      const provider = await getSocketProvider(connection, tokens)\n      return provider\n    } catch (error) {\n      continue\n    }\n  }\n\n  throw new Error(`No WSS provider available`)\n}\n\nasync function getSocketProvider(\n  { wss, provider }: Web3ProviderConnection,\n  tokens: Web3Tokens\n): Promise<Web3Provider> {\n  if (!wss) {\n    throw new Error(`No WSS provider available`)\n  }\n\n  // Get web3 provider\n  const token = getWeb3ProviderToken(provider, tokens)\n  const web3Provider = new WebSocketProvider(\n    wss + token,\n    {},\n    {\n      delay: 500,\n      autoReconnect: true,\n      maxAttempts: 10000,\n    }\n  )\n  const web3 = new Web3(web3Provider)\n\n  // Check connection\n  const networkId = await Promise.race([\n    web3.eth.net.getId(),\n    new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        reject('Timeout')\n      }, 2000)\n    }),\n  ])\n\n  if (!networkId) {\n    throw new Error(`WSS unreachable ${wss}`)\n  }\n\n  return {\n    web3,\n    provider,\n  }\n}\n\n/**\n * Get Web3 provider token\n * @param provider - the provider\n * @param tokens - the provider tokens\n * @returns the token string\n */\nexport function getWeb3ProviderToken(\n  provider: Web3RPCProvider,\n  tokens: Web3Tokens\n): string {\n  let token\n  switch (provider) {\n    case 'INFURA':\n      token = tokens.INFURA\n      break\n    case 'ALCHEMY':\n      token = tokens.ALCHEMY\n      break\n    default:\n      break\n  }\n\n  if (!token) {\n    throw new Error('Token provider not provided')\n  }\n\n  return token\n}\n\n/**\n * Get Web3 Payable Options\n * @param web3\n * @param walletAddress\n * @returns the payable options to use for wallet transactions\n */\nexport async function getWeb3PaypableOptions(\n  web3: Web3,\n  { method, from, value, toleranceBearing = 5 }: Web3PayableOptionsParams\n): Promise<PayableCallOptions> {\n  // Get GAS info for the method call\n  const chainID = await web3.eth.getChainId()\n  const gas = await getWeb3GasLimit(method, { from }, toleranceBearing).catch(\n    () => undefined\n  )\n\n  /* const { maxFeePerGas, maxPriorityFeePerGas, gasPrice } = await getWeb3FeeData(\n    web3\n  ) */\n\n  // MainNET check\n  if (chainID === 1n) {\n    return {\n      from,\n      gas,\n      value,\n    }\n  }\n\n  // Pass only the GAS PRICE\n  return {\n    /**\n     * The address transaction should be made from\n     */\n    from,\n    /**\n     * The maximum gas provided for a transaction (gas limit).\n     */\n    gas,\n    /**\n     * The gas price in WEI to use for transactions.\n     * Not necessary if maxFeePerGas is passed\n     */\n    // gasPrice,\n    value,\n  }\n}\n\n/**\n * Get Web3 Gas Limit\n * @param method - the method to simulate for the gas estimation\n * @param callOptions - the call options\n * @param toleranceBearing - the tolerance bearing percentage to add to the estimation\n * @param minGasLimit - the minimum gas limit\n * @returns the gas limit of the method to call\n */\nexport async function getWeb3GasLimit(\n  method: PayableMethodObject,\n  callOptions: PayableCallOptions = {},\n  toleranceBearing = 0,\n  minGasLimit = 0\n): Promise<string> {\n  /**\n   * Here try to estimate the GAS Limit\n   */\n  const gas = await method.estimateGas(callOptions)\n  let gasLimit = BigNumber.maximum(BNify(gas), BNify(minGasLimit))\n\n  // Add tolerance percentage bearing if necessary\n  if (toleranceBearing > 0) {\n    const tolerancePercentage = BNify(toleranceBearing).div(100)\n    gasLimit = gasLimit.plus(gasLimit.times(tolerancePercentage))\n  }\n\n  return gasLimit.integerValue(BigNumber.ROUND_FLOOR).toString()\n}\n\n/**\n * Get Web3 Transaction Gas price\n * @param web3 - the web3 instance\n * @returns the gas price to use for transaction\n */\nexport async function getWeb3FeeData(web3: Web3) {\n  const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, baseFeePerGas } =\n    await web3.eth.calculateFeeData()\n\n  return {\n    gasPrice: gasPrice?.toString(),\n    maxFeePerGas: maxFeePerGas?.toString(),\n    maxPriorityFeePerGas: maxPriorityFeePerGas?.toString(),\n    baseFeePerGas: baseFeePerGas?.toString(),\n  }\n}\n\n/**\n * Get Web3 Gas Price\n * @param web3 - the web3 instance\n * @returns the gas price to use for transaction\n */\nexport async function getWeb3GasPrice(web3: Web3) {\n  const gasPrice = await web3.eth.getGasPrice()\n  return BNify(gasPrice).div(1e9)\n}\n\n/**\n * Get web3 transaction fee\n * @param web3 - the web3 instance\n * @param method - the payable method\n * @param walletAddress - the wallet address\n * @param ETHPrice - the ETH Price\n * @returns\n */\nexport async function getWeb3TransactionFee(\n  web3: Web3,\n  method: PayableMethodObject,\n  walletAddress: string,\n  options: {\n    ETHPrice?: string\n    toleranceBearing?: number\n  } = {}\n): Promise<Web3TransactionFee> {\n  const { ETHPrice, toleranceBearing = 5 } = options\n\n  // Load gas prices\n  const gasPrice = await web3.eth.getGasPrice()\n  const gasLimit = await getWeb3GasLimit(\n    method,\n    { from: walletAddress },\n    toleranceBearing\n  )\n  const gasETH = BNify(gasLimit).times(BNify(gasPrice)).div(1e18)\n  const gasUSD = ETHPrice ? gasETH.times(ETHPrice || 0) : undefined\n\n  return {\n    ETH: gasETH.toString(),\n    USD: gasUSD?.toString(),\n  }\n}\n"],"names":["Web3","WebSocketProvider","HttpProvider","BigNumber","BNify","getWeb3HttpsProvider","providers","tokens","connection","find","c","https","Error","provider","token","getWeb3ProviderToken","web3Provider","web3","getWeb3SocketProvider","getSocketProvider","error","wss","delay","autoReconnect","maxAttempts","networkId","Promise","race","eth","net","getId","resolve","reject","setTimeout","INFURA","ALCHEMY","getWeb3PaypableOptions","method","from","value","toleranceBearing","chainID","getChainId","gas","getWeb3GasLimit","catch","undefined","callOptions","minGasLimit","estimateGas","gasLimit","maximum","tolerancePercentage","div","plus","times","integerValue","ROUND_FLOOR","toString","getWeb3FeeData","gasPrice","maxFeePerGas","maxPriorityFeePerGas","baseFeePerGas","calculateFeeData","getWeb3GasPrice","getGasPrice","getWeb3TransactionFee","walletAddress","options","ETHPrice","gasETH","gasUSD","ETH","USD"],"mappings":"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"}