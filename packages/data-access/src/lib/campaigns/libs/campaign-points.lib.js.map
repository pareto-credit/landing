{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/campaigns/libs/campaign-points.lib.ts"],"sourcesContent":["import { orderBy } from 'lodash'\nimport moment from 'moment'\nimport BigNumber from 'bignumber.js'\n\nimport {\n  BlockMock,\n  BNFixed,\n  BNgt,\n  BNgte,\n  BNify,\n  BNlte,\n  stringify,\n} from '../../core'\nimport { Transaction, TransactionMock } from '../../transactions'\nimport { Vault } from '../../vaults'\nimport {\n  getWalletBlockBalance,\n  getWalletBlockTokenBalance,\n  WalletBlock,\n  WalletBlockBalanceField,\n  WalletBlockMock,\n} from '../../wallet-blocks'\nimport {\n  Campaign,\n  CampaignBoost,\n  CampaignMetrics,\n  CampaignMetricsReward,\n  CampaignPoints,\n  CampaignPointsVault,\n  CampaignReward,\n  CampaignRule,\n  CampaignRuleDepositType,\n  CampaignRuleTrigger,\n} from '../campaign.model'\nimport { fixTokenAmount, Token } from '../../tokens'\nimport { CampaignPoint } from '../../campaign-points'\nimport { Web3Protocol } from '../../web3-client'\nimport { WalletPerformance } from '../../wallet-performances'\nimport { WalletReferred } from '../../wallets'\n\nconst CAMPAIGN_METRICS: CampaignMetrics = {\n  points: '0',\n  perDay: '0',\n  multiplier: '1',\n  multiplierScaled: '1',\n}\n\n/**\n * Get campaign points\n * @param campaign - the campaign\n * @param vaults - the vault campaign\n * @param transactions - the vault transactions\n */\nexport function getCampaignPoints(\n  campaign: Campaign,\n  campaignVaults: Vault[],\n  transactions: Transaction[],\n  walletBlocks: WalletBlock[],\n  tokens: Token[],\n  campaignTokens?: Token[],\n  affiliatedPoints?: CampaignPoint[],\n  affiliatedPerformances?: WalletPerformance[],\n  referred?: WalletReferred[]\n): CampaignPoints {\n  // Calculate vaults points\n  const vaults = campaignVaults.map((v) =>\n    getCampaignVaultPoints(\n      campaign,\n      v,\n      transactions.filter((t) => t.vaultId === v._id),\n      walletBlocks.filter((b) => b.vaultId === v._id),\n      tokens.find((t) => t._id === v.tokenId),\n      campaignTokens\n    )\n  )\n\n  const referredIds = (referred || []).map((r) => r._id)\n  const referredBlocks = walletBlocks.filter((b) =>\n    referredIds.includes(b.walletId)\n  )\n\n  // Calculate boosts\n  const { points: rulePoints } = computeMetrics(vaults)\n  const boosts = (campaign.boosts || [])\n    .filter((b) => !b.vaultIds?.length)\n    .map((b) => {\n      const boostToken = b.tokenId\n        ? campaignTokens?.find((t) => t._id === b.tokenId)\n        : undefined\n      return getCampaignBoostPoints(\n        b,\n        rulePoints,\n        affiliatedPoints,\n        affiliatedPerformances,\n        referredBlocks,\n        boostToken\n      )\n    })\n\n  // Calculate aggregation\n  const { points, perDay, multiplier, rewards } = computeMetrics(\n    vaults,\n    boosts,\n    false\n  )\n\n  return {\n    points,\n    perDay,\n    multiplier,\n    vaults,\n    rewards,\n  }\n}\n\n/**\n * Get campaign vault points\n * @param campaign - the campaign\n * @param vault - the vault\n * @param transactions - the wallet transactions\n * @param walletBlock -  the wallet block\n * @returns the vault points\n */\nexport function getCampaignVaultPoints(\n  campaign: Campaign,\n  vault: Vault,\n  transactions: Transaction[],\n  walletBlocks: WalletBlock[],\n  token?: Token,\n  campaignTokens?: Token[]\n): CampaignPointsVault {\n  // Check rules\n  const vaultCampaign = vault.campaigns?.find((c) => c._id === campaign._id)\n  const campaignRules = campaign.rules?.filter(\n    (r) => !r.vaultIds || r.vaultIds.includes(vault._id)\n  )\n  const vaultRules = campaignRules || vaultCampaign?.rules\n\n  if (!vaultRules?.length || !token) {\n    return { _id: vault._id, ...CAMPAIGN_METRICS }\n  }\n\n  // Calculate vaults points\n  const rules: CampaignMetrics[] = vaultRules\n    .filter((r) => !r.vaultIds || r.vaultIds.includes(vault._id))\n    .map((r) => {\n      const ruleToken = r.deposit.tokenId\n        ? campaignTokens?.find((t) => t._id === r.deposit.tokenId)\n        : token\n      const ruleMetrics = getCampaignRuleVaultPoints(\n        campaign,\n        r,\n        transactions,\n        walletBlocks,\n        ruleToken || token\n      )\n      return {\n        code: r.code,\n        ...ruleMetrics,\n      }\n    })\n\n  const boosts: CampaignMetrics[] = (campaign.boosts || [])\n    .filter((b) => !!b.vaultIds?.includes(vault._id))\n    .map((b) => {\n      const boostToken = b.tokenId\n        ? campaignTokens?.find((t) => t._id === b.tokenId)\n        : token\n      const boostMetrics = getCampaignBoostVaultPoints(\n        campaign,\n        b,\n        transactions,\n        walletBlocks,\n        boostToken || token\n      )\n      return {\n        rules: b.rules,\n        ...boostMetrics,\n      }\n    })\n\n  const boostedRules = applyBoostsToRules(rules, boosts)\n\n  const { points, perDay, multiplier, rewards, multiplierScaled } =\n    boostedRules.reduce((acc, v) => makeMetrics(acc, v), CAMPAIGN_METRICS)\n\n  return {\n    _id: vault._id,\n    points,\n    perDay,\n    rewards,\n    multiplier,\n    multiplierScaled,\n  }\n}\n\n/**\n * Get campaign rule vault points\n * @param rule - the campaign rule\n * @param vault - the vault\n * @param transactions - the wallet transactions\n * @param walletBlock -  the wallet block\n * @returns the rule vault points\n */\nexport function getCampaignRuleVaultPoints(\n  campaign: Campaign,\n  rule: CampaignRule,\n  transactions: Transaction[],\n  walletBlocks: WalletBlock[],\n  token: Token\n): CampaignMetrics {\n  const options = {\n    startDate: campaign.startDate || campaign.createdAt,\n    endDate: campaign.endDate,\n  }\n\n  switch (rule.trigger) {\n    case 'DEPOSIT': {\n      switch (rule.deposit.type) {\n        case 'BALANCE':\n          return getRuleDepositBalancePoints(rule, walletBlocks, token, options)\n        case 'BALANCE_SUSP':\n          return getRuleDepositBalancePoints(rule, walletBlocks, token, {\n            ...options,\n            balanceField: 'suspAggregated',\n          })\n        case 'BALANCE_USP':\n          return getRuleDepositBalancePoints(rule, walletBlocks, token, {\n            ...options,\n            balanceField: 'uspPools',\n          })\n        case 'AGE':\n          return getRuleDepositAgePoints(rule, walletBlocks, options)\n        default:\n          return CAMPAIGN_METRICS\n      }\n    }\n    case 'DEPOSIT_REQUEST': {\n      const depositRequestPoints = getRuleQueuePoints(\n        rule,\n        transactions,\n        token,\n        options\n      )\n      return depositRequestPoints\n    }\n  }\n}\n\n/**\n * Get campaign vault boost points\n * @param rule - the campaign rule\n * @param vault - the vault\n * @param transactions - the wallet transactions\n * @param walletBlock -  the wallet block\n * @param token -  the vault token\n * @returns the rule vault points\n */\nexport function getCampaignBoostVaultPoints(\n  campaign: Campaign,\n  boost: CampaignBoost,\n  transactions: Transaction[],\n  walletBlocks: WalletBlock[],\n  token: Token\n): CampaignMetrics {\n  const options = {\n    startDate: campaign.startDate || campaign.createdAt,\n    endDate: campaign.endDate,\n  }\n\n  switch (boost.type) {\n    case 'STAKE': {\n      return getBoostStakeRewards(boost, walletBlocks, token, options)\n    }\n    case 'DEPOSIT_NAPIER':\n      return getBoostStakeRewards(boost, walletBlocks, token, {\n        ...options,\n        balanceField: 'balance',\n        protocols: ['NapierLP', 'NapierYT'],\n      })\n    case 'DEPOSIT_BALANCER': {\n      return getBoostStakeRewards(boost, walletBlocks, token, {\n        ...options,\n        balanceField: 'uspBalance',\n        protocols: ['Balancer'],\n      })\n    }\n    default:\n      return CAMPAIGN_METRICS\n  }\n}\n\n/**\n * Get campaign boost points\n * @param rule - the campaign rule\n * @param affiliatedPoints - the affiliated points\n * @returns the boost global points\n */\nexport function getCampaignBoostPoints(\n  boost: CampaignBoost,\n  totalPoints: string,\n  affiliatedPoints?: CampaignPoint[],\n  affiliatedPerformances?: WalletPerformance[],\n  referredBlocks?: WalletBlock[],\n  token?: Token\n): CampaignMetrics {\n  switch (boost.type) {\n    case 'REFERRAL':\n      return getBoostReferralReward(boost, affiliatedPoints)\n    case 'REFERRAL_FEE':\n      return getBoostReferralFeeReward(boost, affiliatedPerformances)\n    case 'REFERRED':\n      return getBoostReferredReward(boost, totalPoints, referredBlocks, token)\n    default:\n      return CAMPAIGN_METRICS\n  }\n}\n\n/**\n * Get rule deposit balance points\n * @param rule - the rule campaign\n * @param walletBlocks - the wallet blocks\n * @param token - the vault token\n * @param options - the calculation options\n * @returns the campaign points\n */\nexport function getRuleDepositBalancePoints(\n  { frequency, reward }: CampaignRule,\n  walletBlocks: WalletBlock[],\n  token: Token,\n  options: {\n    startDate: string\n    endDate?: string\n    balanceField?: WalletBlockBalanceField\n  }\n): CampaignMetrics {\n  const { startDate, endDate, balanceField } = options\n\n  // Order and filter wallet blocks\n  const blocks = orderBy(walletBlocks, 'block.number', 'asc')\n\n  // Fake current block\n  const lastBlock = blocks.length ? blocks[blocks.length - 1] : undefined\n  const currentBlock = WalletBlockMock({\n    block: { timestamp: moment(endDate).unix() },\n    tokenBalance: lastBlock\n      ? getWalletBlockBalance(lastBlock, balanceField, { token })\n      : '0',\n  })\n\n  return [...blocks, currentBlock].reduce<CampaignMetrics>((acc, b, i) => {\n    // Check the block timestamp\n    if (\n      moment.unix(b.block.timestamp).isBefore(moment(startDate)) ||\n      moment.unix(b.block.timestamp).isAfter(moment(endDate))\n    ) {\n      return acc\n    }\n\n    // Age calculation\n    const prevBlock = blocks[i - 1]\n    const prevTimestamp = prevBlock?.block.timestamp || 0\n    const prevBalance = prevBlock\n      ? getWalletBlockBalance(prevBlock, balanceField, { token })\n      : '0'\n\n    const date = moment.unix(prevTimestamp).isAfter(startDate)\n      ? moment.unix(prevTimestamp)\n      : moment(startDate)\n    const delta = moment\n      .unix(b.block.timestamp)\n      .diff(date, frequency.unit, true)\n    const ageMultiplier = BNify(delta).div(frequency.value).toString()\n    const balance = fixTokenAmount(token, prevBalance)\n    const rulePoints = BNify(balance).times(reward.value).times(ageMultiplier)\n\n    // Points per day\n    const distributionDays = moment\n      .duration(frequency.value, frequency.unit)\n      .asDays()\n    const pointsPerDay =\n      i === blocks.length && BNgt(balance, 0)\n        ? BNify(balance).times(reward.value).div(distributionDays).toString()\n        : 0\n\n    return {\n      points: BNify(acc.points).plus(rulePoints).toString(),\n      perDay: BNify(acc.perDay).plus(pointsPerDay).toString(),\n      multiplier: acc.multiplier,\n    }\n  }, CAMPAIGN_METRICS)\n}\n\n/**\n * Get rule deposit age points\n * @param rule - the rule campaign\n * @param walletBlocks - the wallet blocks\n * @param options - the calculation options\n * @returns the campaign points\n */\nexport function getRuleDepositAgePoints(\n  { frequency, reward }: CampaignRule,\n  walletBlocks: WalletBlock[],\n  options: {\n    startDate: string\n    endDate?: string\n  }\n): CampaignMetrics {\n  const { startDate, endDate } = options\n\n  // Order and filter wallet blocks\n  let age = 0\n  const blocks = orderBy(walletBlocks, 'block.number', 'asc')\n\n  // Fake current block\n  const currentBlock = WalletBlockMock({\n    block: { timestamp: moment(endDate).unix() - 1 },\n  })\n\n  return [...blocks, currentBlock].reduce<CampaignMetrics>((acc, b, i) => {\n    // Check the block timestamp\n    if (\n      !moment\n        .unix(b.block.timestamp)\n        .isBetween(moment(startDate), moment(endDate))\n    ) {\n      return acc\n    }\n\n    const prevBlock = blocks[i - 1]\n    const prevBalance = prevBlock ? getWalletBlockBalance(prevBlock) : '0'\n    if (BNgt(prevBalance)) {\n      const date = moment.unix(prevBlock?.block.timestamp).isAfter(startDate)\n        ? moment.unix(prevBlock?.block.timestamp)\n        : moment(startDate)\n      const delta = moment\n        .unix(b.block.timestamp)\n        .diff(date, frequency.unit, true)\n      age += delta\n    }\n\n    const ruleMultiplier = age >= frequency.value ? reward.value : 1\n    const multiplier = BigNumber.maximum(acc.multiplier, ruleMultiplier)\n\n    return {\n      points: acc.points,\n      perDay: acc.perDay,\n      multiplier: multiplier.toString(),\n    }\n  }, CAMPAIGN_METRICS)\n}\n\n/**\n * Get boost stake rewards\n * @param boost boost object\n * @param transactions vault transactions\n * @param walletBlocks wallet blocks\n * @param token vault token\n * @param options campaign options\n * @returns boost rewards\n */\nexport function getBoostStakeRewards(\n  boost: CampaignBoost,\n  walletBlocks: WalletBlock[],\n  token: Token,\n  options: {\n    protocols?: Web3Protocol[]\n    balanceField?: WalletBlockBalanceField\n    startDate: string\n    endDate?: string\n  }\n): CampaignMetrics {\n  const { reward } = boost\n\n  // Calculate age between request and process\n  const boostRewards = getBoostRewards(token, reward, walletBlocks, options)\n\n  const multiplierScaled = BNgt(boostRewards.totalAge)\n    ? boostRewards.multiplier.div(boostRewards.totalAge).toString()\n    : '1'\n\n  return {\n    perDay: '0',\n    points: boostRewards.points.toString(),\n    multiplierScaled: multiplierScaled,\n    multiplier: boostRewards.lastMultiplier.toString(),\n  }\n}\n\n/**\n * Get boost referral fees reward\n * @param boost - the campaign boost\n * @param affiliatedPoints - the affiliated fees\n * @returns the metrics\n */\nexport function getBoostReferralFeeReward(\n  { reward }: CampaignBoost,\n  affiliatedPerformances?: WalletPerformance[]\n): CampaignMetrics {\n  switch (reward.type) {\n    case 'AMOUNT':\n      return {\n        points: BNify(reward.value).toString(),\n        perDay: '0',\n        multiplier: '1',\n      }\n    case 'PERCENTAGE': {\n      if (!affiliatedPerformances?.length) {\n        return CAMPAIGN_METRICS\n      }\n\n      const totalFeesUSD = affiliatedPerformances.reduce(\n        (acc, p) => BNify(acc).plus(p.fees.USD).toString(),\n        '0'\n      )\n\n      return {\n        points: '0',\n        rewards: [\n          {\n            USD: BNify(totalFeesUSD).times(reward.value).div(100).toString(),\n          },\n        ],\n        perDay: '0',\n        multiplier: '1',\n      }\n    }\n    default:\n      return CAMPAIGN_METRICS\n  }\n}\n\n/**\n * Get boost referral reward\n * @param boost - the campaign boost\n * @param affiliatedPoints - the affiliated points\n * @returns the metrics\n */\nexport function getBoostReferralReward(\n  { reward }: CampaignBoost,\n  affiliatedPoints?: CampaignPoint[]\n): CampaignMetrics {\n  switch (reward.type) {\n    case 'AMOUNT':\n      return {\n        points: BNify(reward.value).toString(),\n        perDay: '0',\n        multiplier: '1',\n      }\n    case 'PERCENTAGE': {\n      if (!affiliatedPoints?.length) {\n        return CAMPAIGN_METRICS\n      }\n\n      const totalPoints = affiliatedPoints.reduce(\n        (acc, p) => BNify(acc).plus(p.points).toString(),\n        '0'\n      )\n      return {\n        points: BNify(totalPoints).times(reward.value).div(100).toString(),\n        perDay: '0',\n        multiplier: '1',\n      }\n    }\n    default:\n      return CAMPAIGN_METRICS\n  }\n}\n\n/**\n * Get boost referred reward\n * @param param0\n * @param totalPoints\n */\nexport function getBoostReferredReward(\n  { reward }: CampaignBoost,\n  totalPoints: string,\n  referredBlocks?: WalletBlock[],\n  token?: Token\n): CampaignMetrics {\n  if (!referredBlocks) {\n    return CAMPAIGN_METRICS\n  }\n\n  // Select referred blocks with at least 100 USP if token is specified\n  const referred = token\n    ? referredBlocks.filter((wB) =>\n        BNgte(getWalletBlockBalance(wB, 'uspAggregated', { token }), 100 * 1e18)\n      )\n    : referredBlocks\n\n  if (!referred?.length) {\n    return CAMPAIGN_METRICS\n  }\n\n  switch (reward.type) {\n    case 'AMOUNT': {\n      const points = BNify(reward.value).times(referred.length).toString()\n      return {\n        points,\n        perDay: '0',\n        multiplier: '1',\n      }\n    }\n\n    case 'PERCENTAGE': {\n      if (BNlte(totalPoints)) {\n        return CAMPAIGN_METRICS\n      }\n\n      const rewardPoints = BNify(totalPoints).times(reward.value).div(100)\n      const points = rewardPoints.times(referred.length).toString()\n\n      return {\n        points,\n        perDay: '0',\n        multiplier: '1',\n      }\n    }\n    default:\n      return CAMPAIGN_METRICS\n  }\n}\n\n/**\n * Calculate boost rewards from walletBlocks\n * @param reward campaign reward data\n * @param walletBlocks wallet blocks\n * @param vaultType vault type\n * @param stakedAmount wallet staked amount\n * @returns boost rewards\n */\nexport function calculateBoostBlockRewards(\n  token: Token,\n  reward: CampaignReward,\n  walletBlock: WalletBlock,\n  balanceField?: WalletBlockBalanceField,\n  protocols?: Web3Protocol[]\n): {\n  points?: BigNumber\n  multiplier?: BigNumber\n  stakedAmount: BigNumber\n} {\n  // Get staked amount\n  const stakedAmount = BNify(\n    getWalletBlockTokenBalance(token, walletBlock, 0, protocols)\n  )\n\n  const rewards = {\n    points: BNify(0),\n    multiplier: BNify(1),\n    stakedAmount,\n  }\n\n  const blockBalance = getWalletBlockBalance(walletBlock, balanceField, {\n    token,\n  })\n\n  switch (reward.type) {\n    case 'AMOUNT':\n      return {\n        ...rewards,\n        points: BNify(reward.value),\n      }\n    case 'MULTIPLIER': {\n      const stakedPercentage = BNgt(stakedAmount)\n        ? stakedAmount.div(stakedAmount.plus(blockBalance))\n        : 0\n\n      const multiplier = BNgt(stakedPercentage)\n        ? BNify(1).plus(BNify(reward.value - 1).times(stakedPercentage))\n        : BNify(1)\n\n      return {\n        ...rewards,\n        multiplier,\n      }\n    }\n  }\n  return rewards\n}\n\n/**\n * Get boost rewards for a specific wallet\n * @param token token object\n * @param reward campaign reward\n * @param walletBlocks wallet blocks\n * @returns\n */\nexport function getBoostRewards(\n  token: Token,\n  reward: CampaignReward,\n  walletBlocks: WalletBlock[],\n  options: {\n    protocols?: Web3Protocol[]\n    balanceField?: WalletBlockBalanceField\n    startDate: string\n    endDate?: string\n  }\n) {\n  const { startDate, endDate, balanceField, protocols } = options\n\n  const startTimestamp = moment(startDate).unix()\n  const endTimestamp = moment(endDate).unix()\n\n  const orderedBlocks: WalletBlock[] = orderBy(\n    walletBlocks,\n    'block.number',\n    'asc'\n  )\n\n  const firstWalletBlock = walletBlocks.find((wb) =>\n    BNgt(\n      getWalletBlockBalance(wb, 'tokenAggregated', {\n        token,\n        protocols,\n      })\n    )\n  )\n\n  const filteredWalletBlocks = orderedBlocks.filter((wb) =>\n    BNgte(wb.block.number, firstWalletBlock?.block.number)\n  )\n\n  // Fake current block\n  const lastBlock = filteredWalletBlocks.length\n    ? filteredWalletBlocks[filteredWalletBlocks.length - 1]\n    : undefined\n\n  const currentBlock = WalletBlockMock({\n    ...(lastBlock || {}),\n    block: BlockMock({ ...lastBlock?.block, timestamp: moment().unix() }),\n  })\n\n  const blocks = [...filteredWalletBlocks, currentBlock]\n\n  return blocks.reduce(\n    (acc, walletBlock, i) => {\n      const nextWalletBlock = blocks[i + 1]\n      if (!nextWalletBlock) {\n        return acc\n      }\n\n      // Use campaign start/end date as time bounds\n      const nextTimestamp = Math.min(\n        endTimestamp,\n        nextWalletBlock.block.timestamp\n      )\n      const blockTimestamp = Math.max(\n        startTimestamp,\n        walletBlock.block.timestamp\n      )\n\n      const age = nextTimestamp - blockTimestamp\n\n      const blocksRewards = calculateBoostBlockRewards(\n        token,\n        reward,\n        walletBlock,\n        balanceField,\n        protocols\n      )\n\n      const blockScaledMultiplier = BNify(blocksRewards.multiplier).times(age)\n      const multiplier = acc.multiplier.plus(blockScaledMultiplier)\n      const totalAge = acc.totalAge + age\n\n      return {\n        ...acc,\n        totalAge,\n        points: acc.points.plus(blocksRewards.points || 0),\n        multiplier,\n        stakedAmount: blocksRewards.stakedAmount,\n        lastMultiplier: BNify(blocksRewards.multiplier),\n        totalStakedAmount: acc.totalStakedAmount.plus(\n          blocksRewards.stakedAmount\n        ),\n      }\n    },\n    {\n      totalAge: 0,\n      points: BNify(0),\n      multiplier: BNify(1),\n      stakedAmount: BNify(0),\n      lastMultiplier: BNify(1),\n      totalStakedAmount: BNify(0),\n    }\n  )\n}\n\n/**\n * Get rule queue balance points\n * @param rule - the rule campaign\n * @param transactions - the vault transactions\n * @param options - the calculation options\n * @returns the campaign points\n */\nexport function getRuleQueuePoints(\n  rule: CampaignRule,\n  transactions: Transaction[],\n  token: Token,\n  options: {\n    startDate: string\n    endDate?: string\n  }\n): CampaignMetrics {\n  const { frequency, reward } = rule\n  const { startDate, endDate } = options\n\n  // Fake current transaction\n  const currentTransaction = TransactionMock({\n    type: 'PROCESS_DEPOSIT_QUEUE',\n    block: { timestamp: moment(endDate).unix() - 1 },\n  })\n\n  // Order and filter transactions\n  const orderedTxs = orderBy(transactions, 'block.number', 'asc')\n  const txs = [...orderedTxs, currentTransaction].filter((t) =>\n    moment.unix(t.block.timestamp).isBetween(moment(startDate), moment(endDate))\n  )\n\n  // Check first request deposit and first process queue\n  const processDeposit = txs.find((t) => t.type === 'PROCESS_DEPOSIT_QUEUE')\n  const requestDeposits = txs.filter(\n    (t) =>\n      t.type === 'REQUEST_DEPOSIT' &&\n      t.block.timestamp < (processDeposit?.block.timestamp || 0)\n  )\n\n  // Check request deposit\n  if (!requestDeposits.length || !processDeposit) {\n    return CAMPAIGN_METRICS\n  }\n\n  // Check cancel deposit\n  const cancelDeposit = txs.find((t) => t.type === 'DELETE_DEPOSIT_REQUEST')\n\n  if (\n    cancelDeposit &&\n    moment\n      .unix(cancelDeposit.block.timestamp)\n      .isBefore(moment.unix(processDeposit.block.timestamp))\n  ) {\n    const cancelDepositIndex =\n      txs.findIndex((t) => t.type === 'DELETE_DEPOSIT_REQUEST') + 1\n    return getRuleQueuePoints(\n      rule,\n      txs.slice(cancelDepositIndex),\n      token,\n      options\n    )\n  }\n\n  // Calculate age between request and process\n  let totalReward = BNify(0)\n  let perDayReward = BNify(0)\n\n  const distributionDays = moment\n    .duration(frequency.value, frequency.unit)\n    .asDays()\n\n  for (const request of requestDeposits) {\n    const delta = moment\n      .unix(processDeposit.block.timestamp)\n      .diff(moment.unix(request.block.timestamp), frequency.unit)\n\n    const ageMultiplier = BNify(delta).div(frequency.value)\n    const requestAmount = fixTokenAmount(token, request.tokenAmount)\n    const requestReward = BNify(requestAmount).times(ageMultiplier)\n\n    totalReward = totalReward.plus(requestReward)\n\n    // Points per day\n    const pointsPerDay = BNgt(requestAmount, 0)\n      ? BNify(requestAmount)\n          .times(reward.value)\n          .div(distributionDays)\n          .toString()\n      : 0\n\n    perDayReward = perDayReward.plus(pointsPerDay)\n  }\n\n  const rulePoints = BNify(reward.value).times(totalReward)\n\n  // Get next points\n  const nextIndex = txs.findIndex((t) => t.type === 'PROCESS_DEPOSIT_QUEUE')\n\n  if (nextIndex <= 0) {\n    return {\n      points: rulePoints.toString(),\n      perDay: perDayReward.toString(),\n      multiplier: '1',\n    }\n  }\n\n  const { points, perDay } = getRuleQueuePoints(\n    rule,\n    txs.slice(nextIndex + 1),\n    token,\n    options\n  )\n\n  return {\n    points: rulePoints.plus(points).toString(),\n    perDay: perDayReward.plus(perDay).toString(),\n    multiplier: '1',\n  }\n}\n\n/**\n * Apply boosts to rules\n * @param rules rules\n * @param boosts boosts\n * @returns boosted rules\n */\nfunction applyBoostsToRules(\n  rules: CampaignMetrics[],\n  boosts: CampaignMetrics[] = []\n): CampaignMetrics[] {\n  // Aggregate rules metrics to extract the maximum multiplier to apply\n  const { multiplier: ruleMultiplier } = rules.reduce(\n    (acc, v) => makeMetrics(acc, v),\n    CAMPAIGN_METRICS\n  )\n\n  return rules.map((rule) => {\n    const basePoints = BNify(rule.points)\n    const basePerDay = BNify(rule.perDay)\n\n    // Get boosts to be applied to this rule\n    const relevantBoosts = boosts.filter(\n      (b) => !b.rules?.length || (rule.code && b.rules.includes(rule.code))\n    )\n\n    const maxBoostMultiplier = relevantBoosts.reduce(\n      (acc, b) => BigNumber.max(acc, b.multiplier || '1'),\n      BNify('1')\n    )\n\n    const totalMultiplierScaled = relevantBoosts.reduce(\n      (acc, b) => acc.times(b.multiplierScaled || '1'),\n      BNify('1')\n    )\n\n    const effectivePoints = basePoints.times(ruleMultiplier)\n    const effectivePerDay = basePerDay.times(ruleMultiplier)\n\n    const boostedPoints = effectivePoints.times(totalMultiplierScaled)\n    const boostedPerDay = effectivePerDay.times(maxBoostMultiplier)\n\n    return {\n      code: rule.code,\n      rewards: rule.rewards || [],\n      points: boostedPoints.toString(),\n      perDay: boostedPerDay.toString(),\n      multiplier: BigNumber.max(maxBoostMultiplier, ruleMultiplier).toString(),\n      multiplierScaled: totalMultiplierScaled.toString(),\n    }\n  })\n}\n\n/**\n * Generic function to calculate or aggregate metrics\n * @param rules - the base metrics (rules or vaults)\n * @param boosts - the boost metrics\n * @param applyMultiplier - whether to apply the rules multiplier\n * @returns the computed CampaignMetrics\n */\nfunction computeMetrics<T extends CampaignMetrics>(\n  rules: T[],\n  boosts: T[] = [],\n  applyMultiplier?: boolean\n): CampaignMetrics {\n  const {\n    points: rulesPoints,\n    perDay: rulesPerDay,\n    multiplier: rulesMultiplier,\n    rewards: rulesRewards,\n  } = rules.reduce((acc, r) => makeMetrics(acc, r), CAMPAIGN_METRICS)\n\n  const {\n    points: boostsPoints,\n    perDay: boostsPerDay,\n    multiplier: boostsMultiplier,\n    multiplierScaled,\n    rewards: boostsRewards,\n  } = boosts.reduce((acc, b) => makeMetrics(acc, b), CAMPAIGN_METRICS)\n\n  const multiplier = BigNumber.max(rulesMultiplier, boostsMultiplier).toString()\n\n  const boostsPointsScaled = BNify(boostsPoints).times(multiplierScaled || '1')\n\n  const points = applyMultiplier\n    ? BNify(rulesPoints).times(rulesMultiplier).plus(boostsPointsScaled)\n    : BNify(rulesPoints).plus(boostsPointsScaled)\n\n  const perDay = applyMultiplier\n    ? BNify(rulesPerDay).times(rulesMultiplier).plus(boostsPerDay)\n    : BNify(rulesPerDay).plus(boostsPerDay)\n\n  const finalPerDay = perDay.times(boostsMultiplier).toString()\n\n  const rewards = mergeRewards(\n    [],\n    [...(rulesRewards || []), ...(boostsRewards || [])]\n  )\n\n  return {\n    rewards,\n    points: points.toString(),\n    perDay: finalPerDay,\n    multiplier,\n    multiplierScaled,\n  }\n}\n\n/**\n * Campaign metrics accumulator\n * @param acc accumulator\n * @param item campaign metric\n * @returns campaign metrics\n */\nexport function makeMetrics<T extends CampaignMetrics>(\n  acc: CampaignMetrics,\n  item: T\n) {\n  const points = BNify(item.points).plus(acc.points)\n  const perDay = BNify(item.perDay).plus(acc.perDay)\n  const multiplierScaled = BNify(acc.multiplierScaled).times(\n    item.multiplierScaled || '1'\n  )\n  const multiplier = BigNumber.maximum(item.multiplier, acc.multiplier)\n\n  const rewards = mergeRewards(acc.rewards || [], item.rewards || [])\n\n  return {\n    rewards,\n    points: points.toString(),\n    perDay: perDay.toString(),\n    multiplier: multiplier.toString(),\n    multiplierScaled: multiplierScaled.toString(),\n  }\n}\n\n/**\n * Aggregate rewards by tokenId or USD\n * @param source source rewards\n * @param target target rewards\n * @returns aggregated rewards amounts\n */\nexport function mergeRewards(\n  source: CampaignMetricsReward[],\n  target: CampaignMetricsReward[]\n): CampaignMetricsReward[] {\n  return [...source, ...target].reduce<CampaignMetricsReward[]>((acc, r) => {\n    const existing = acc.find((r) => r.tokenId === r.tokenId)\n\n    const amount = BNify(r.amount ?? '0')\n    const USD = BNify(r.USD ?? '0')\n\n    // Update reward amounts\n    if (existing) {\n      existing.amount = BNFixed(BNify(existing.amount ?? '0').plus(amount))\n      existing.USD = BNFixed(BNify(existing.USD ?? '0').plus(USD))\n    } else {\n      // Add reward\n      const reward: CampaignMetricsReward = {\n        USD: BNFixed(USD),\n        ...(r.tokenId && { tokenId: r.tokenId, amount: BNFixed(amount) }),\n      }\n      acc.push(reward)\n    }\n\n    return acc\n  }, [])\n}\n\n/**\n * Get campaign deposit point\n * @param campaign - the campaign\n * @param trigger - the rule trigger\n * @param token - the deposit token\n * @param depositAmount - the deposit amount\n * @returns the campaign point\n */\nexport function getCampaignPointsPerDay(\n  campaign: Campaign,\n  trigger: CampaignRuleTrigger,\n  depositType: CampaignRuleDepositType,\n  token: Token,\n  vaultId: string,\n  depositAmount = '1000000' // $1\n): string {\n  const rules = campaign.rules?.filter(\n    (r) =>\n      r.trigger === trigger &&\n      r.deposit.type === depositType &&\n      (!r.vaultIds || r.vaultIds.includes(vaultId))\n  )\n  const deposit = fixTokenAmount(token, depositAmount)\n\n  if (!rules?.length || BNlte(deposit, 0)) {\n    return '0'\n  }\n\n  return rules.reduce((acc, { frequency, reward }) => {\n    // const points = BNify(deposit).times(r.reward.value)\n    const distributionDays = moment\n      .duration(frequency.value, frequency.unit)\n      .asDays()\n    const pointsPerDay = BNify(deposit)\n      .times(reward.value)\n      .div(distributionDays)\n      .toString()\n\n    return BNify(acc).plus(pointsPerDay).toString()\n  }, '0')\n}\n"],"names":["orderBy","moment","BigNumber","BlockMock","BNFixed","BNgt","BNgte","BNify","BNlte","TransactionMock","getWalletBlockBalance","getWalletBlockTokenBalance","WalletBlockMock","fixTokenAmount","CAMPAIGN_METRICS","points","perDay","multiplier","multiplierScaled","getCampaignPoints","campaign","campaignVaults","transactions","walletBlocks","tokens","campaignTokens","affiliatedPoints","affiliatedPerformances","referred","vaults","map","v","getCampaignVaultPoints","filter","t","vaultId","_id","b","find","tokenId","referredIds","r","referredBlocks","includes","walletId","rulePoints","computeMetrics","boosts","vaultIds","length","boostToken","undefined","getCampaignBoostPoints","rewards","vault","token","vaultCampaign","campaigns","c","campaignRules","rules","vaultRules","ruleToken","deposit","ruleMetrics","getCampaignRuleVaultPoints","code","boostMetrics","getCampaignBoostVaultPoints","boostedRules","applyBoostsToRules","reduce","acc","makeMetrics","rule","options","startDate","createdAt","endDate","trigger","type","getRuleDepositBalancePoints","balanceField","getRuleDepositAgePoints","depositRequestPoints","getRuleQueuePoints","boost","getBoostStakeRewards","protocols","totalPoints","getBoostReferralReward","getBoostReferralFeeReward","getBoostReferredReward","frequency","reward","blocks","lastBlock","currentBlock","block","timestamp","unix","tokenBalance","i","isBefore","isAfter","prevBlock","prevTimestamp","prevBalance","date","delta","diff","unit","ageMultiplier","div","value","toString","balance","times","distributionDays","duration","asDays","pointsPerDay","plus","age","isBetween","ruleMultiplier","maximum","boostRewards","getBoostRewards","totalAge","lastMultiplier","totalFeesUSD","p","fees","USD","wB","rewardPoints","calculateBoostBlockRewards","walletBlock","stakedAmount","blockBalance","stakedPercentage","startTimestamp","endTimestamp","orderedBlocks","firstWalletBlock","wb","filteredWalletBlocks","number","nextWalletBlock","nextTimestamp","Math","min","blockTimestamp","max","blocksRewards","blockScaledMultiplier","totalStakedAmount","currentTransaction","orderedTxs","txs","processDeposit","requestDeposits","cancelDeposit","cancelDepositIndex","findIndex","slice","totalReward","perDayReward","request","requestAmount","tokenAmount","requestReward","nextIndex","basePoints","basePerDay","relevantBoosts","maxBoostMultiplier","totalMultiplierScaled","effectivePoints","effectivePerDay","boostedPoints","boostedPerDay","applyMultiplier","rulesPoints","rulesPerDay","rulesMultiplier","rulesRewards","boostsPoints","boostsPerDay","boostsMultiplier","boostsRewards","boostsPointsScaled","finalPerDay","mergeRewards","item","source","target","existing","amount","push","getCampaignPointsPerDay","depositType","depositAmount"],"mappings":"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"}