{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/campaigns/libs/campaign-points.lib.ts"],"sourcesContent":["import { orderBy } from 'lodash'\nimport moment from 'moment'\nimport BigNumber from 'bignumber.js'\n\nimport { BNgt, BNify, BNlte } from '../../core'\nimport { Transaction, TransactionMock } from '../../transactions'\nimport { Vault } from '../../vaults'\nimport { WalletBlock, WalletBlockMock } from '../../wallet-blocks'\nimport {\n  Campaign,\n  CampaignMetrics,\n  CampaignPoints,\n  CampaignPointsVault,\n  CampaignRule,\n  CampaignRuleTrigger,\n} from '../campaign.model'\nimport { fixTokenAmount, Token } from '../../tokens'\n\nconst CAMPAIGN_METRICS: CampaignMetrics = {\n  points: '0',\n  perDay: '0',\n  multiplier: '1',\n}\n\n/**\n * Get campaign points\n * @param campaign - the campaign\n * @param vaults - the vault campaign\n * @param transactions - the vault transactions\n */\nexport function getCampaignPoints(\n  campaign: Campaign,\n  campaignVaults: Vault[],\n  transactions: Transaction[],\n  walletBlocks: WalletBlock[],\n  tokens: Token[]\n): CampaignPoints {\n  // Calculate vaults points\n  const vaults = campaignVaults.map((v) =>\n    getCampaignVaultPoints(\n      campaign,\n      v,\n      transactions.filter((t) => t.vaultId === v._id),\n      walletBlocks.filter((b) => b.vaultId === v._id),\n      tokens.find((t) => t._id === v.tokenId)\n    )\n  )\n\n  // Calculate aggregation\n  const { points, perDay, multiplier } = calculateMetrics(vaults)\n\n  return {\n    points,\n    perDay,\n    multiplier,\n    vaults,\n  }\n}\n\n/**\n * Get campaign vault points\n * @param campaign - the campaign\n * @param vault - the vault\n * @param transactions - the wallet transactions\n * @param walletBlock -  the wallet block\n * @returns the vault points\n */\nexport function getCampaignVaultPoints(\n  campaign: Campaign,\n  vault: Vault,\n  transactions: Transaction[],\n  walletBlocks: WalletBlock[],\n  token?: Token\n): CampaignPointsVault {\n  // Check rules\n  const vaultCampaign = vault.campaigns?.find((c) => c._id === campaign._id)\n  const vaultRules = campaign.rules || vaultCampaign?.rules\n\n  if (!vaultRules?.length || !token) {\n    return { _id: vault._id, ...CAMPAIGN_METRICS }\n  }\n\n  // Calculate vaults points\n  const rules = vaultRules.map((r) =>\n    getCampaignRuleVaultPoints(campaign, r, transactions, walletBlocks, token)\n  )\n\n  // Calculate aggregation\n  const {\n    points: vaultPoints,\n    perDay: vaultPerDay,\n    multiplier,\n  } = calculateMetrics(rules)\n  const points = BNify(vaultPoints).times(multiplier).toString()\n  const perDay = BNify(vaultPerDay).times(multiplier).toString()\n\n  return {\n    _id: vault._id,\n    points,\n    perDay,\n    multiplier,\n  }\n}\n\n/**\n * Get campaign rule vault points\n * @param rule - the campaign rule\n * @param vault - the vault\n * @param transactions - the wallet transactions\n * @param walletBlock -  the wallet block\n * @returns the rule vault points\n */\nexport function getCampaignRuleVaultPoints(\n  campaign: Campaign,\n  rule: CampaignRule,\n  transactions: Transaction[],\n  walletBlocks: WalletBlock[],\n  token: Token\n): CampaignMetrics {\n  const options = {\n    startDate: campaign.startDate || campaign.createdAt,\n    endDate: campaign.endDate,\n  }\n\n  switch (rule.trigger) {\n    case 'DEPOSIT': {\n      const depositPoints =\n        rule.deposit.type === 'BALANCE'\n          ? getRuleDepositBalancePoints(rule, walletBlocks, token, options)\n          : getRuleDepositAgePoints(rule, walletBlocks, options)\n      return depositPoints\n    }\n    case 'DEPOSIT_REQUEST': {\n      const depositRequestPoints = getRuleQueuePoints(\n        rule,\n        transactions,\n        token,\n        options\n      )\n      return depositRequestPoints\n    }\n    case 'MINT':\n      // TODO: the new rule points calculation\n      return {\n        points: '0',\n        perDay: '0',\n        multiplier: '0',\n      }\n  }\n}\n\n/**\n * Get rule deposit balance points\n * @param rule - the rule campaign\n * @param walletBlocks - the wallet blocks\n * @param token - the vault token\n * @param options - the calculation options\n * @returns the campaign points\n */\nexport function getRuleDepositBalancePoints(\n  { frequency, reward }: CampaignRule,\n  walletBlocks: WalletBlock[],\n  token: Token,\n  options: {\n    startDate: string\n    endDate?: string\n  }\n): CampaignMetrics {\n  const { startDate, endDate } = options\n\n  // Order and filter wallet blocks\n  const blocks = orderBy(walletBlocks, 'block.number', 'asc')\n\n  // Fake current block\n  const lastBlock = blocks.length ? blocks[blocks.length - 1] : undefined\n  const currentBlock = WalletBlockMock({\n    block: { timestamp: moment(endDate).unix() },\n    tokenBalance: lastBlock?.tokenBalance || '0',\n  })\n\n  return [...blocks, currentBlock].reduce<CampaignMetrics>((acc, b, i) => {\n    // Check the block timestamp\n    if (\n      moment.unix(b.block.timestamp).isBefore(moment(startDate)) ||\n      moment.unix(b.block.timestamp).isAfter(moment(endDate))\n    ) {\n      return acc\n    }\n\n    // Age calculation\n    const prevBlock = blocks[i - 1]\n    const prevTimestamp = prevBlock?.block.timestamp || 0\n    const prevBalance = prevBlock?.tokenBalance || 0\n\n    const date = moment.unix(prevTimestamp).isAfter(startDate)\n      ? moment.unix(prevTimestamp)\n      : moment(startDate)\n    const delta = moment\n      .unix(b.block.timestamp)\n      .diff(date, frequency.unit, true)\n    const ageMultiplier = BNify(delta).div(frequency.value).toString()\n    const balance = fixTokenAmount(token, prevBalance)\n    const rulePoints = BNify(balance).times(reward.value).times(ageMultiplier)\n\n    // Points per day\n    const distributionDays = moment\n      .duration(frequency.value, frequency.unit)\n      .asDays()\n    const pointsPerDay =\n      i === blocks.length && BNgt(balance, 0)\n        ? BNify(balance).times(reward.value).div(distributionDays).toString()\n        : 0\n\n    return {\n      points: BNify(acc.points).plus(rulePoints).toString(),\n      perDay: BNify(acc.perDay).plus(pointsPerDay).toString(),\n      multiplier: acc.multiplier,\n    }\n  }, CAMPAIGN_METRICS)\n}\n\n/**\n * Get rule deposit age points\n * @param rule - the rule campaign\n * @param walletBlocks - the wallet blocks\n * @param options - the calculation options\n * @returns the campaign points\n */\nexport function getRuleDepositAgePoints(\n  { frequency, reward }: CampaignRule,\n  walletBlocks: WalletBlock[],\n  options: {\n    startDate: string\n    endDate?: string\n  }\n): CampaignMetrics {\n  const { startDate, endDate } = options\n\n  // Order and filter wallet blocks\n  let age = 0\n  const blocks = orderBy(walletBlocks, 'block.number', 'asc')\n\n  // Fake current block\n  const currentBlock = WalletBlockMock({\n    block: { timestamp: moment(endDate).unix() - 1 },\n  })\n\n  return [...blocks, currentBlock].reduce<CampaignMetrics>((acc, b, i) => {\n    // Check the block timestamp\n    if (\n      !moment\n        .unix(b.block.timestamp)\n        .isBetween(moment(startDate), moment(endDate))\n    ) {\n      return acc\n    }\n\n    const prevBlock = blocks[i - 1]\n    if (BNgt(prevBlock?.tokenBalance)) {\n      const date = moment.unix(prevBlock?.block.timestamp).isAfter(startDate)\n        ? moment.unix(prevBlock?.block.timestamp)\n        : moment(startDate)\n      const delta = moment\n        .unix(b.block.timestamp)\n        .diff(date, frequency.unit, true)\n      age += delta\n    }\n\n    const ruleMultiplier = age >= frequency.value ? reward.value : 1\n    const multiplier = BigNumber.maximum(acc.multiplier, ruleMultiplier)\n\n    return {\n      points: acc.points,\n      perDay: acc.perDay,\n      multiplier: multiplier.toString(),\n    }\n  }, CAMPAIGN_METRICS)\n}\n\n/**\n * Get rule queue balance points\n * @param rule - the rule campaign\n * @param transactions - the vault transactions\n * @param options - the calculation options\n * @returns the campaign points\n */\nexport function getRuleQueuePoints(\n  rule: CampaignRule,\n  transactions: Transaction[],\n  token: Token,\n  options: {\n    startDate: string\n    endDate?: string\n  }\n): CampaignMetrics {\n  const { frequency, reward } = rule\n  const { startDate, endDate } = options\n\n  // Fake current transaction\n  const currentTransaction = TransactionMock({\n    type: 'PROCESS_DEPOSIT_QUEUE',\n    block: { timestamp: moment(endDate).unix() - 1 },\n  })\n\n  // Order and filter transactions\n  const orderedTxs = orderBy(transactions, 'block.number', 'asc')\n  const txs = [...orderedTxs, currentTransaction].filter((t) =>\n    moment.unix(t.block.timestamp).isBetween(moment(startDate), moment(endDate))\n  )\n\n  // Check first request deposit and first process queue\n  const processDeposit = txs.find((t) => t.type === 'PROCESS_DEPOSIT_QUEUE')\n  const requestDeposits = txs.filter(\n    (t) =>\n      t.type === 'REQUEST_DEPOSIT' &&\n      t.block.timestamp < (processDeposit?.block.timestamp || 0)\n  )\n\n  // Check request deposit\n  if (!requestDeposits.length || !processDeposit) {\n    return CAMPAIGN_METRICS\n  }\n\n  // Check cancel deposit\n  const cancelDeposit = txs.find((t) => t.type === 'DELETE_DEPOSIT_REQUEST')\n\n  if (\n    cancelDeposit &&\n    moment\n      .unix(cancelDeposit.block.timestamp)\n      .isBefore(moment.unix(processDeposit.block.timestamp))\n  ) {\n    const cancelDepositIndex =\n      txs.findIndex((t) => t.type === 'DELETE_DEPOSIT_REQUEST') + 1\n    return getRuleQueuePoints(\n      rule,\n      txs.slice(cancelDepositIndex),\n      token,\n      options\n    )\n  }\n\n  // Calculate age between request and process\n  let totalReward = BNify(0)\n  let perDayReward = BNify(0)\n\n  const distributionDays = moment\n    .duration(frequency.value, frequency.unit)\n    .asDays()\n\n  for (const request of requestDeposits) {\n    const delta = moment\n      .unix(processDeposit.block.timestamp)\n      .diff(moment.unix(request.block.timestamp), frequency.unit)\n\n    const ageMultiplier = BNify(delta).div(frequency.value)\n    const requestAmount = fixTokenAmount(token, request.tokenAmount)\n    const requestReward = BNify(requestAmount).times(ageMultiplier)\n\n    totalReward = totalReward.plus(requestReward)\n\n    // Points per day\n    const pointsPerDay = BNgt(requestAmount, 0)\n      ? BNify(requestAmount)\n          .times(reward.value)\n          .div(distributionDays)\n          .toString()\n      : 0\n\n    perDayReward = perDayReward.plus(pointsPerDay)\n  }\n\n  const rulePoints = BNify(reward.value).times(totalReward)\n\n  // Get next points\n  const nextIndex = txs.findIndex((t) => t.type === 'PROCESS_DEPOSIT_QUEUE')\n\n  if (nextIndex <= 0) {\n    return {\n      points: rulePoints.toString(),\n      perDay: perDayReward.toString(),\n      multiplier: '1',\n    }\n  }\n\n  const { points, perDay } = getRuleQueuePoints(\n    rule,\n    txs.slice(nextIndex + 1),\n    token,\n    options\n  )\n\n  return {\n    points: rulePoints.plus(points).toString(),\n    perDay: perDayReward.plus(perDay).toString(),\n    multiplier: '1',\n  }\n}\n\n/**\n * Calculate metrics by items\n * @param items - the metrics\n * @returns the new metrics\n */\nexport function calculateMetrics<T extends CampaignMetrics>(\n  items: T[]\n): CampaignMetrics {\n  const { points, perDay, multiplier } = items.reduce((acc, v) => {\n    const points = BNify(v.points).plus(acc.points)\n    const perDay = BNify(v.perDay).plus(acc.perDay)\n    const multiplier = BigNumber.maximum(v.multiplier, acc.multiplier)\n\n    return {\n      points: points.toString(),\n      perDay: perDay.toString(),\n      multiplier: multiplier.toString(),\n    }\n  }, CAMPAIGN_METRICS)\n\n  return {\n    points,\n    perDay,\n    multiplier,\n  }\n}\n\n/**\n * Get campaign deposit point\n * @param campaign - the campaign\n * @param trigger - the rule trigger\n * @param token - the deposit token\n * @param depositAmount - the deposit amount\n * @returns the campaign point\n */\nexport function getCampaignPointsPerDay(\n  campaign: Campaign,\n  trigger: CampaignRuleTrigger,\n  token: Token,\n  depositAmount = '1000000' // $1\n): string {\n  const rules = campaign.rules?.filter(\n    (r) => r.trigger === trigger && r.deposit.type === 'BALANCE'\n  )\n  const deposit = fixTokenAmount(token, depositAmount)\n\n  if (!rules?.length || BNlte(deposit, 0)) {\n    return '0'\n  }\n\n  return rules.reduce((acc, { frequency, reward }) => {\n    // const points = BNify(deposit).times(r.reward.value)\n    const distributionDays = moment\n      .duration(frequency.value, frequency.unit)\n      .asDays()\n    const pointsPerDay = BNify(deposit)\n      .times(reward.value)\n      .div(distributionDays)\n      .toString()\n\n    return BNify(acc).plus(pointsPerDay).toString()\n  }, '0')\n}\n"],"names":["orderBy","moment","BigNumber","BNgt","BNify","BNlte","TransactionMock","WalletBlockMock","fixTokenAmount","CAMPAIGN_METRICS","points","perDay","multiplier","getCampaignPoints","campaign","campaignVaults","transactions","walletBlocks","tokens","vaults","map","v","getCampaignVaultPoints","filter","t","vaultId","_id","b","find","tokenId","calculateMetrics","vault","token","vaultCampaign","campaigns","c","vaultRules","rules","length","r","getCampaignRuleVaultPoints","vaultPoints","vaultPerDay","times","toString","rule","options","startDate","createdAt","endDate","trigger","depositPoints","deposit","type","getRuleDepositBalancePoints","getRuleDepositAgePoints","depositRequestPoints","getRuleQueuePoints","frequency","reward","blocks","lastBlock","undefined","currentBlock","block","timestamp","unix","tokenBalance","reduce","acc","i","isBefore","isAfter","prevBlock","prevTimestamp","prevBalance","date","delta","diff","unit","ageMultiplier","div","value","balance","rulePoints","distributionDays","duration","asDays","pointsPerDay","plus","age","isBetween","ruleMultiplier","maximum","currentTransaction","orderedTxs","txs","processDeposit","requestDeposits","cancelDeposit","cancelDepositIndex","findIndex","slice","totalReward","perDayReward","request","requestAmount","tokenAmount","requestReward","nextIndex","items","getCampaignPointsPerDay","depositAmount"],"mappings":"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"}