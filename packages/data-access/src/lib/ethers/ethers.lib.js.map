{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/ethers/ethers.lib.ts"],"sourcesContent":["import { Transaction, utils, Event, BigNumberish, BigNumber } from 'ethers'\nimport { EthersEvent } from './ethers.model'\n\n/**\n * Get Ethers topic\n * @returns the event topic\n */\nexport function getEthersTopicTransfer() {\n  return utils.id('Transfer(address,address,uint256)')\n}\n\n/**\n * Parse ethers event\n * @param event - the contract event\n * @returns the ethers event object\n */\nexport function parseEthersEvent(event: Event): EthersEvent {\n  return {\n    address: event['address'],\n    topics: event['topics'],\n    data: event['data'],\n    blockHash: event['blockHash'],\n    blockNumber: event['blockNumber'],\n    transactionHash: event['transactionHash'],\n    transactionIndex: event['transactionIndex'],\n    event: event['event'],\n    eventSignature: event['eventSignature'],\n    values: normalizeEthersArgs(event['args']),\n  }\n}\n\n/**\n * Get transaction method signature\n * @param transaction - the ethers transaction\n * @returns the method signature of a\n */\nexport function getEthersTransactionSignature(\n  transaction: Transaction\n): string {\n  return transaction.data.slice(0, 10)\n}\n\n/**\n * Normalize args in record values\n * @param args - the event args\n * @returns the event values object\n */\nexport function normalizeEthersArgs(\n  args: Event['args'] = []\n): Record<string, any> {\n  const result: Record<string, any> = {}\n\n  for (const key in args) {\n    result[key] = parseEthersArg(args[key])\n  }\n\n  return result\n}\n\nfunction parseEthersArg(arg: BigNumberish) {\n  if (BigNumber.isBigNumber(arg)) {\n    return arg.toString()\n  }\n\n  return arg\n}\n"],"names":["utils","BigNumber","getEthersTopicTransfer","id","parseEthersEvent","event","address","topics","data","blockHash","blockNumber","transactionHash","transactionIndex","eventSignature","values","normalizeEthersArgs","getEthersTransactionSignature","transaction","slice","args","result","key","parseEthersArg","arg","isBigNumber","toString"],"mappings":"AAAA,SAAsBA,KAAK,EAAuBC,SAAS,QAAQ,SAAQ;AAG3E;;;CAGC,GACD,OAAO,SAASC;IACd,OAAOF,MAAMG,EAAE,CAAC;AAClB;AAEA;;;;CAIC,GACD,OAAO,SAASC,iBAAiBC,KAAY;IAC3C,OAAO;QACLC,SAASD,KAAK,CAAC,UAAU;QACzBE,QAAQF,KAAK,CAAC,SAAS;QACvBG,MAAMH,KAAK,CAAC,OAAO;QACnBI,WAAWJ,KAAK,CAAC,YAAY;QAC7BK,aAAaL,KAAK,CAAC,cAAc;QACjCM,iBAAiBN,KAAK,CAAC,kBAAkB;QACzCO,kBAAkBP,KAAK,CAAC,mBAAmB;QAC3CA,OAAOA,KAAK,CAAC,QAAQ;QACrBQ,gBAAgBR,KAAK,CAAC,iBAAiB;QACvCS,QAAQC,oBAAoBV,KAAK,CAAC,OAAO;IAC3C;AACF;AAEA;;;;CAIC,GACD,OAAO,SAASW,8BACdC,WAAwB;IAExB,OAAOA,YAAYT,IAAI,CAACU,KAAK,CAAC,GAAG;AACnC;AAEA;;;;CAIC,GACD,OAAO,SAASH,oBACdI,OAAsB,EAAE;IAExB,MAAMC,SAA8B,CAAC;IAErC,IAAK,MAAMC,OAAOF,KAAM;QACtBC,MAAM,CAACC,IAAI,GAAGC,eAAeH,IAAI,CAACE,IAAI;IACxC;IAEA,OAAOD;AACT;AAEA,SAASE,eAAeC,GAAiB;IACvC,IAAItB,UAAUuB,WAAW,CAACD,MAAM;QAC9B,OAAOA,IAAIE,QAAQ;IACrB;IAEA,OAAOF;AACT"}