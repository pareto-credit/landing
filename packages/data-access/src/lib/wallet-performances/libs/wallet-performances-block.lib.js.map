{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/wallet-performances/libs/wallet-performances-block.lib.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport { fixAmount, getTokenAmount, Token, TokenPriceData } from '../../tokens'\nimport {\n  Block,\n  BNFixed,\n  BNgt,\n  BNify,\n  BNlte,\n  compLower,\n  iBigInt,\n  Reward,\n} from '../../core'\nimport {\n  WalletBlockAmounts,\n  WalletBlockEarnings,\n  WalletBlockPerformance,\n  WalletDistributedRewards,\n  WalletPerformance,\n  WalletPortfolio,\n  WalletPosition,\n  WalletPositionToken,\n} from '../wallet-performance.model'\nimport { cloneDeep, defaultsDeep } from 'lodash'\nimport {\n  WALLET_PERFORMANCE,\n  WALLET_PORTFOLIO,\n  WALLET_POSITION,\n} from '../wallet-performance.const'\nimport {\n  getWalletBalanceWithRequests,\n  getWalletBlockPoolTokenBalance,\n  getWalletBlockPoolTokenBalanceUSD,\n  WalletBlock,\n  WalletBlockData,\n} from '../../wallet-blocks'\nimport { VaultBlock, VaultBlocks } from '../../vault-blocks'\nimport { VaultBlockPerformance } from '../../vault-performances'\nimport { Vault, VaultWalletPoolData } from '../../vaults'\n\n/**\n * Init wallet performance object\n * @param options partial vault performance\n * @returns wallet performance object\n */\nexport function initWalletPerformance(\n  performance: Partial<WalletBlockPerformance> = {}\n): WalletBlockPerformance {\n  return defaultsDeep(cloneDeep(performance), WALLET_PERFORMANCE)\n}\n\n/**\n * Init wallet performance object\n * @param options partial vault performance\n * @returns wallet performance object\n */\nexport function initWalletPortfolio(\n  position: Partial<WalletPortfolio> = {}\n): WalletPortfolio {\n  return defaultsDeep(cloneDeep(position), WALLET_PORTFOLIO)\n}\n\n/**\n * Init wallet position object\n * @param options partial vault position\n * @returns wallet position object\n */\nexport function initWalletPosition(\n  position: Partial<WalletPosition> = {}\n): WalletPosition {\n  return defaultsDeep(cloneDeep(position), WALLET_POSITION)\n}\n\n/**\n * Init wallet earnings object\n * @param earnings partial earnings\n * @returns wallet earnings object\n */\nexport function initWalletEarnings(\n  earnings: Partial<WalletBlockEarnings> = {}\n): WalletBlockEarnings {\n  return defaultsDeep(cloneDeep(earnings), WALLET_PERFORMANCE.earnings)\n}\n\nconst WALLET_BLOCK_AMOUNTS: WalletBlockAmounts = {\n  USD: '0',\n}\n\n/**\n * Init wallet block amounts object\n * @param options partial wallet block amounts\n * @returns wallet block amounts object\n */\nexport function initWalletBlockAmounts(\n  amounts: Partial<WalletBlockAmounts> = {}\n): WalletBlockAmounts {\n  return defaultsDeep(cloneDeep(amounts), WALLET_BLOCK_AMOUNTS)\n}\n\n/**\n * Calculate wallet earnings\n * @param token vault token entity\n * @param tokenBalance wallet balance in underlying tokens\n * @param earningsPercentage earnings percentage\n * @param tokenPriceData token USD conversion data\n * @returns the wallet earnings\n */\nexport function getWalletEarnings(\n  token: Token,\n  tokenBalance: iBigInt,\n  earningsPercentage: number,\n  { price }: TokenPriceData\n): WalletBlockEarnings {\n  // Calculate earnings\n  const earningsToken = BNify(tokenBalance).times(earningsPercentage).div(100)\n  const earningsUSD = earningsToken.times(price).div(getTokenAmount(token))\n\n  return initWalletEarnings({\n    percentage: earningsPercentage,\n    token: BNFixed(earningsToken),\n    USD: BNFixed(earningsUSD),\n  })\n}\n\n/**\n * Calculate wallet rewards eranings\n * @param distributedRewards distributed rewards\n * @returns wallet rewards earnings\n */\nexport function getWalletRewardsEarnings(\n  distributedRewards: WalletDistributedRewards[]\n): WalletBlockEarnings {\n  return distributedRewards.reduce((acc: WalletBlockEarnings, r) => {\n    const USD = BNFixed(BNify(acc.USD).plus(r.amountUSD))\n    const percentage = BNify(acc.percentage).plus(r.percentage).toNumber()\n    return {\n      USD,\n      percentage,\n    }\n  }, initWalletEarnings())\n}\n\n/**\n * Calculate age between current block and last wallet performance block\n * @param block current block\n * @param lastWalletBlock last wallet block\n * @param lastWalletPerformance last wallet performance block\n * @returns age in seconds\n */\nexport function calculateWalletPerformanceAge(\n  block: Block,\n  lastWalletBlock: WalletBlockData,\n  lastWalletPerformance: WalletPerformance | undefined\n): number {\n  // First wallet performance block\n  if (!lastWalletPerformance) {\n    return block.timestamp - lastWalletBlock.block.timestamp\n  }\n\n  // Get max timestamp between walletBlock and walletPerformance\n  const latestTimestamp = BNgt(lastWalletPerformance.age)\n    ? BigNumber.maximum(\n        BNify(lastWalletPerformance?.block.timestamp),\n        lastWalletBlock.block.timestamp\n      ).toNumber()\n    : lastWalletBlock.block.timestamp\n\n  // Calculate age from last wallet performance or from wallet block\n  return block.timestamp - latestTimestamp\n}\n\n/**\n * Calculate wallet last performance\n * @param lastWalletBlock - the last wallet block\n * @param lastWalletPerformance - the last performance of the wallet\n * @param vaultBlocks - the current and last vault blocks\n * @param currentVaultPerformance - the current vault performance\n * @param tokenPriceData - the token price data\n * @returns the current wallet performance\n */\nexport function getWalletPerformance(\n  feePercentage: number,\n  token: Token,\n  lastWalletBlock: WalletBlockData,\n  lastWalletPerformance: WalletPerformance | undefined,\n  { current: currentVault, last: lastVault }: VaultBlocks,\n  currentVaultPerformance: VaultBlockPerformance,\n  tokenPrice: TokenPriceData,\n  distributedRewards?: WalletDistributedRewards[]\n): WalletBlockPerformance {\n  // Exit if last wallet tokenBalance <= 0\n  if (BNlte(lastWalletBlock.tokenBalance)) {\n    return initWalletPerformance()\n  }\n\n  // Get performance age\n  const age = calculateWalletPerformanceAge(\n    currentVault.block,\n    lastWalletBlock,\n    lastWalletPerformance\n  )\n\n  // If age <= 0 return empty performance\n  if (BNlte(age)) {\n    return initWalletPerformance()\n  }\n\n  // Calculate earnings\n  const earnings = getWalletEarnings(\n    token,\n    lastWalletBlock.tokenBalance,\n    currentVaultPerformance.earnings.percentage,\n    tokenPrice\n  )\n\n  // Fees\n  const fees = {\n    USD: BNFixed(BNify(earnings.USD).times(fixAmount(feePercentage, 5))),\n    token: BNFixed(BNify(earnings.token).times(fixAmount(feePercentage, 5))),\n  }\n\n  const rewards = distributedRewards?.length\n    ? getWalletRewardsEarnings(distributedRewards)\n    : initWalletEarnings()\n\n  // Realized APY and share percentage\n  const realizedAPY = BNify(currentVaultPerformance.realizedAPY)\n\n  // Calculate pool share using latest vault block totalSupply\n  const poolSharePercentage = BNgt(lastVault?.totalSupply)\n    ? BNify(lastWalletBlock.balance).div(BNify(lastVault?.totalSupply))\n    : BNify()\n\n  return initWalletPerformance({\n    age,\n    fees,\n    earnings: {\n      ...earnings,\n      rewards,\n    },\n    realizedAPY: realizedAPY.toNumber(),\n    poolSharePercentage: poolSharePercentage.times(100).toNumber(),\n  })\n}\n\n/**\n * Aggregate rewards earnings by tokenId\n * @param rewards distributed rewards\n * @returns aggregated earnings\n */\nexport function getWalletAccruedRewards(\n  rewards: WalletDistributedRewards[]\n): Reward[] {\n  return rewards.reduce((acc: Reward[], reward) => {\n    const foundReward = acc.find((r) => r.tokenId === reward.tokenId)\n    return foundReward\n      ? acc.map((r) =>\n          r.tokenId === reward.tokenId\n            ? {\n                tokenId: reward.tokenId,\n                amount: BNFixed(BNify(r.amount).plus(BNify(reward.amount))),\n                amountUSD: BNFixed(\n                  BNify(r.amountUSD).plus(BNify(reward.amountUSD))\n                ),\n                APR: BNify(r.APR).plus(reward.APR).div(2).toNumber(),\n                percentage: BNify(r.percentage)\n                  .plus(reward.percentage)\n                  .toNumber(),\n              }\n            : r\n        )\n      : [\n          ...acc,\n          {\n            tokenId: reward.tokenId,\n            amount: reward.amount,\n            amountUSD: reward.amountUSD,\n            APR: reward.APR,\n            percentage: reward.percentage,\n          },\n        ]\n  }, [])\n}\n\n/**\n * Calculate performance aggregation\n * @param currentPerformance - the performance of the current block\n * @param lastPerformance - the performance of the latest block\n * @returns the aggregation of the performances\n */\nexport function getWalletAggregatedPerformance(\n  currentPerformance: WalletPerformance,\n  lastPerformance?: WalletBlockPerformance\n): WalletBlockPerformance {\n  if (\n    !lastPerformance ||\n    BNlte(currentPerformance.age) ||\n    BNlte(currentPerformance.poolSharePercentage)\n  ) {\n    return initWalletPerformance(currentPerformance)\n  }\n\n  // Current age of the wallet\n  const age = lastPerformance.age + currentPerformance.age\n\n  // Calculated earnings\n  const earningsToken = BNify(lastPerformance.earnings.token).plus(\n    currentPerformance.earnings.token || 0\n  )\n\n  const earningsUSD = BNify(lastPerformance.earnings.USD).plus(\n    currentPerformance.earnings.USD\n  )\n\n  const earningsPercentage = BNify(lastPerformance.earnings.percentage)\n    .plus(currentPerformance.earnings.percentage)\n    .toNumber()\n\n  const earnings = {\n    token: BNFixed(earningsToken),\n    USD: BNFixed(earningsUSD),\n    percentage: earningsPercentage,\n  }\n\n  const realizedAPY = BNify(lastPerformance.realizedAPY)\n    .times(lastPerformance.age)\n    .plus(BNify(currentPerformance.realizedAPY).times(currentPerformance.age))\n    .div(age)\n    .toNumber()\n\n  const poolSharePercentage = lastPerformance?.poolSharePercentage\n    ? BNify(lastPerformance.poolSharePercentage)\n        .times(lastPerformance.age)\n        .plus(\n          BNify(currentPerformance.poolSharePercentage).times(\n            currentPerformance.age\n          )\n        )\n        .div(age)\n    : BNify(currentPerformance.poolSharePercentage)\n\n  return initWalletPerformance({\n    age,\n    earnings,\n    realizedAPY,\n    poolSharePercentage: poolSharePercentage\n      ? poolSharePercentage.toNumber()\n      : 0,\n  })\n}\n\n/**\n * Get vault tokens staked in pools\n * @param vault vault entity\n * @param walletBlock wallet block entity\n * @param options mongodb options\n * @returns wallet pools tokens balances\n */\nexport function getWalletPoolsTokens(\n  vault: Vault,\n  token: Token,\n  walletBlock: WalletBlock,\n  vaultBlock: VaultBlock\n): WalletPositionToken[] {\n  const positionTokens = (walletBlock.pools || []).reduce(\n    (acc: WalletPositionToken[], pool: VaultWalletPoolData) => {\n      const vaultPool = vault.pools?.find((p) =>\n        compLower(p.address, pool.address)\n      )\n      if (!vaultPool) {\n        return acc\n      }\n      const tokenAddress = pool.tokens?.[0].tokenAddress || token.address\n      const tokenId = pool.tokens?.[0].tokenId || token._id\n      const amount = getWalletBlockPoolTokenBalance(tokenId, pool)\n      if (BNlte(amount)) {\n        return acc\n      }\n      const USD = getWalletBlockPoolTokenBalanceUSD(\n        vault,\n        token,\n        vaultBlock,\n        tokenId,\n        amount\n      )\n      return [\n        ...acc,\n        {\n          pool: vaultPool.ref,\n          walletId: walletBlock.walletId,\n          operatorId: pool.operatorId,\n          tokenId,\n          tokenAddress,\n          amount,\n          USD,\n          percentage: 0,\n        },\n      ]\n    },\n    []\n  )\n\n  if (vault.contractType === 'PARETO_DOLLAR') {\n    const amount = BNFixed(walletBlock.paretoDollar?.uspBalance)\n    const USD = BNFixed(fixAmount(amount, 18).times(1e6))\n    positionTokens.push({\n      walletId: walletBlock.walletId,\n      tokenId: vault.tokenId,\n      tokenAddress: token.address,\n      amount,\n      USD,\n      percentage: 0,\n    })\n  }\n\n  return positionTokens.filter((t) => BNgt(t.amount))\n}\n"],"names":["BigNumber","fixAmount","getTokenAmount","BNFixed","BNgt","BNify","BNlte","compLower","cloneDeep","defaultsDeep","WALLET_PERFORMANCE","WALLET_PORTFOLIO","WALLET_POSITION","getWalletBlockPoolTokenBalance","getWalletBlockPoolTokenBalanceUSD","initWalletPerformance","performance","initWalletPortfolio","position","initWalletPosition","initWalletEarnings","earnings","WALLET_BLOCK_AMOUNTS","USD","initWalletBlockAmounts","amounts","getWalletEarnings","token","tokenBalance","earningsPercentage","price","earningsToken","times","div","earningsUSD","percentage","getWalletRewardsEarnings","distributedRewards","reduce","acc","r","plus","amountUSD","toNumber","calculateWalletPerformanceAge","block","lastWalletBlock","lastWalletPerformance","timestamp","latestTimestamp","age","maximum","getWalletPerformance","feePercentage","current","currentVault","last","lastVault","currentVaultPerformance","tokenPrice","fees","rewards","length","realizedAPY","poolSharePercentage","totalSupply","balance","getWalletAccruedRewards","reward","foundReward","find","tokenId","map","amount","APR","getWalletAggregatedPerformance","currentPerformance","lastPerformance","getWalletPoolsTokens","vault","walletBlock","vaultBlock","positionTokens","pools","pool","vaultPool","p","address","tokenAddress","tokens","_id","ref","walletId","operatorId","contractType","paretoDollar","uspBalance","push","filter","t"],"mappings":"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"}