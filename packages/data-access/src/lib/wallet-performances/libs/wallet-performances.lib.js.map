{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/wallet-performances/libs/wallet-performances.lib.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport {\n  Block,\n  BNeq,\n  BNFixed,\n  BNgt,\n  BNify,\n  BNlt,\n  BNlte,\n  BNSafeDiv,\n  compLower,\n  ServerError,\n} from '../../core'\nimport {\n  WalletBlockAmounts,\n  WalletBlockEarnings,\n  WalletBlockPerformance,\n  WalletDeposits,\n  WalletDistributedRewards,\n  WalletPerformanceErrorCodes,\n  WalletPortfolio,\n  WalletPosition,\n  WalletPositionChain,\n  WalletPositionOperator,\n  WalletPositionToken,\n} from '../wallet-performance.model'\nimport { VaultBlock, VaultBlocks } from '../../vault-blocks'\nimport {\n  getWalletBalanceWithRequests,\n  WalletBlock,\n  WalletBlockDistributedRewards,\n} from '../../wallet-blocks'\nimport { TokenBlock } from '../../token-blocks'\nimport {\n  fixAmount,\n  fixTokenAmount,\n  getTokenAmount,\n  normalizeTokenAmount,\n  Token,\n  TokenPriceData,\n} from '../../tokens'\nimport {\n  getWalletAccruedRewards,\n  getWalletPerformance,\n  initWalletBlockAmounts,\n  initWalletPerformance,\n} from './wallet-performances-block.lib'\nimport { VaultEpoch } from '../../vault-epochs'\nimport {\n  getVaultFinishedEpochs,\n  getVaultPerformance,\n} from '../../vault-performances'\nimport { Vault, VaultRewardProgramFrequency } from '../../vaults'\nimport { Transaction } from '../../transactions'\n\n/**\n * Get wallet position total USD\n * @param walletPosition wallet position object\n * @returns wallet position total USD\n */\nexport function getPositionTotalUSD(walletPosition: WalletPosition) {\n  return (walletPosition.tokens || []).reduce(\n    (acc, t) => acc.plus(t.USD),\n    BNify(walletPosition.redeemable.USD)\n  )\n}\n\n/**\n * Aggregate tokens data for aggregated wallet performance\n * @param tokens current tokens data\n * @param walletPosition wallet vault position\n * @returns tokens aggregated data\n */\nexport function aggregateTokens(\n  tokens: WalletPositionToken[],\n  walletPosition: WalletPosition\n): WalletPositionToken[] {\n  const redeemableUSD = BNify(walletPosition.redeemable.USD)\n  const updatedTokens = tokens.map((token) =>\n    token.tokenId === walletPosition.tokenId\n      ? {\n          ...token,\n          amount: BNify(token.amount)\n            .plus(BNify(walletPosition.redeemable.token))\n            .toFixed(0),\n          USD: BNify(token.USD).plus(redeemableUSD).toFixed(0),\n          percentage: 0,\n        }\n      : token\n  )\n\n  const tokenExists = tokens.some(\n    (token) => token.tokenId === walletPosition.tokenId\n  )\n\n  const newTokens: WalletPositionToken[] = tokenExists\n    ? updatedTokens\n    : [\n        ...updatedTokens,\n        {\n          walletId: walletPosition.walletId,\n          tokenId: walletPosition.tokenId,\n          tokenAddress: walletPosition.tokenAddress,\n          amount: BNify(walletPosition.redeemable.token).toFixed(0),\n          USD: redeemableUSD.toFixed(0),\n          percentage: 0,\n        },\n      ]\n\n  // Insert pools tokens\n  walletPosition.tokens?.forEach((positionToken) => {\n    const matchingTokenIndex = newTokens.findIndex(\n      (token) =>\n        token.tokenId === positionToken.tokenId &&\n        token.operatorId === positionToken.operatorId &&\n        token.pool === positionToken.pool\n    )\n\n    if (matchingTokenIndex !== -1) {\n      const matchingToken = newTokens[matchingTokenIndex]\n      newTokens[matchingTokenIndex] = {\n        ...matchingToken,\n        amount: BNFixed(BNify(matchingToken.amount).plus(positionToken.amount)),\n        USD: BNFixed(BNify(matchingToken.USD).plus(positionToken.USD)),\n      }\n    } else {\n      newTokens.push(positionToken)\n    }\n  })\n\n  // Calculate percentage\n  const totalUSD = newTokens.reduce((acc: BigNumber, token) => {\n    return acc.plus(token.USD)\n  }, BNify(0))\n\n  return newTokens.reduce((acc: WalletPositionToken[], token) => {\n    return [\n      ...acc,\n      {\n        ...token,\n        percentage: BNSafeDiv(token.USD, totalUSD).times(100).toNumber(),\n      },\n    ]\n  }, [])\n}\n\n/**\n * Aggregate chains data for aggregated wallet performance\n * @param chains current chains data\n * @param walletPosition wallet vault position\n * @returns chains aggregated data\n */\nexport function aggregateChains(\n  chains: WalletPositionChain[],\n  walletPosition: WalletPosition\n): WalletPositionChain[] {\n  const redeemableUSD = getPositionTotalUSD(walletPosition)\n\n  const updatedChains = chains.map((chain) =>\n    chain.chainId === walletPosition.chainId\n      ? {\n          ...chain,\n          USD: BNify(chain.USD).plus(redeemableUSD).toFixed(0),\n          percentage: 0,\n        }\n      : chain\n  )\n\n  const chainExists = chains.some(\n    (chain) => chain.chainId === walletPosition.chainId\n  )\n\n  const newChains = chainExists\n    ? updatedChains\n    : [\n        ...updatedChains,\n        {\n          chainId: walletPosition.chainId,\n          USD: redeemableUSD.toFixed(0),\n        },\n      ]\n\n  // Calculate percentage\n  const totalUSD = newChains.reduce((acc: BigNumber, chain) => {\n    return acc.plus(chain.USD)\n  }, BNify(0))\n\n  return newChains.reduce((acc: WalletPositionChain[], chain) => {\n    return [\n      ...acc,\n      {\n        ...chain,\n        percentage: BNSafeDiv(chain.USD, totalUSD).times(100).toNumber(),\n      },\n    ]\n  }, [])\n}\n\n/**\n * Aggregate tokens data for aggregated wallet performance\n * @param tokens current tokens data\n * @param walletPosition wallet vault position\n * @returns tokens aggregated data\n */\nexport function aggregateOperators(\n  operatorIds: string[],\n  operators: WalletPositionOperator[],\n  walletPosition: WalletPosition\n): WalletPositionOperator[] {\n  const updatedOperators = operators.map((operator) =>\n    operatorIds.includes(operator.operatorId)\n      ? {\n          ...operator,\n          USD: BNify(operator.USD)\n            .plus(BNify(walletPosition.redeemable.USD))\n            .toFixed(0),\n        }\n      : operator\n  )\n\n  const operatorExists = operators.some((operator) =>\n    operatorIds.includes(operator.operatorId)\n  )\n\n  const newOperators = operatorExists\n    ? updatedOperators\n    : [\n        ...updatedOperators,\n        ...operatorIds.map((operatorId) => ({\n          operatorId,\n          USD: BNify(walletPosition.redeemable.USD).toFixed(0),\n        })),\n      ]\n\n  // Calculate percentage\n  const totalUSD = newOperators.reduce((acc: BigNumber, operator) => {\n    return acc.plus(operator.USD)\n  }, BNify(0))\n\n  return newOperators.reduce((acc: WalletPositionOperator[], operator) => {\n    return [\n      ...acc,\n      {\n        ...operator,\n        percentage: BNSafeDiv(operator.USD, totalUSD).times(100).toNumber(),\n      },\n    ]\n  }, [])\n}\n\n/**\n * Aggregate vaults data\n * @param portfolio the wallet portfolio data\n * @param position - the wallet position\n * @param vault - the vault\n * @returns the vaults data\n */\nexport function aggregateVaults(\n  portfolio: WalletPortfolio,\n  position: WalletPosition\n) {\n  const redeemableUSD = getPositionTotalUSD(position)\n\n  // Redeemable\n  const redeemable = {\n    ...portfolio.redeemable,\n    USD: BNFixed(BNify(portfolio.redeemable.USD).plus(redeemableUSD)),\n  }\n\n  const percentageRewards = BNgt(redeemable.USD)\n    ? BNify(portfolio.earnings.rewards?.percentage)\n        .times(portfolio.redeemable.USD)\n        .plus(\n          BNify(position.earnings.rewards?.percentage).times(\n            position.redeemable.USD\n          )\n        )\n        .div(redeemable.USD)\n        .toNumber()\n    : 0\n\n  const rewards = {\n    ...position.earnings.rewards,\n    USD: BNFixed(\n      BNify(position.earnings.rewards?.USD).plus(\n        position.earnings.rewards?.USD || 0\n      )\n    ),\n    percentage: percentageRewards,\n  }\n\n  const percentageEarnings = BNgt(redeemable.USD)\n    ? BNify(position.earnings.percentage)\n        .times(position.redeemable.USD)\n        .plus(\n          BNify(position.earnings.percentage).times(position.redeemable.USD)\n        )\n        .div(redeemable.USD)\n        .toNumber()\n    : 0\n\n  // Earnings\n  const earnings: WalletBlockEarnings = {\n    ...portfolio.earnings,\n    USD: BNify(portfolio.earnings.USD)\n      .plus(position.earnings.USD || 0)\n      .toFixed(0),\n    percentage: percentageEarnings,\n    rewards,\n  }\n\n  // Deposits\n  const deposits = {\n    ...portfolio.deposits,\n    USD: BNify(portfolio.deposits.USD)\n      .plus(position.deposits.USD || 0)\n      .toFixed(0),\n  }\n\n  // Pending Deposits\n  const pendingDeposits = {\n    USD: BNify(portfolio.pendingDeposits.USD)\n      .plus(position.pendingDeposits.USD)\n      .toFixed(0),\n  }\n\n  // Pending Withdraws\n  const pendingWithdraws = {\n    USD: BNify(portfolio.pendingWithdraws.USD)\n      .plus(position.pendingWithdraws.USD)\n      .toFixed(0),\n  }\n\n  // APY realized\n  const realizedAPY = BNgt(redeemable.USD)\n    ? BNify(portfolio.realizedAPY)\n        .times(portfolio.redeemable.USD)\n        .plus(BNify(position.realizedAPY).times(position.redeemable.USD))\n        .div(redeemable.USD)\n        .toNumber()\n    : 0\n\n  // APY realized with rewards\n  const rewardsRealizedAPY = BNgt(redeemable.USD)\n    ? BNify(portfolio.rewardsRealizedAPY)\n        .times(portfolio.redeemable.USD)\n        .plus(BNify(position.rewardsRealizedAPY).times(position.redeemable.USD))\n        .div(redeemable.USD)\n        .toNumber()\n    : 0\n\n  const vaultIds = [...portfolio.vaultIds, position.vaultId]\n\n  const accruedRewards = [\n    ...(portfolio.accruedRewards || []),\n    ...(position.accruedRewards || []),\n  ]\n\n  return {\n    vaultIds,\n    earnings,\n    deposits,\n    redeemable,\n    pendingDeposits,\n    pendingWithdraws,\n    realizedAPY,\n    accruedRewards,\n    rewardsRealizedAPY,\n  }\n}\n\n/**\n * Get wallet performances for a specific vault\n * @param vault vault\n * @param token token\n * @param vaultBlocks vault blocks\n * @param walletBlocks wallet blocks\n * @param walletVaultRewards wallet vault rewards\n * @param tokenBlocks token blocks\n * @param vaultEpochs vault epochs\n * @param latestVaultBlock latest vault block\n * @param walletVaultDeposits wallet vault deposited\n * @param tokens wallet position tokens\n * @returns wallet vault performances\n */\nexport function makeWalletVaultPerformance(\n  vault: Vault,\n  token: Token,\n  vaultBlocks: VaultBlock[],\n  walletBlocks: WalletBlock[],\n  walletVaultRewards: WalletDistributedRewards[],\n  tokenBlocks: TokenBlock[],\n  vaultEpochs: VaultEpoch[],\n  latestVaultBlock: VaultBlock,\n  walletVaultDeposits: WalletDeposits,\n  tokens: WalletPositionToken[]\n): WalletPosition {\n  const performance = vaultBlocks.reduce(\n    (\n      acc: {\n        lastVaultBlock: VaultBlock | undefined\n        lastWalletBlock: WalletBlock | undefined\n        latestWalletBlockWithBalance: WalletBlock | undefined\n        lastWalletPerformance: WalletBlockPerformance\n      },\n      vaultBlock: VaultBlock\n    ) => {\n      const {\n        lastVaultBlock,\n        lastWalletBlock,\n        lastWalletPerformance,\n        latestWalletBlockWithBalance,\n      } = acc\n\n      const walletBlock = walletBlocks.find((walletBlock) =>\n        BNeq(vaultBlock.block.number, walletBlock.block.number)\n      )\n\n      const distributedRewards = walletVaultRewards.filter((r) =>\n        BNeq(r.block.number, walletBlock?.block.number)\n      )\n\n      const tokenBlock = tokenBlocks.find((tokenBlock) =>\n        BNeq(tokenBlock.block.number, vaultBlock.block.number)\n      )\n\n      const tokenData = {\n        price: tokenBlock?.price || getTokenAmount(token, 1, 6),\n        decimals: 6,\n      }\n\n      // SKIP - No vault block\n      if (!vaultBlock) {\n        return acc\n      }\n\n      // No last wallet block\n      if (\n        !lastWalletBlock ||\n        BNlte(getWalletBalanceWithRequests(lastWalletBlock, vaultBlock))\n      ) {\n        return {\n          lastVaultBlock: vaultBlock,\n          lastWalletBlock: walletBlock,\n          latestWalletBlockWithBalance: walletBlock,\n          lastWalletPerformance: initWalletPerformance(),\n        }\n      }\n\n      const currLastBlocks: VaultBlocks = {\n        current: vaultBlock,\n        last: lastVaultBlock,\n      }\n\n      const finishedEpochs = getVaultFinishedEpochs(\n        vaultEpochs,\n        currLastBlocks,\n        latestWalletBlockWithBalance\n      )\n\n      const epochsDuration = finishedEpochs.reduce(\n        (acc, epoch) => acc + epoch.duration + epoch.bufferDuration,\n        0\n      )\n\n      const vaultPerformance = getVaultPerformance(\n        currLastBlocks,\n        token,\n        tokenData,\n        [],\n        undefined,\n        undefined,\n        epochsDuration\n      )\n\n      // Skip calculation if realized APY is zero\n      if (\n        vault.contractType === 'CDO_EPOCH' &&\n        BNeq(vaultPerformance.realizedAPY)\n      ) {\n        return acc\n      }\n\n      const walletPerformance = getWalletPerformance(\n        vault.feePercentage,\n        token,\n        lastWalletBlock,\n        undefined,\n        currLastBlocks,\n        vaultPerformance,\n        tokenData,\n        distributedRewards\n      )\n\n      const age = BNify(lastWalletPerformance.age)\n        .plus(walletPerformance.age)\n        .toNumber()\n\n      // Rewards earnings\n      const rewards = {\n        ...lastWalletPerformance.earnings.rewards,\n        USD: BNify(lastWalletPerformance.earnings.rewards?.USD || 0)\n          .plus(walletPerformance.earnings.rewards?.USD || 0)\n          .toFixed(0),\n        percentage: BNify(\n          lastWalletPerformance.earnings.rewards?.percentage || 0\n        )\n          .plus(walletPerformance.earnings.rewards?.percentage || 0)\n          .toNumber(),\n      }\n\n      // Earnings\n      const earnings = {\n        ...lastWalletPerformance.earnings,\n        USD: BNify(lastWalletPerformance.earnings.USD)\n          .plus(walletPerformance.earnings.USD || 0)\n          .toFixed(0),\n        token: BNify(lastWalletPerformance.earnings.token)\n          .plus(walletPerformance.earnings.token || 0)\n          .toFixed(0),\n        percentage: BNify(lastWalletPerformance.earnings.percentage)\n          .plus(walletPerformance.earnings.percentage || 0)\n          .toNumber(),\n        rewards,\n      }\n\n      // Fees\n      const fees = {\n        ...lastWalletPerformance.fees,\n        USD: BNify(lastWalletPerformance.fees.USD)\n          .plus(walletPerformance.fees.USD || 0)\n          .toFixed(0),\n        token: BNify(lastWalletPerformance.fees.token)\n          .plus(walletPerformance.fees.token || 0)\n          .toFixed(0),\n      }\n\n      const realizedAPY = BNgt(age)\n        ? BNify(lastWalletPerformance.realizedAPY)\n            .times(lastWalletPerformance.age)\n            .plus(\n              BNify(walletPerformance.realizedAPY).times(walletPerformance.age)\n            )\n            .div(age)\n            .toNumber()\n        : 0\n\n      return {\n        lastWalletPerformance: {\n          ...lastWalletPerformance,\n          age,\n          earnings,\n          fees,\n          realizedAPY,\n        },\n        lastWalletBlock: walletBlock,\n        lastVaultBlock: vaultBlock,\n        latestWalletBlockWithBalance,\n      }\n    },\n    {\n      lastVaultBlock: undefined,\n      lastWalletBlock: undefined,\n      latestWalletBlockWithBalance: undefined,\n      lastWalletPerformance: initWalletPerformance(),\n    }\n  )\n\n  const walletPerformance = performance.lastWalletPerformance\n\n  const accruedRewards = getWalletAccruedRewards(walletVaultRewards)\n\n  const rewardsRealizedAPY = accruedRewards\n    .reduce((acc, r) => acc.plus(r.APR), BNify(0))\n    .toNumber()\n\n  const walletAddress = walletBlocks[walletBlocks.length - 1].walletAddress\n\n  const walletPosition: WalletPosition = {\n    walletAddress,\n    block: latestVaultBlock.block,\n    vaultId: vault._id,\n    vaultAddress: vault.address,\n    chainId: vault.chainId,\n    tokenId: token._id,\n    tokenAddress: token.address,\n    vaultPrice: latestVaultBlock.price,\n    ...walletPerformance,\n    ...walletVaultDeposits,\n    accruedRewards,\n    rewardsRealizedAPY,\n    tokens,\n  }\n\n  return walletPosition\n}\n\n/**\n * Make distributed reward performance for wallet portfolio\n * @param vault vault entity\n * @param token token entity\n * @param walletBlock wallet block entity\n * @param distributedReward distributed reward object\n * @param tokenPrice token price at specific block\n * @returns distributed rewards performance\n */\nexport function makeWalletDistributedReward(\n  vault: Vault,\n  token: Token,\n  walletBlock: WalletBlock,\n  distributedReward: WalletBlockDistributedRewards,\n  tokenPrice: string\n): WalletDistributedRewards {\n  const rewardProgram = vault.rewardPrograms?.find(\n    (r) => r.tokenId === distributedReward.tokenId\n  )\n  if (!rewardProgram) {\n    throw new ServerError({\n      code: WalletPerformanceErrorCodes.rewardProgramNotFound,\n      message: `Reward program not found (vaultId: ${vault._id}, tokenId: ${distributedReward.tokenId})`,\n      statusCode: 404,\n    })\n  }\n  const balanceUSD = BNFixed(\n    fixAmount(BNify(walletBlock.tokenBalance).times(tokenPrice), token.decimals)\n  )\n  const APR = calculateDistributedRewardAPR(\n    distributedReward.amountUSD,\n    balanceUSD,\n    rewardProgram.distributionFrequency\n  )\n  const percentage = BNSafeDiv(distributedReward.amountUSD, balanceUSD)\n    .times(100)\n    .toNumber()\n\n  return {\n    ...distributedReward,\n    walletId: walletBlock.walletId,\n    block: walletBlock.block,\n    APR,\n    percentage,\n  }\n}\n\n/**\n * Calculate APR from distributed rewards\n * @param distributedAmountUSD amount received in USD\n * @param balanceUSD wallet balance in USD\n * @param distributionFrequency reward program distribution frequency\n * @returns APR from distributed rewards\n */\nexport function calculateDistributedRewardAPR(\n  distributedAmountUSD: string,\n  balanceUSD: string,\n  distributionFrequency: VaultRewardProgramFrequency\n) {\n  const periodsPerYear: Record<string, number> = {\n    D: 365,\n    W: 52,\n    M: 12,\n    Y: 1,\n  }\n\n  const frequency = periodsPerYear[distributionFrequency.unit] || 1\n  const periods = frequency / distributionFrequency.value\n\n  return BNSafeDiv(distributedAmountUSD, balanceUSD)\n    .times(periods)\n    .times(100)\n    .toNumber()\n}\n\nexport function calculateWalletFirstBlock(\n  deposits: WalletBlockAmounts,\n  transaction: Transaction,\n  firstBlock?: Block\n): Block | undefined {\n  // Return undefined if no deposits\n  if (BNlte(deposits.token)) {\n    return undefined\n  }\n  // Return new block\n  if (!firstBlock || BNlt(transaction.block.number, firstBlock.number)) {\n    return transaction.block\n  }\n  // Return previous firstBlock\n  return firstBlock\n}\n\nexport function calculateWalletAvgPriceAccumulator(\n  num: BigNumber,\n  den: BigNumber,\n  transaction: Transaction\n) {\n  return {\n    num: BNify(num).plus(BNify(transaction.price).times(transaction.amount)),\n    den: BNify(den).plus(transaction.amount),\n  }\n}\n\nexport function calculateWalletDeposits(\n  deposits: WalletBlockAmounts,\n  transaction: Transaction\n) {\n  switch (transaction.type) {\n    case 'STAKE':\n    case 'DEPOSIT':\n    case 'REQUEST_DEPOSIT':\n    case 'DELETE_WITHDRAW_REQUEST':\n      return {\n        ...deposits,\n        token: BNFixed(BNify(deposits.token).plus(transaction.tokenAmount)),\n      }\n    case 'UNSTAKE':\n    case 'REDEEM':\n    case 'REQUEST_WITHDRAW':\n    case 'DELETE_DEPOSIT_REQUEST':\n      return {\n        ...deposits,\n        vault: BNFixed(\n          BigNumber.maximum(0, BNify(deposits.vault).minus(transaction.amount))\n        ),\n        token: BNFixed(\n          BigNumber.maximum(\n            0,\n            BNify(deposits.token).minus(transaction.tokenAmount)\n          )\n        ),\n      }\n  }\n  return deposits\n}\n\nexport function makeWalletVaultDeposits(\n  token: Token,\n  transactions: Transaction[],\n  tokenPriceData: TokenPriceData,\n  walletLatestBlock: WalletBlock,\n  vaultLatestBlock: VaultBlock\n): WalletDeposits {\n  const info = transactions.reduce(\n    (\n      acc: {\n        num: BigNumber\n        den: BigNumber\n        firstBlock: Block | undefined\n        deposits: WalletBlockAmounts\n      },\n      transaction: Transaction\n    ) => {\n      const deposits = calculateWalletDeposits(acc.deposits, transaction)\n      const { num, den } = calculateWalletAvgPriceAccumulator(\n        acc.num,\n        acc.den,\n        transaction\n      )\n\n      const firstBlock = calculateWalletFirstBlock(\n        deposits,\n        transaction,\n        acc.firstBlock\n      )\n\n      return {\n        num,\n        den,\n        deposits,\n        firstBlock,\n      }\n    },\n    {\n      num: BNify(0),\n      den: BNify(0),\n      firstBlock: undefined,\n      deposits: initWalletBlockAmounts(),\n    }\n  )\n\n  // Calculate AVG deposit price\n  const { num, den, deposits, firstBlock } = info\n  const avgPrice = den.gt(0) ? BNFixed(num.div(den)) : BNFixed()\n\n  // Set USD amount\n  deposits.USD = BNFixed(\n    BNify(deposits.token).times(tokenPriceData.price).div(getTokenAmount(token))\n  )\n\n  const pendingDeposits = (vaultLatestBlock.requests || [])\n    .filter(\n      (r) =>\n        r.type === 'DEPOSIT' &&\n        compLower(r.walletAddress, walletLatestBlock.walletAddress)\n    )\n    .reduce(\n      (acc: WalletBlockAmounts, request) => {\n        const requestAmountUSD = fixTokenAmount(\n          token,\n          BNify(request.amount).times(tokenPriceData.price)\n        )\n        return {\n          token: BNFixed(BNify(acc.token).plus(request.amount)),\n          USD: BNFixed(BNify(acc.USD).plus(requestAmountUSD)),\n        }\n      },\n      initWalletBlockAmounts({\n        USD: '0',\n        token: '0',\n      })\n    )\n\n  const pendingWithdraws = (vaultLatestBlock.requests || [])\n    .filter(\n      (r) =>\n        ['WITHDRAW', 'REDEEM'].includes(r.type) &&\n        compLower(r.walletAddress, walletLatestBlock.walletAddress)\n    )\n    .reduce(\n      (acc: WalletBlockAmounts, request) => {\n        const requestAmountUSD = fixTokenAmount(\n          token,\n          BNify(request.amount).times(tokenPriceData.price)\n        )\n        return {\n          token: BNFixed(BNify(acc.token).plus(request.amount)),\n          USD: BNFixed(BNify(acc.USD).plus(requestAmountUSD)),\n        }\n      },\n      initWalletBlockAmounts({\n        USD: '0',\n        token: '0',\n      })\n    )\n\n  const tokenBalance = fixAmount(\n    BNify(walletLatestBlock.balance).times(vaultLatestBlock.price),\n    18\n  )\n\n  const redeemableToken = BNify(tokenBalance).plus(\n    pendingWithdraws.token || '0'\n  )\n\n  const redeemableVault = normalizeTokenAmount(\n    token,\n    BNSafeDiv(redeemableToken, vaultLatestBlock.price)\n  )\n\n  const redeemableUSD = fixAmount(\n    BNify(redeemableToken).times(tokenPriceData.price),\n    token.decimals\n  )\n\n  const redeemable: WalletBlockAmounts = initWalletBlockAmounts({\n    vault: BNFixed(redeemableVault),\n    token: BNFixed(redeemableToken),\n    USD: BNFixed(redeemableUSD),\n  })\n\n  return {\n    walletId: walletLatestBlock.walletId,\n    redeemable,\n    deposits,\n    avgPrice,\n    firstBlock,\n    pendingDeposits,\n    pendingWithdraws,\n  }\n}\n"],"names":["BigNumber","BNeq","BNFixed","BNgt","BNify","BNlt","BNlte","BNSafeDiv","compLower","ServerError","WalletPerformanceErrorCodes","getWalletBalanceWithRequests","fixAmount","fixTokenAmount","getTokenAmount","normalizeTokenAmount","getWalletAccruedRewards","getWalletPerformance","initWalletBlockAmounts","initWalletPerformance","getVaultFinishedEpochs","getVaultPerformance","getPositionTotalUSD","walletPosition","tokens","reduce","acc","t","plus","USD","redeemable","aggregateTokens","redeemableUSD","updatedTokens","map","token","tokenId","amount","toFixed","percentage","tokenExists","some","newTokens","walletId","tokenAddress","forEach","positionToken","matchingTokenIndex","findIndex","operatorId","pool","matchingToken","push","totalUSD","times","toNumber","aggregateChains","chains","updatedChains","chain","chainId","chainExists","newChains","aggregateOperators","operatorIds","operators","updatedOperators","operator","includes","operatorExists","newOperators","aggregateVaults","portfolio","position","percentageRewards","earnings","rewards","div","percentageEarnings","deposits","pendingDeposits","pendingWithdraws","realizedAPY","rewardsRealizedAPY","vaultIds","vaultId","accruedRewards","makeWalletVaultPerformance","vault","vaultBlocks","walletBlocks","walletVaultRewards","tokenBlocks","vaultEpochs","latestVaultBlock","walletVaultDeposits","performance","vaultBlock","lastWalletPerformance","walletPerformance","lastVaultBlock","lastWalletBlock","latestWalletBlockWithBalance","walletBlock","find","block","number","distributedRewards","filter","r","tokenBlock","tokenData","price","decimals","currLastBlocks","current","last","finishedEpochs","epochsDuration","epoch","duration","bufferDuration","vaultPerformance","undefined","contractType","feePercentage","age","fees","APR","walletAddress","length","_id","vaultAddress","address","vaultPrice","makeWalletDistributedReward","distributedReward","tokenPrice","rewardProgram","rewardPrograms","code","rewardProgramNotFound","message","statusCode","balanceUSD","tokenBalance","calculateDistributedRewardAPR","amountUSD","distributionFrequency","distributedAmountUSD","periodsPerYear","D","W","M","Y","frequency","unit","periods","value","calculateWalletFirstBlock","transaction","firstBlock","calculateWalletAvgPriceAccumulator","num","den","calculateWalletDeposits","type","tokenAmount","maximum","minus","makeWalletVaultDeposits","transactions","tokenPriceData","walletLatestBlock","vaultLatestBlock","info","avgPrice","gt","requests","request","requestAmountUSD","balance","redeemableToken","redeemableVault"],"mappings":"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"}