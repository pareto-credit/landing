{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/wallet-performances/wallet-performance.mock.ts"],"sourcesContent":["import { BlockMock, DeepPartial, RewardMock } from '../core'\nimport { WEB3_DEFAULT_ADDR } from '../web3-client'\nimport {\n  WalletBlockAmounts,\n  WalletBlockEarnings,\n  WalletBlockEarningsRewards,\n  WalletBlockPerformance,\n  WalletPerformance,\n} from './wallet-performance.model'\n\n/**\n * Wallet Performance Mock\n */\nexport function WalletPerformanceMock(\n  options?: DeepPartial<WalletPerformance>\n): WalletPerformance {\n  const now = new Date().toISOString()\n\n  return {\n    _id: options?._id || 'WALLET_PERFORMANCE_ID',\n\n    vaultId: options?.vaultId || 'VAULT_ID',\n    vaultAddress: options?.vaultAddress || WEB3_DEFAULT_ADDR,\n    walletId: options?.walletId || 'WALLET_ID',\n    walletAddress: options?.walletAddress || WEB3_DEFAULT_ADDR,\n    block: BlockMock(options?.block),\n\n    age: options?.age || 0,\n\n    earnings: WalletBlockEarningsMock(options?.earnings),\n    fees: WalletBlockAmountsMock(options?.fees),\n\n    realizedAPY: options?.realizedAPY || 0,\n    rewardsRealizedAPY: options?.rewardsRealizedAPY || 0,\n    poolSharePercentage: options?.poolSharePercentage || 0,\n\n    accruedRewards: options?.accruedRewards?.map((a) => RewardMock(a)),\n    collectedRewards: options?.collectedRewards?.map((c) => RewardMock(c)),\n\n    deposits: WalletBlockAmountsMock(options?.deposits),\n    redeemable: WalletBlockAmountsMock(options?.redeemable),\n\n    createdAt: now,\n    createdBy: options?.createdBy || 'USER_ID',\n    updatedAt: now,\n    updatedBy: options?.updatedBy || 'USER_ID',\n  }\n}\n\nexport function WalletBlockPerformanceMock(\n  options?: DeepPartial<WalletBlockPerformance>\n): WalletBlockPerformance {\n  return {\n    age: options?.age || 0,\n\n    earnings: WalletBlockEarningsMock(options?.earnings),\n    fees: WalletBlockAmountsMock(options?.fees),\n\n    realizedAPY: options?.realizedAPY || 0,\n    rewardsRealizedAPY: options?.rewardsRealizedAPY || 0,\n    poolSharePercentage: options?.poolSharePercentage || 0,\n\n    accruedRewards: options?.accruedRewards?.map((a) => RewardMock(a)),\n    collectedRewards: options?.collectedRewards?.map((c) => RewardMock(c)),\n  }\n}\n\nexport function WalletBlockAmountsMock(\n  options?: DeepPartial<WalletBlockAmounts>\n): WalletBlockAmounts {\n  return {\n    token: options?.token || '0',\n    USD: options?.USD || '0',\n  }\n}\n\nexport function WalletBlockEarningsMock(\n  options?: DeepPartial<WalletBlockEarnings>\n): WalletBlockEarnings {\n  return {\n    token: options?.token || '0',\n    USD: options?.USD || '0',\n    percentage: options?.percentage || 0,\n    rewards: WalletBlockEarningsRewardsMock(options?.rewards),\n  }\n}\n\nexport function WalletBlockEarningsRewardsMock(\n  options?: Partial<WalletBlockEarningsRewards>\n): WalletBlockEarningsRewards {\n  return {\n    USD: options?.USD || '0',\n    percentage: options?.percentage || 0,\n  }\n}\n"],"names":["BlockMock","RewardMock","WEB3_DEFAULT_ADDR","WalletPerformanceMock","options","now","Date","toISOString","_id","vaultId","vaultAddress","walletId","walletAddress","block","age","earnings","WalletBlockEarningsMock","fees","WalletBlockAmountsMock","realizedAPY","rewardsRealizedAPY","poolSharePercentage","accruedRewards","map","a","collectedRewards","c","deposits","redeemable","createdAt","createdBy","updatedAt","updatedBy","WalletBlockPerformanceMock","token","USD","percentage","rewards","WalletBlockEarningsRewardsMock"],"mappings":"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"}