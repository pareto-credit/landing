{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/wallets/classes/wallet-service.class.ts"],"sourcesContent":["import { Contract } from 'web3'\nimport {\n  AbiContract,\n  AbiJsonInterface,\n  AbiJsonParam,\n  BlockNumber,\n} from '../../core'\nimport { ERC20_ABI } from '../../vaults'\nimport {\n  Web3CallData,\n  Web3ClientModel,\n  Web3ContractMethod,\n  Web3ContractMethodParam,\n  Web3DataParam,\n} from '../../web3-client'\nimport { WalletContractData } from '../wallet.model'\n\nexport class WalletService {\n  public address: string\n  public web3Client: Web3ClientModel\n\n  constructor(address: string, web3Client: Web3ClientModel) {\n    this.address = address\n    this.web3Client = web3Client\n  }\n\n  public async getBalance(contractAddress: string, blockNumber?: BlockNumber) {\n    const contract = this.web3Client.initContract(ERC20_ABI, contractAddress)\n\n    const contractMethod: Web3ContractMethod = {\n      protocol: 'Idle',\n      type: 'WALLET',\n      block: 'current',\n      method: 'balanceOf',\n      params: ['walletAddress'],\n    }\n\n    const callData = this.makeMethodData(contract, contractMethod)\n    const responses = await this.web3Client.call([callData], blockNumber)\n    return this.parseCallResponses(responses)\n  }\n\n  public async getAllowance(\n    tokenAddress: string,\n    spenderAddress: string,\n    blockNumber?: BlockNumber\n  ) {\n    const contract = this.web3Client.initContract(ERC20_ABI, tokenAddress)\n\n    const contractMethod: Web3ContractMethod = {\n      type: 'WALLET',\n      protocol: 'Idle',\n      block: 'current',\n      method: 'allowance',\n      params: ['walletAddress', 'spenderAddress'],\n    }\n\n    const callData = this.makeMethodData(contract, contractMethod, {\n      spenderAddress,\n    })\n    const responses = await this.web3Client.call([callData], blockNumber)\n    return this.parseCallResponses(responses)\n  }\n\n  /**\n   * Parse method into Web3CallData\n   * @param method - the contract method\n   * @returns the web3CallData\n   */\n  protected makeMethodData(\n    contract: Contract<AbiContract>,\n    contractMethod: Web3ContractMethod,\n    values?: any\n  ): Web3CallData {\n    const { jsonInterface } = contract.options\n    const { protocol, type, method, block, params = [] } = contractMethod\n    const address = contract.options.address\n\n    if (!address) {\n      throw new Error('Contract without a valid address')\n    }\n\n    // Get ABI method to prepare the right types\n    const methodAbi = (jsonInterface as AbiJsonInterface[]).find(\n      (f) => f.name === method && f.inputs.length === params.length\n    )\n\n    if (!methodAbi) {\n      throw new Error(\n        `No ABI method '${method}' found for ${protocol} at contract ${contract.options.address}`\n      )\n    }\n\n    // Method name + params\n    const inputTypes = methodAbi.inputs.map((i) => i.type)\n    const methodName = `${methodAbi.name}(${inputTypes.join(',')})`\n\n    // Input & Outputs\n    const inputs: Web3DataParam[] = methodAbi.inputs.map((input, i) =>\n      this.makeMethodParamData(input, params[i], values)\n    )\n    const outputs: Web3DataParam[] = methodAbi.outputs.map((output) => ({\n      type: output.type,\n      name: output.name,\n      components: output.components,\n    }))\n\n    return {\n      protocol,\n      type,\n      address,\n      method: methodName,\n      block,\n      inputs,\n      outputs,\n    }\n  }\n\n  /**\n   * Parse vault json param\n   * @param vault - the vault\n   * @param input - the ABI Json Param\n   * @returns the vault data param\n   */\n  protected makeMethodParamData(\n    input: AbiJsonParam,\n    param?: Web3ContractMethodParam,\n    values?: any\n  ): Web3DataParam {\n    const type = input.type\n\n    return {\n      type,\n      value: param ? this.parseMethodParam(param, values) : undefined,\n    }\n  }\n\n  /**\n   * Parse method param\n   * @param param - the method param\n   * @returns the value of the param\n   */\n  private parseMethodParam(param: Web3ContractMethodParam, values?: any): any {\n    let value\n\n    switch (param) {\n      case 'walletAddress':\n        value = this.address\n        break\n      case 'spenderAddress':\n        value = values ? values['spenderAddress'] : undefined\n        break\n    }\n\n    return value\n  }\n\n  /**\n   * Parse Web3CallData into contract data\n   * @param response - the response from web3call data\n   * @returns the vault contract data\n   */\n  protected parseCallResponses(responses: Web3CallData[]): WalletContractData {\n    return responses.reduce<WalletContractData>(\n      (acc, res) => this.parseCallResponse(acc, res),\n      {}\n    )\n  }\n\n  /**\n   * Parse call response\n   * @param data - the already processed data\n   * @param response - the call response\n   * @returns the contract data\n   */\n  private parseCallResponse(\n    data: WalletContractData,\n    { method, outputs }: Web3CallData\n  ): WalletContractData {\n    const methodName = method.split('(')[0]\n    const methodData: WalletContractData = {}\n\n    switch (methodName) {\n      case 'balanceOf':\n        methodData.balance = outputs[0].value\n        break\n      case 'allowance':\n        methodData.allowance = outputs[0].value\n        break\n    }\n\n    return { ...data, ...methodData }\n  }\n}\n"],"names":["ERC20_ABI","WalletService","getBalance","contractAddress","blockNumber","contract","web3Client","initContract","contractMethod","protocol","type","block","method","params","callData","makeMethodData","responses","call","parseCallResponses","getAllowance","tokenAddress","spenderAddress","values","jsonInterface","options","address","Error","methodAbi","find","f","name","inputs","length","inputTypes","map","i","methodName","join","input","makeMethodParamData","outputs","output","components","param","value","parseMethodParam","undefined","reduce","acc","res","parseCallResponse","data","split","methodData","balance","allowance","constructor"],"mappings":";AAOA,SAASA,SAAS,QAAQ,eAAc;AAUxC,OAAO,MAAMC;IASX,MAAaC,WAAWC,eAAuB,EAAEC,WAAyB,EAAE;QAC1E,MAAMC,WAAW,IAAI,CAACC,UAAU,CAACC,YAAY,CAACP,WAAWG;QAEzD,MAAMK,iBAAqC;YACzCC,UAAU;YACVC,MAAM;YACNC,OAAO;YACPC,QAAQ;YACRC,QAAQ;gBAAC;aAAgB;QAC3B;QAEA,MAAMC,WAAW,IAAI,CAACC,cAAc,CAACV,UAAUG;QAC/C,MAAMQ,YAAY,MAAM,IAAI,CAACV,UAAU,CAACW,IAAI,CAAC;YAACH;SAAS,EAAEV;QACzD,OAAO,IAAI,CAACc,kBAAkB,CAACF;IACjC;IAEA,MAAaG,aACXC,YAAoB,EACpBC,cAAsB,EACtBjB,WAAyB,EACzB;QACA,MAAMC,WAAW,IAAI,CAACC,UAAU,CAACC,YAAY,CAACP,WAAWoB;QAEzD,MAAMZ,iBAAqC;YACzCE,MAAM;YACND,UAAU;YACVE,OAAO;YACPC,QAAQ;YACRC,QAAQ;gBAAC;gBAAiB;aAAiB;QAC7C;QAEA,MAAMC,WAAW,IAAI,CAACC,cAAc,CAACV,UAAUG,gBAAgB;YAC7Da;QACF;QACA,MAAML,YAAY,MAAM,IAAI,CAACV,UAAU,CAACW,IAAI,CAAC;YAACH;SAAS,EAAEV;QACzD,OAAO,IAAI,CAACc,kBAAkB,CAACF;IACjC;IAEA;;;;GAIC,GACD,AAAUD,eACRV,QAA+B,EAC/BG,cAAkC,EAClCc,MAAY,EACE;QACd,MAAM,EAAEC,aAAa,EAAE,GAAGlB,SAASmB,OAAO;QAC1C,MAAM,EAAEf,QAAQ,EAAEC,IAAI,EAAEE,MAAM,EAAED,KAAK,EAAEE,SAAS,EAAE,EAAE,GAAGL;QACvD,MAAMiB,UAAUpB,SAASmB,OAAO,CAACC,OAAO;QAExC,IAAI,CAACA,SAAS;YACZ,MAAM,IAAIC,MAAM;QAClB;QAEA,4CAA4C;QAC5C,MAAMC,YAAY,AAACJ,cAAqCK,IAAI,CAC1D,CAACC,IAAMA,EAAEC,IAAI,KAAKlB,UAAUiB,EAAEE,MAAM,CAACC,MAAM,KAAKnB,OAAOmB,MAAM;QAG/D,IAAI,CAACL,WAAW;YACd,MAAM,IAAID,MACR,CAAC,eAAe,EAAEd,OAAO,YAAY,EAAEH,SAAS,aAAa,EAAEJ,SAASmB,OAAO,CAACC,OAAO,CAAC,CAAC;QAE7F;QAEA,uBAAuB;QACvB,MAAMQ,aAAaN,UAAUI,MAAM,CAACG,GAAG,CAAC,CAACC,IAAMA,EAAEzB,IAAI;QACrD,MAAM0B,aAAa,CAAC,EAAET,UAAUG,IAAI,CAAC,CAAC,EAAEG,WAAWI,IAAI,CAAC,KAAK,CAAC,CAAC;QAE/D,kBAAkB;QAClB,MAAMN,SAA0BJ,UAAUI,MAAM,CAACG,GAAG,CAAC,CAACI,OAAOH,IAC3D,IAAI,CAACI,mBAAmB,CAACD,OAAOzB,MAAM,CAACsB,EAAE,EAAEb;QAE7C,MAAMkB,UAA2Bb,UAAUa,OAAO,CAACN,GAAG,CAAC,CAACO,SAAY,CAAA;gBAClE/B,MAAM+B,OAAO/B,IAAI;gBACjBoB,MAAMW,OAAOX,IAAI;gBACjBY,YAAYD,OAAOC,UAAU;YAC/B,CAAA;QAEA,OAAO;YACLjC;YACAC;YACAe;YACAb,QAAQwB;YACRzB;YACAoB;YACAS;QACF;IACF;IAEA;;;;;GAKC,GACD,AAAUD,oBACRD,KAAmB,EACnBK,KAA+B,EAC/BrB,MAAY,EACG;QACf,MAAMZ,OAAO4B,MAAM5B,IAAI;QAEvB,OAAO;YACLA;YACAkC,OAAOD,QAAQ,IAAI,CAACE,gBAAgB,CAACF,OAAOrB,UAAUwB;QACxD;IACF;IAEA;;;;GAIC,GACD,AAAQD,iBAAiBF,KAA8B,EAAErB,MAAY,EAAO;QAC1E,IAAIsB;QAEJ,OAAQD;YACN,KAAK;gBACHC,QAAQ,IAAI,CAACnB,OAAO;gBACpB;YACF,KAAK;gBACHmB,QAAQtB,SAASA,MAAM,CAAC,iBAAiB,GAAGwB;gBAC5C;QACJ;QAEA,OAAOF;IACT;IAEA;;;;GAIC,GACD,AAAU1B,mBAAmBF,SAAyB,EAAsB;QAC1E,OAAOA,UAAU+B,MAAM,CACrB,CAACC,KAAKC,MAAQ,IAAI,CAACC,iBAAiB,CAACF,KAAKC,MAC1C,CAAC;IAEL;IAEA;;;;;GAKC,GACD,AAAQC,kBACNC,IAAwB,EACxB,EAAEvC,MAAM,EAAE4B,OAAO,EAAgB,EACb;QACpB,MAAMJ,aAAaxB,OAAOwC,KAAK,CAAC,IAAI,CAAC,EAAE;QACvC,MAAMC,aAAiC,CAAC;QAExC,OAAQjB;YACN,KAAK;gBACHiB,WAAWC,OAAO,GAAGd,OAAO,CAAC,EAAE,CAACI,KAAK;gBACrC;YACF,KAAK;gBACHS,WAAWE,SAAS,GAAGf,OAAO,CAAC,EAAE,CAACI,KAAK;gBACvC;QACJ;QAEA,OAAO,aAAKO,MAASE;IACvB;IA3KAG,YAAY/B,OAAe,EAAEnB,UAA2B,CAAE;QACxD,IAAI,CAACmB,OAAO,GAAGA;QACf,IAAI,CAACnB,UAAU,GAAGA;IACpB;AAyKF"}