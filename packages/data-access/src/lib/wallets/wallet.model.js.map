{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/wallets/wallet.model.ts"],"sourcesContent":["import S from 'fluent-json-schema'\nimport { WalletPortfolio, WalletPosition } from '../wallet-performances'\nimport { WALLETS_ROUTES_KEY } from './wallet.const'\nimport {\n  sBCAddress,\n  sClientEntity,\n  sStringId,\n  ClientEntity,\n  iBigInt,\n  Block,\n  PageSearchQuery,\n  Page,\n  sHexString,\n  sPageSearchQuery,\n  sEmail,\n  sDateString,\n} from '../core'\nimport { sVaultsSearchQuery, VaultsSearchQuery } from '../vaults'\nimport { User } from '../users'\n\n/**\n * Client Wallet interface\n */\nexport interface Wallet extends WalletData, ClientEntity {}\n\nexport function sWallet(isPartial?: boolean) {\n  return S.object()\n    .id('#wallet')\n    .additionalProperties(false)\n    .extend(sClientEntity(isPartial))\n    .extend(sWalletData(isPartial))\n}\n\nexport interface WalletData extends WalletBody {\n  // Wallet BlockChain Address\n  address: string\n}\n\nexport function sWalletData(isPartial?: boolean) {\n  return S.object()\n    .additionalProperties(false)\n    .prop('address', sBCAddress())\n    .required(isPartial ? [] : ['address'])\n    .extend(sWalletBody())\n}\n\nexport interface WalletBody {\n  userId?: string\n  // Ethereum Name Service\n  ens?: string\n  signatures?: WalletSignature[]\n  campaigns?: WalletCampaign[]\n}\n\nexport function sWalletBody() {\n  return S.object()\n    .additionalProperties(false)\n    .prop('userId', sStringId())\n    .prop('ens', S.string())\n    .prop('signatures', S.array().items(sWalletSignature()))\n    .prop('campaigns', S.array().items(sWalletCampaign()))\n}\n\nexport interface WalletUserBody {\n  name?: string\n  email?: string\n  telegram?: string\n}\n\nexport function sWalletUserBody() {\n  return S.object()\n    .additionalProperties(false)\n    .prop('name', S.string())\n    .description('User name')\n    .prop('email', sEmail())\n    .description('User email')\n    .prop('telegram', S.string())\n    .description('User telegram profile')\n}\n\nexport interface WalletContractData {\n  balance?: iBigInt\n  allowance?: iBigInt\n}\n\nexport interface WalletAmounts {\n  balance: iBigInt\n  allowance: iBigInt\n}\n\nexport interface WalletSignature {\n  _id: string\n  hash: string\n  signedOn: string\n}\n\nexport function sWalletSignature() {\n  return S.object()\n    .additionalProperties(false)\n    .prop('_id', sStringId())\n    .required()\n    .prop('hash', sHexString())\n    .required()\n    .prop('signedOn', sDateString())\n    .required()\n}\n\nexport interface WalletCampaign {\n  _id: string\n  referralCode: string\n  activatedOn: string\n}\n\nexport function sWalletCampaign() {\n  return S.object()\n    .additionalProperties(false)\n    .prop('_id', sStringId())\n    .required()\n    .prop('referralCode', S.string())\n    .required()\n    .prop('activatedOn', sDateString())\n    .required()\n}\n\nexport interface WalletPortfolioQuery\n  extends WalletPortfolioFilters,\n    VaultsSearchQuery {}\n\nexport function sWalletPortfolioQuery() {\n  S.object()\n    .additionalProperties(false)\n    .extend(sVaultsSearchQuery())\n    .extend(sWalletPortfolioFilters())\n}\n\nexport interface WalletPortfolioFilters {\n  vaultId?: string | string[]\n  'block:gte'?: Block['number']\n  'block:lte'?: Block['number']\n  'timestamp:gte'?: Block['timestamp']\n  'timestamp:lte'?: Block['timestamp']\n}\n\nexport function sWalletPortfolioFilters() {\n  return S.object()\n    .additionalProperties(false)\n    .prop('vaultId', S.array().minItems(1).maxItems(200).items(sStringId()))\n    .description('VaultID that must match')\n    .prop('block:gte', S.number())\n    .description('Start block')\n    .prop('block:lte', S.number())\n    .description('End Block')\n    .prop('timestamp:hte', S.number())\n    .description('Start timestamp')\n    .prop('timestamp:lte', S.number())\n    .description('End timestamp')\n}\n\nexport enum WalletErrorCodes {\n  vaultsMissing = 'VAULT_IDS_MISSING',\n  alreadyExists = 'WALLET_ALREADY_EXISTS',\n  notDeletable = 'WALLET_NOT_DELETABLE',\n  malformed = 'WALLET_ADDRESS_MALFORMED',\n  notFound = 'WALLET_NOT_FOUND',\n}\n\nexport enum WalletRoutes {\n  v1Create = `v1/${WALLETS_ROUTES_KEY}`,\n  v1Delete = `v1/${WALLETS_ROUTES_KEY}/:walletId`,\n  v1Ensure = `v1/${WALLETS_ROUTES_KEY}/ensure`,\n  v1Perform = `v1/${WALLETS_ROUTES_KEY}/:walletId/perform`,\n  v1Portfolio = `v1/${WALLETS_ROUTES_KEY}/:walletId/portfolio`,\n  v1Read = `v1/${WALLETS_ROUTES_KEY}/:walletId`,\n  v1Referral = `v1/${WALLETS_ROUTES_KEY}/:walletId/referral`,\n  v1Search = `v1/${WALLETS_ROUTES_KEY}`,\n  v1Update = `v1/${WALLETS_ROUTES_KEY}/:walletId`,\n  v1User = `v1/${WALLETS_ROUTES_KEY}/:walletId/user`,\n  v1Vaults = `v1/${WALLETS_ROUTES_KEY}/:walletId/vaults`,\n}\n\nexport type WalletFields =\n  | '_id'\n  | 'address'\n  | 'userId'\n  | 'ens'\n  | 'signatures'\n  | 'createdAt'\n  | 'createdBy'\n  | 'updatedAt'\n  | 'updatedBy'\n\nexport const WALLET_FIELDS = [\n  '_id',\n  'address',\n  'userId',\n  'ens',\n  'signatures',\n  'createdAt',\n  'createdBy',\n  'updatedAt',\n  'updatedBy',\n]\n\nexport const WALLET_SORT_FIELDS = ['address']\n\nexport function sWalletsSearchQuery() {\n  return S.object()\n    .additionalProperties(false)\n    .prop('address', sBCAddress())\n    .description('Wallet blockchain address')\n    .extend(sPageSearchQuery(WALLET_FIELDS, WALLET_SORT_FIELDS))\n}\n\nexport type WalletSideData =\n  | 'kyc'\n  | 'position'\n  | 'signature'\n  | 'balance'\n  | 'deposit'\n  | 'withdrawable'\n  | 'depositAllowance'\n  | 'depositSpender'\n  | 'withdrawSpender'\n  | 'withdrawAllowance'\n\nexport interface WalletsSearchQuery\n  extends PageSearchQuery<'address', WalletFields> {\n  address?: string\n}\nexport enum WalletsRoutingKey {\n  idleEvents = 'idle.wallet.*',\n  idlePerform = 'idle.wallet.perform',\n}\n\nexport interface WalletsClient {\n  search: (params?: WalletsSearchQuery) => Promise<Page<Wallet>>\n  list: (params?: WalletsSearchQuery) => Promise<Wallet[]>\n  findOne: (params?: WalletsSearchQuery) => Promise<Wallet | undefined>\n  readOne: (params: WalletsSearchQuery) => Promise<Wallet>\n  portfolio: (\n    walletId: string,\n    params?: WalletPortfolioQuery\n  ) => Promise<WalletPortfolio>\n  vaults: (\n    walletId: string,\n    params?: WalletPortfolioQuery\n  ) => Promise<WalletPosition[]>\n  ensure: (address: string) => Promise<Wallet>\n  user: (\n    walletId: string,\n    body: { name?: string; email?: string; telegram?: string }\n  ) => Promise<User>\n  referral: (walletId: string, referral: string) => Promise<Wallet>\n}\n"],"names":["S","WALLETS_ROUTES_KEY","sBCAddress","sClientEntity","sStringId","sHexString","sPageSearchQuery","sEmail","sDateString","sVaultsSearchQuery","sWallet","isPartial","object","id","additionalProperties","extend","sWalletData","prop","required","sWalletBody","string","array","items","sWalletSignature","sWalletCampaign","sWalletUserBody","description","sWalletPortfolioQuery","sWalletPortfolioFilters","minItems","maxItems","number","WalletErrorCodes","WalletRoutes","WALLET_FIELDS","WALLET_SORT_FIELDS","sWalletsSearchQuery","WalletsRoutingKey"],"mappings":"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"}