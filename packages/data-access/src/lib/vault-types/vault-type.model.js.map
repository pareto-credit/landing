{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/vault-types/vault-type.model.ts"],"sourcesContent":["import S from 'fluent-json-schema'\nimport { VAULT_TYPES_ROUTES_KEY } from './vault-type.const'\nimport { sClientEntity, sLocales, sPageSearchQuery } from '../core'\nimport { ClientEntity, Locales, Page, PageSearchQuery } from '../core'\n\n/**\n * Client Vault interface\n */\nexport interface VaultType extends VaultTypeData, ClientEntity {}\n\nexport function sVaultType(isPartial?: boolean) {\n  return S.object()\n    .id('#vaultType')\n    .additionalProperties(false)\n    .extend(sClientEntity(isPartial))\n    .extend(sVaultTypeData(isPartial))\n}\n\nexport interface VaultTypeData {\n  code: string\n  name: Locales<string>\n  description?: Locales<string>\n}\n\nexport function sVaultTypeData(isPartial?: boolean) {\n  return S.object()\n    .additionalProperties(false)\n    .prop('code', S.string())\n    .prop('name', sLocales())\n    .prop('description', sLocales())\n    .required(isPartial ? [] : ['code', 'name'])\n}\n\nexport enum VaultTypeErrorCodes {\n  collision = 'VAULT_TYPE_COLLISION',\n  notFound = 'VAULT_TYPE_NOT_FOUND',\n  notDeletable = 'VAULT_TYPE_NOT_DELETABLE',\n  alreadyExists = 'VAULT_TYPE_ALREADY_EXISTS',\n}\n\nexport type VaultTypeFields =\n  | '_id'\n  | 'code'\n  | 'name'\n  | 'description'\n  | 'createdAt'\n  | 'createdBy'\n  | 'updatedAt'\n  | 'updatedBy'\n\nexport const VAULT_TYPE_FIELDS = [\n  '_id',\n  'code',\n  'name',\n  'description',\n  'createdAt',\n  'createdBy',\n  'updatedAt',\n  'updatedBy',\n]\n\nexport const VAULT_TYPE_SORT_FIELDS = ['code']\n\nexport interface VaultTypesSearchQuery\n  extends PageSearchQuery<'code', VaultTypeFields> {\n  code?: string\n  'code:ct'?: string\n}\n\n// Route schema\nexport function sVaultTypesSearchSchema() {\n  return S.object()\n    .additionalProperties(false)\n    .description('List of vault type IDs.')\n    .prop('code', S.string())\n    .description('Code of the vault type that must match.')\n    .prop('code:ct', S.string())\n    .description('Code of the vault type that must be contained.')\n    .extend(sPageSearchQuery(VAULT_TYPE_FIELDS, VAULT_TYPE_SORT_FIELDS))\n}\n\nexport interface VaultTypesClient {\n  search: (params?: VaultTypesSearchQuery) => Promise<Page<VaultType>>\n  list: (params?: VaultTypesSearchQuery) => Promise<VaultType[]>\n  findOne: (params?: VaultTypesSearchQuery) => Promise<VaultType | undefined>\n  create: (body: VaultTypeData) => Promise<VaultType>\n}\n\nexport enum VaultTypeRoutes {\n  v1Create = `v1/${VAULT_TYPES_ROUTES_KEY}`,\n  v1Delete = `v1/${VAULT_TYPES_ROUTES_KEY}/:typeId`,\n  v1Read = `v1/${VAULT_TYPES_ROUTES_KEY}/:typeId`,\n  v1Update = `v1/${VAULT_TYPES_ROUTES_KEY}/:typeId`,\n  v1Search = `v1/${VAULT_TYPES_ROUTES_KEY}`,\n}\n"],"names":["S","VAULT_TYPES_ROUTES_KEY","sClientEntity","sLocales","sPageSearchQuery","sVaultType","isPartial","object","id","additionalProperties","extend","sVaultTypeData","prop","string","required","VaultTypeErrorCodes","VAULT_TYPE_FIELDS","VAULT_TYPE_SORT_FIELDS","sVaultTypesSearchSchema","description","VaultTypeRoutes"],"mappings":"AAAA,OAAOA,OAAO,qBAAoB;AAClC,SAASC,sBAAsB,QAAQ,qBAAoB;AAC3D,SAASC,aAAa,EAAEC,QAAQ,EAAEC,gBAAgB,QAAQ,UAAS;AAQnE,OAAO,SAASC,WAAWC,SAAmB;IAC5C,OAAON,EAAEO,MAAM,GACZC,EAAE,CAAC,cACHC,oBAAoB,CAAC,OACrBC,MAAM,CAACR,cAAcI,YACrBI,MAAM,CAACC,eAAeL;AAC3B;AAQA,OAAO,SAASK,eAAeL,SAAmB;IAChD,OAAON,EAAEO,MAAM,GACZE,oBAAoB,CAAC,OACrBG,IAAI,CAAC,QAAQZ,EAAEa,MAAM,IACrBD,IAAI,CAAC,QAAQT,YACbS,IAAI,CAAC,eAAeT,YACpBW,QAAQ,CAACR,YAAY,EAAE,GAAG;QAAC;QAAQ;KAAO;AAC/C;;UAEYS;;;;;GAAAA,wBAAAA;AAiBZ,OAAO,MAAMC,oBAAoB;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD,CAAA;AAED,OAAO,MAAMC,yBAAyB;IAAC;CAAO,CAAA;AAQ9C,eAAe;AACf,OAAO,SAASC;IACd,OAAOlB,EAAEO,MAAM,GACZE,oBAAoB,CAAC,OACrBU,WAAW,CAAC,2BACZP,IAAI,CAAC,QAAQZ,EAAEa,MAAM,IACrBM,WAAW,CAAC,2CACZP,IAAI,CAAC,WAAWZ,EAAEa,MAAM,IACxBM,WAAW,CAAC,kDACZT,MAAM,CAACN,iBAAiBY,mBAAmBC;AAChD;;UASYG;kDACC,CAAC,GAAG,EAAEnB,uBAAuB,CAAC;kDAC9B,CAAC,GAAG,EAAEA,uBAAuB,QAAQ,CAAC;gDACxC,CAAC,GAAG,EAAEA,uBAAuB,QAAQ,CAAC;kDACpC,CAAC,GAAG,EAAEA,uBAAuB,QAAQ,CAAC;kDACtC,CAAC,GAAG,EAAEA,uBAAuB,CAAC;GAL/BmB,oBAAAA"}