{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/vault-epochs/vault-epoch.mock.ts"],"sourcesContent":["import { BlockMock, DeepPartial } from '../core'\nimport { VaultTvlMock } from '../vault-blocks'\nimport { WEB3_DEFAULT_ADDR } from '../web3-client'\nimport {\n  VaultEpoch,\n  VaultEpochAPRs,\n  VaultEpochQueue,\n  VaultEpochInstantWithdraws,\n  VaultEpochWithdraws,\n  VaultCdoEpochData,\n  VaultEpochAPYs,\n} from './vault-epoch.model'\n\n/**\n * Vault Epoch Mock\n */\nexport function VaultEpochMock(options?: DeepPartial<VaultEpoch>): VaultEpoch {\n  const now = new Date().toISOString()\n\n  return {\n    _id: options?._id || 'VAULT_EPOCH_ID',\n\n    block: BlockMock(options?.block),\n    vaultId: options?.vaultId || 'VAULT_ID',\n    vaultAddress: options?.vaultAddress || WEB3_DEFAULT_ADDR,\n\n    APRs: VaultEpochAPRsMock(options?.APRs),\n    APYs: VaultEpochAPYsMock(options?.APYs),\n\n    totalSupply: options?.totalSupply || '0',\n    price: options?.price || '0',\n    TVL: VaultTvlMock(options?.TVL),\n\n    expectedInterest: options?.expectedInterest || '0',\n    deposits: options?.deposits || '0',\n    duration: options?.duration || 0,\n    bufferDuration: options?.bufferDuration || 0,\n    unclaimedFees: options?.unclaimedFees || '0',\n\n    startDate: options?.startDate,\n    endDate: options?.endDate,\n    count: options?.count || 0,\n    status: options?.status || 'WAITING',\n    depositQueue: VaultCdoEpochDepositQueueMock(options?.depositQueue),\n\n    withdrawType: options?.withdrawType || 'STANDARD',\n\n    withdraws: options?.withdraws\n      ? VaultEpochWithdrawsMock(options.withdraws)\n      : undefined,\n    instantWithdraws: options?.instantWithdraws\n      ? VaultEpochInstantWithdrawsMock(options.instantWithdraws)\n      : undefined,\n\n    createdAt: options?.createdAt || now,\n    createdBy: options?.createdBy || 'USER_ID',\n    updatedAt: options?.updatedAt || now,\n    updatedBy: options?.updatedBy || 'USER_ID',\n  }\n}\n\nexport function VaultCdoEpochDepositQueueMock(\n  options?: Partial<VaultEpochQueue>\n): VaultEpochQueue {\n  return {\n    status: options?.status || 'PENDING',\n    amount: options?.amount || '0',\n  }\n}\n\nexport function VaultEpochAPRsMock(\n  options?: Partial<VaultEpochAPRs>\n): VaultEpochAPRs {\n  return {\n    NET: options?.NET || 0,\n    DELTA: options?.DELTA || 0,\n    GROSS: options?.GROSS || 0,\n    EPOCH: options?.EPOCH || 0,\n    BUFFER: options?.BUFFER || 0,\n    CURE: options?.CURE || 0,\n  }\n}\n\nexport function VaultEpochAPYsMock(\n  options?: Partial<VaultEpochAPYs>\n): VaultEpochAPYs {\n  return {\n    NET: options?.NET || 0,\n    GROSS: options?.GROSS || 0,\n    FEE: options?.FEE || 0,\n  }\n}\n\nexport function VaultEpochWithdrawsMock(\n  options?: Partial<VaultEpochWithdraws>\n): VaultEpochWithdraws {\n  return {\n    amount: options?.amount || '0',\n    fees: options?.fees || '0',\n  }\n}\n\nexport function VaultEpochInstantWithdrawsMock(\n  options?: Partial<VaultEpochInstantWithdraws>\n): VaultEpochInstantWithdraws {\n  return {\n    amount: options?.amount || '0',\n    delay: options?.delay || 0,\n    aprDelta: options?.aprDelta || 0,\n    allowed: options?.allowed ?? true,\n    deadline: options?.deadline,\n  }\n}\n\nexport function VaultCdoEpochDataMock(\n  options?: Partial<VaultCdoEpochData>\n): VaultCdoEpochData {\n  return {\n    epoch: VaultEpochMock(options?.epoch),\n    lastEpoch: VaultEpochMock(options?.lastEpoch),\n    withdrawAmount: options?.withdrawAmount || '0',\n    withdrawDeadline: options?.withdrawDeadline || new Date(),\n    instantWithdrawed: !!options?.instantWithdrawed,\n    interests: options?.interests || '0',\n    duration: options?.duration || 0,\n    durationSeconds: options?.durationSeconds || 0,\n    unit: options?.unit || 'seconds',\n    APRs: VaultEpochAPRsMock(options?.APRs),\n    feePercentage: options?.feePercentage || 0,\n    toWithdraw: options?.toWithdraw || '0',\n    isDefaultable: !!options?.isDefaultable,\n  }\n}\n"],"names":["BlockMock","VaultTvlMock","WEB3_DEFAULT_ADDR","VaultEpochMock","options","now","Date","toISOString","_id","block","vaultId","vaultAddress","APRs","VaultEpochAPRsMock","APYs","VaultEpochAPYsMock","totalSupply","price","TVL","expectedInterest","deposits","duration","bufferDuration","unclaimedFees","startDate","endDate","count","status","depositQueue","VaultCdoEpochDepositQueueMock","withdrawType","withdraws","VaultEpochWithdrawsMock","undefined","instantWithdraws","VaultEpochInstantWithdrawsMock","createdAt","createdBy","updatedAt","updatedBy","amount","NET","DELTA","GROSS","EPOCH","BUFFER","CURE","FEE","fees","delay","aprDelta","allowed","deadline","VaultCdoEpochDataMock","epoch","lastEpoch","withdrawAmount","withdrawDeadline","instantWithdrawed","interests","durationSeconds","unit","feePercentage","toWithdraw","isDefaultable"],"mappings":"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"}