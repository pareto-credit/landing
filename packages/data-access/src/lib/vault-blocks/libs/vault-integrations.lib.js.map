{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/vault-blocks/libs/vault-integrations.lib.ts"],"sourcesContent":["import { BNify } from '../../core'\nimport { IntegrationClient } from '../../integrations/integrations-client.lib'\nimport { VaultIntegration, VaultIntegrationsData } from '../../vaults'\nimport { VaultContractCdoData } from '../vault-block.model'\n\nexport interface VaultIntegrationOptions {\n  chainId?: number\n  tokenSymbol?: string\n  vaultType?: string\n  cdoData?: VaultContractCdoData\n}\n\n/**\n * Get vault integrations data\n * @param integrations vault integrations\n * @returns vault integrations data\n */\nexport async function getVaultIntegrationsData(\n  integrations: VaultIntegration[],\n  options?: VaultIntegrationOptions\n): Promise<VaultIntegrationsData> {\n  const { tokenSymbol, vaultType, cdoData } = options || {}\n\n  const integrationsData: VaultIntegrationsData = {}\n\n  for (const integration of integrations) {\n    if (!tokenSymbol) {\n      throw new Error(\n        `Integration Error: TokenSymbol required but not specified (provider: ${integration.provider}, type: ${integration.type})`\n      )\n    }\n\n    const client = new IntegrationClient(integration.provider)\n    if (!client) continue\n\n    switch (integration.type) {\n      case 'APR':\n        {\n          if (!vaultType) {\n            throw new Error(\n              `Integration Error: vaultType not specified (provider: ${integration.provider}, type: ${integration.type})`\n            )\n          }\n\n          const APR = await client.getApr(tokenSymbol)\n\n          // Get splitted APR for tranches\n          if (['AA', 'BB'].includes(vaultType)) {\n            if (!cdoData?.currentAARatio || !cdoData?.APRSplitRatio) {\n              throw new Error(\n                `Integration Error: Missing or empty cdoData (provider: ${integration.provider}, type: ${integration.type})`\n              )\n            }\n            integrationsData.APR = getTrancheApr(APR, vaultType, cdoData)\n          } else {\n            integrationsData.APR = APR\n          }\n        }\n        break\n    }\n  }\n  return integrationsData\n}\n\n/**\n * Get tranche APR depending on tranche split ratio\n * @param strategyApr base strategy APR\n * @param trancheType AA | BB\n * @param cdoData cdo data from contract\n * @returns tranche APR\n */\nexport function getTrancheApr(\n  strategyApr: number,\n  trancheType: string,\n  cdoData: VaultContractCdoData\n): number {\n  const { currentAARatio, APRSplitRatio } = cdoData\n  if (!currentAARatio || !APRSplitRatio) {\n    return 0\n  }\n\n  const FULL_ALLOC = BNify(100000)\n  const isAATranche = trancheType === 'AA'\n\n  if (BNify(currentAARatio).eq(0)) {\n    return isAATranche ? 0 : strategyApr\n  }\n\n  if (BNify(strategyApr).isNaN()) {\n    return 0\n  }\n\n  const apr = isAATranche\n    ? BNify(strategyApr).times(APRSplitRatio).div(currentAARatio)\n    : BNify(strategyApr)\n        .times(FULL_ALLOC.minus(APRSplitRatio))\n        .div(BNify(FULL_ALLOC).minus(currentAARatio))\n  return apr.toNumber()\n}\n"],"names":["BNify","IntegrationClient","getVaultIntegrationsData","integrations","options","tokenSymbol","vaultType","cdoData","integrationsData","integration","Error","provider","type","client","APR","getApr","includes","currentAARatio","APRSplitRatio","getTrancheApr","strategyApr","trancheType","FULL_ALLOC","isAATranche","eq","isNaN","apr","times","div","minus","toNumber"],"mappings":"AAAA,SAASA,KAAK,QAAQ,aAAY;AAClC,SAASC,iBAAiB,QAAQ,6CAA4C;AAW9E;;;;CAIC,GACD,OAAO,eAAeC,yBACpBC,YAAgC,EAChCC,OAAiC;IAEjC,MAAM,EAAEC,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAE,GAAGH,WAAW,CAAC;IAExD,MAAMI,mBAA0C,CAAC;IAEjD,KAAK,MAAMC,eAAeN,aAAc;QACtC,IAAI,CAACE,aAAa;YAChB,MAAM,IAAIK,MACR,CAAC,qEAAqE,EAAED,YAAYE,QAAQ,CAAC,QAAQ,EAAEF,YAAYG,IAAI,CAAC,CAAC,CAAC;QAE9H;QAEA,MAAMC,SAAS,IAAIZ,kBAAkBQ,YAAYE,QAAQ;QACzD,IAAI,CAACE,QAAQ;QAEb,OAAQJ,YAAYG,IAAI;YACtB,KAAK;gBACH;oBACE,IAAI,CAACN,WAAW;wBACd,MAAM,IAAII,MACR,CAAC,sDAAsD,EAAED,YAAYE,QAAQ,CAAC,QAAQ,EAAEF,YAAYG,IAAI,CAAC,CAAC,CAAC;oBAE/G;oBAEA,MAAME,MAAM,MAAMD,OAAOE,MAAM,CAACV;oBAEhC,gCAAgC;oBAChC,IAAI;wBAAC;wBAAM;qBAAK,CAACW,QAAQ,CAACV,YAAY;wBACpC,IAAI,EAACC,2BAAAA,QAASU,cAAc,KAAI,EAACV,2BAAAA,QAASW,aAAa,GAAE;4BACvD,MAAM,IAAIR,MACR,CAAC,uDAAuD,EAAED,YAAYE,QAAQ,CAAC,QAAQ,EAAEF,YAAYG,IAAI,CAAC,CAAC,CAAC;wBAEhH;wBACAJ,iBAAiBM,GAAG,GAAGK,cAAcL,KAAKR,WAAWC;oBACvD,OAAO;wBACLC,iBAAiBM,GAAG,GAAGA;oBACzB;gBACF;gBACA;QACJ;IACF;IACA,OAAON;AACT;AAEA;;;;;;CAMC,GACD,OAAO,SAASW,cACdC,WAAmB,EACnBC,WAAmB,EACnBd,OAA6B;IAE7B,MAAM,EAAEU,cAAc,EAAEC,aAAa,EAAE,GAAGX;IAC1C,IAAI,CAACU,kBAAkB,CAACC,eAAe;QACrC,OAAO;IACT;IAEA,MAAMI,aAAatB,MAAM;IACzB,MAAMuB,cAAcF,gBAAgB;IAEpC,IAAIrB,MAAMiB,gBAAgBO,EAAE,CAAC,IAAI;QAC/B,OAAOD,cAAc,IAAIH;IAC3B;IAEA,IAAIpB,MAAMoB,aAAaK,KAAK,IAAI;QAC9B,OAAO;IACT;IAEA,MAAMC,MAAMH,cACRvB,MAAMoB,aAAaO,KAAK,CAACT,eAAeU,GAAG,CAACX,kBAC5CjB,MAAMoB,aACHO,KAAK,CAACL,WAAWO,KAAK,CAACX,gBACvBU,GAAG,CAAC5B,MAAMsB,YAAYO,KAAK,CAACZ;IACnC,OAAOS,IAAII,QAAQ;AACrB"}