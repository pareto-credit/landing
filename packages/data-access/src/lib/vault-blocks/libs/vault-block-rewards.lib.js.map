{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/vault-blocks/libs/vault-block-rewards.lib.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport { BNFixed, BNify, compLower, iBigInt } from '../../core'\nimport {\n  VaultContractData,\n  VaultContractTokenData,\n  VaultContractType,\n  VaultRewardProgram,\n  VaultRewardProgramFrequency,\n} from '../../vaults'\nimport {\n  RewardToken,\n  VaultBlockAPRs,\n  VaultBlockRewardProgram,\n} from '../vault-block.model'\nimport { compoundVaultApr } from './vault-block.lib'\n\n/**\n * Get distribution frequency in days\n * @param frequency frequency params\n * @returns distribution frequency in days\n */\nexport function getDistributionFrequencyInDays(\n  frequency: VaultRewardProgramFrequency\n): number {\n  switch (frequency.unit) {\n    case 'D':\n      return frequency.value\n    case 'W':\n      return frequency.value * 7\n    case 'M':\n      return frequency.value * 30\n    case 'Y':\n      return frequency.value * 365\n    default:\n      throw new Error(`Unsupported frequency unit: ${frequency.unit}`)\n  }\n}\n\n/**\n * Get reward program AMOUNT\n * @param rewardProgram reward program\n * @param options tvl and tokenPrice\n * @returns reward program AMOUNT data\n */\nexport function calculateRewardProgramAmount(\n  rewardProgram: VaultRewardProgram,\n  options?: {\n    tvlUSD?: iBigInt\n    tokenPrice?: iBigInt\n  }\n) {\n  const { tokenPrice, tvlUSD } = options || {}\n  const tokenPriceUSD = BNify(tokenPrice || '1000000')\n  const distributionInDays = getDistributionFrequencyInDays(\n    rewardProgram.distributionFrequency\n  )\n  const distributionPeriod = BNify(365).div(distributionInDays)\n\n  if (BNify(tvlUSD).lte(0)) {\n    return {\n      APR: 0,\n    }\n  }\n\n  const USD = BNify(rewardProgram.distributionValue)\n    .times(tokenPriceUSD)\n    .times(distributionPeriod)\n\n  const APR = Number(BNFixed(USD.div(BNify(tvlUSD)).times(100), 8))\n\n  return {\n    APR,\n    USD: BNFixed(USD),\n  }\n}\n\n/**\n * Get reward program TARGET_APY\n * @param rewardProgram reward program\n * @param APRs vault interest rates\n * @returns reward program TARGET_APY data\n */\nexport function calculateRewardProgramTargetApy(\n  rewardProgram: VaultRewardProgram,\n  baseAPY: number\n) {\n  const APR = Number(\n    BNFixed(\n      BigNumber.maximum(\n        0,\n        BNify(rewardProgram.distributionValue).minus(BNify(baseAPY))\n      ),\n      8\n    )\n  )\n  return {\n    APR,\n  }\n}\n\n/**\n * Get Reward program APR\n * @param APRs Vault block APRs\n * @param rewardProgram reward program object\n * @returns Reward program APR\n */\nexport function makeVaultBlockRewardProgram(\n  rewardProgram: VaultRewardProgram,\n  APRs: VaultBlockAPRs,\n  options?: {\n    tvlUSD?: iBigInt\n    tokenPrice?: iBigInt\n    feePercentage?: number\n    vaultContractType?: VaultContractType\n    epochDuration?: number\n  }\n): {\n  APR: number\n  USD?: iBigInt\n} {\n  // Return 0 if reward program is not active\n  if (!rewardProgram.isActive) {\n    return {\n      APR: 0,\n    }\n  }\n\n  switch (rewardProgram.distributionType) {\n    // Calculate APR by annualized distributed tokens\n    case 'AMOUNT':\n      return calculateRewardProgramAmount(rewardProgram, options)\n    // Target APR - Base APR\n    case 'TARGET_APY': {\n      const { vaultContractType, epochDuration, feePercentage } = options || {}\n      if (!vaultContractType) {\n        throw Error(\n          `VaultContractType not specified for TARGET_APY calculation`\n        )\n      }\n      // Calculate NET APR\n      const netAPR = Number(\n        BNify(APRs.BASE).times(BNify(1).minus(BNify(feePercentage).div(1e5)))\n      )\n      const netAPY = compoundVaultApr(\n        vaultContractType,\n        'BASE',\n        netAPR,\n        epochDuration\n      )\n      return calculateRewardProgramTargetApy(rewardProgram, netAPY)\n    }\n  }\n}\n\n/**\n * Get vault cumulative reward programs APR\n * @param vault vault entity\n * @param vaultData vault contract data\n * @param APRs APRs\n * @param tvlUSD TVL USD\n * @param rewardTokens reward tokens entities\n * @returns cumulative vault reward programs APR\n */\nexport function getVaultRewardProgramsApr(\n  vaultData: VaultContractData,\n  APRs: VaultBlockAPRs,\n  options: {\n    tvlUSD?: iBigInt\n    feePercentage?: number\n    rewardTokens?: RewardToken[]\n    rewardPrograms?: VaultRewardProgram[]\n    vaultContractType?: VaultContractType\n  } = {}\n): number {\n  const vaultBlockRewardPrograms = getVaultBlockRewardPrograms(\n    vaultData,\n    APRs,\n    options\n  )\n  if (!vaultBlockRewardPrograms) {\n    return 0\n  }\n\n  return vaultBlockRewardPrograms?.reduce((acc: number, rewardProgram) => {\n    return BNify(acc).plus(rewardProgram.APR).toNumber()\n  }, 0)\n}\n\n/**\n * Get APRs for each reward program\n * @param vault vault entity\n * @param vaultData vault contract data\n * @param APRs vault APRs\n * @param options system options\n * @returns APR for each reward program\n */\nexport function getVaultBlockRewardPrograms(\n  vaultData: VaultContractData,\n  APRs: VaultBlockAPRs,\n  options: {\n    tvlUSD?: iBigInt\n    feePercentage?: number\n    rewardTokens?: RewardToken[]\n    rewardPrograms?: VaultRewardProgram[]\n    vaultContractType?: VaultContractType\n  } = {}\n): VaultBlockRewardProgram[] | undefined {\n  const { rewardPrograms } = options\n\n  if (!rewardPrograms?.length) {\n    return\n  }\n\n  const epochDuration = vaultData.cdoEpoch?.duration\n\n  // Get vault block reward programs\n  return rewardPrograms.map(\n    (rewardProgram) =>\n      getVaultBlockRewardProgram(rewardProgram, APRs, {\n        ...options,\n        tokens: vaultData.tokens,\n        epochDuration,\n      }),\n    []\n  )\n}\n\n/**\n * Get vault block reward program\n * @param rewardProgram vault reward program\n * @param APRs vault APRs\n * @param options tvl, reward tokens entities, tokens contract data\n * @returns vault block reward program\n */\nexport function getVaultBlockRewardProgram(\n  rewardProgram: VaultRewardProgram,\n  APRs: VaultBlockAPRs,\n  options?: {\n    tvlUSD?: iBigInt\n    feePercentage?: number\n    rewardTokens?: RewardToken[]\n    tokens?: VaultContractTokenData[]\n    vaultContractType?: VaultContractType\n    epochDuration?: number\n  }\n): VaultBlockRewardProgram {\n  const {\n    tokens,\n    tvlUSD,\n    rewardTokens,\n    vaultContractType,\n    epochDuration,\n    feePercentage,\n  } = options || {}\n\n  const token = rewardTokens?.find(\n    (token) => token._id === rewardProgram.tokenId\n  )\n\n  // Throw error if no token found for this program\n  if (!token) {\n    throw Error(\n      `Token not found for reward program (tokenId: ${rewardProgram.tokenId})`\n    )\n  }\n\n  const tokenData = tokens?.find((t) => compLower(t.address, token.address))\n\n  const rewardProgramData = makeVaultBlockRewardProgram(rewardProgram, APRs, {\n    tvlUSD,\n    tokenPrice: tokenData?.price,\n    vaultContractType,\n    epochDuration,\n    feePercentage,\n  })\n\n  return {\n    tokenId: rewardProgram.tokenId,\n    ...rewardProgramData,\n  }\n}\n"],"names":["BigNumber","BNFixed","BNify","compLower","compoundVaultApr","getDistributionFrequencyInDays","frequency","unit","value","Error","calculateRewardProgramAmount","rewardProgram","options","tokenPrice","tvlUSD","tokenPriceUSD","distributionInDays","distributionFrequency","distributionPeriod","div","lte","APR","USD","distributionValue","times","Number","calculateRewardProgramTargetApy","baseAPY","maximum","minus","makeVaultBlockRewardProgram","APRs","isActive","distributionType","vaultContractType","epochDuration","feePercentage","netAPR","BASE","netAPY","getVaultRewardProgramsApr","vaultData","vaultBlockRewardPrograms","getVaultBlockRewardPrograms","reduce","acc","plus","toNumber","rewardPrograms","length","cdoEpoch","duration","map","getVaultBlockRewardProgram","tokens","rewardTokens","token","find","_id","tokenId","tokenData","t","address","rewardProgramData","price"],"mappings":"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"}