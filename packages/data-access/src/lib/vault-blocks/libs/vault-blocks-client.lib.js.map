{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/vault-blocks/libs/vault-blocks-client.lib.ts"],"sourcesContent":["import { Axios } from 'axios'\nimport {\n  VaultBlockData,\n  VaultBlockRoutes,\n  VaultBlocksClient,\n  VaultBlocksSearchQuery,\n} from '../vault-block.model'\nimport { uriFy } from '../../core'\nimport { stringify } from '../../core/utility.lib'\n\n/**\n * Create vaults client\n * @param axios - The Axios instance\n * @returns the vaults GOT client\n */\nexport function createVaultBlocksClient(axios: Axios): VaultBlocksClient {\n  return {\n    // Create new Vault\n    create: (body: VaultBlockData) =>\n      axios\n        .request({\n          url: VaultBlockRoutes.v1Create,\n          method: 'POST',\n          data: stringify(body),\n        })\n        .then((response) => response.data),\n    search: (searchParams?: VaultBlocksSearchQuery) =>\n      axios\n        .request({\n          url: VaultBlockRoutes.v1Search,\n          method: 'GET',\n          params: searchParams\n            ? new URLSearchParams(uriFy(searchParams))\n            : undefined,\n        })\n        .then((response) => response.data),\n    list: (searchParams?: VaultBlocksSearchQuery) =>\n      axios\n        .request({\n          url: VaultBlockRoutes.v1Search,\n          method: 'GET',\n          params: searchParams\n            ? new URLSearchParams(uriFy(searchParams))\n            : undefined,\n        })\n        .then((response) => {\n          const page = response.data\n          return page.data\n        }),\n    findOne: (searchParams?: VaultBlocksSearchQuery) =>\n      axios\n        .request({\n          url: VaultBlockRoutes.v1Search,\n          method: 'GET',\n          params: searchParams\n            ? new URLSearchParams(uriFy(searchParams))\n            : undefined,\n        })\n        .then((response) => {\n          const page = response.data\n          return page.data ? page.data[0] : undefined\n        }),\n    readOne: (searchParams: VaultBlocksSearchQuery) =>\n      axios\n        .request({\n          url: VaultBlockRoutes.v1Search,\n          method: 'GET',\n          params: new URLSearchParams(uriFy(searchParams)),\n        })\n        .then((response) => {\n          const { data } = response.data\n\n          if (!data.length) {\n            throw Error('Not found')\n          }\n\n          return data[0]\n        }),\n  }\n}\n"],"names":["VaultBlockRoutes","uriFy","stringify","createVaultBlocksClient","axios","create","body","request","url","v1Create","method","data","then","response","search","searchParams","v1Search","params","URLSearchParams","undefined","list","page","findOne","readOne","length","Error"],"mappings":"AACA,SAEEA,gBAAgB,QAGX,uBAAsB;AAC7B,SAASC,KAAK,QAAQ,aAAY;AAClC,SAASC,SAAS,QAAQ,yBAAwB;AAElD;;;;CAIC,GACD,OAAO,SAASC,wBAAwBC,KAAY;IAClD,OAAO;QACL,mBAAmB;QACnBC,QAAQ,CAACC,OACPF,MACGG,OAAO,CAAC;gBACPC,KAAKR,iBAAiBS,QAAQ;gBAC9BC,QAAQ;gBACRC,MAAMT,UAAUI;YAClB,GACCM,IAAI,CAAC,CAACC,WAAaA,SAASF,IAAI;QACrCG,QAAQ,CAACC,eACPX,MACGG,OAAO,CAAC;gBACPC,KAAKR,iBAAiBgB,QAAQ;gBAC9BN,QAAQ;gBACRO,QAAQF,eACJ,IAAIG,gBAAgBjB,MAAMc,iBAC1BI;YACN,GACCP,IAAI,CAAC,CAACC,WAAaA,SAASF,IAAI;QACrCS,MAAM,CAACL,eACLX,MACGG,OAAO,CAAC;gBACPC,KAAKR,iBAAiBgB,QAAQ;gBAC9BN,QAAQ;gBACRO,QAAQF,eACJ,IAAIG,gBAAgBjB,MAAMc,iBAC1BI;YACN,GACCP,IAAI,CAAC,CAACC;gBACL,MAAMQ,OAAOR,SAASF,IAAI;gBAC1B,OAAOU,KAAKV,IAAI;YAClB;QACJW,SAAS,CAACP,eACRX,MACGG,OAAO,CAAC;gBACPC,KAAKR,iBAAiBgB,QAAQ;gBAC9BN,QAAQ;gBACRO,QAAQF,eACJ,IAAIG,gBAAgBjB,MAAMc,iBAC1BI;YACN,GACCP,IAAI,CAAC,CAACC;gBACL,MAAMQ,OAAOR,SAASF,IAAI;gBAC1B,OAAOU,KAAKV,IAAI,GAAGU,KAAKV,IAAI,CAAC,EAAE,GAAGQ;YACpC;QACJI,SAAS,CAACR,eACRX,MACGG,OAAO,CAAC;gBACPC,KAAKR,iBAAiBgB,QAAQ;gBAC9BN,QAAQ;gBACRO,QAAQ,IAAIC,gBAAgBjB,MAAMc;YACpC,GACCH,IAAI,CAAC,CAACC;gBACL,MAAM,EAAEF,IAAI,EAAE,GAAGE,SAASF,IAAI;gBAE9B,IAAI,CAACA,KAAKa,MAAM,EAAE;oBAChB,MAAMC,MAAM;gBACd;gBAEA,OAAOd,IAAI,CAAC,EAAE;YAChB;IACN;AACF"}