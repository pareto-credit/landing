{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/vault-blocks/libs/vault-requests.lib.ts"],"sourcesContent":["import moment from 'moment'\nimport { VaultBlock, VaultBlockRequest } from '../vault-block.model'\n\n/**\n * Get vault request processing date\n *\n * REDEEM -> normal withdraw (netting withdraw)\n * * isCurrentRequest = cdoEpoch.status === 'WAITING' && request.requestedOn > cdoEpoch.endDate\n * isCurrentRequest -> cdoEpoch.endDate + buffer + duration\n * !isCurrentRequest -> cdoEpoch.endDate\n *\n * DEPOSIT -> queue deposit request\n * * isCurrentRequest = cdoEpoch.status === 'RUNNING' && request.requestedOn < cdoEpoch.endDate\n * isCurrentRequest -> cdoEpoch.endDate\n * !isCurrentRequest -> cdoEpoch.startDate\n *\n * WITHDRAW -> queue withdraw (running normal withdraw)\n * * isCurrentRequest = cdoEpoch.status === 'RUNNING' && request.requestedOn < cdoEpoch.endDate\n * isCurrentRequest -> cdoEpoch.endDate + bufferDuration + duration\n * !isCurrentRequest -> cdoEpoch.endDate\n *\n * INSTANT_WITHDRAW -> queue withdraw (running instant withdraw)\n * * isCurrentRequest = cdoEpoch.status === 'RUNNING' && request.requestedOn < cdoEpoch.endDate\n * isCurrentRequest -> cdoEpoch.endDate + bufferDuration + instantWithdrawDuration\n * !isCurrentRequest -> cdoEpoch.startDate + instantWithdrawDuration\n *\n * @param block - the vault block\n * @param request - the vault block request\n * @returns the request processing date\n */\nexport function getVaultRequestProcessingDate(\n  block: VaultBlock,\n  request: VaultBlockRequest\n): string | undefined {\n  const { cdoEpoch } = block\n\n  if (!cdoEpoch) {\n    return\n  }\n\n  const {\n    duration,\n    bufferDuration,\n    instantWithdraws,\n    startDate,\n    endDate,\n    status,\n  } = cdoEpoch\n\n  switch (request.type) {\n    /**\n     * REDEEM -> normal withdraw (netting withdraw)\n     * * isCurrentRequest = cdoEpoch.status === 'WAITING' && request.requestedOn > cdoEpoch.endDate\n     * isCurrentRequest -> cdoEpoch.endDate + buffer + duration\n     * !isCurrentRequest -> cdoEpoch.endDate\n     */\n    case 'REDEEM': {\n      const isCurrentRequest =\n        status === 'WAITING' &&\n        moment(request.requestedOn).isAfter(moment(endDate))\n\n      return isCurrentRequest\n        ? moment(endDate)\n            .add(duration, 's')\n            .add(bufferDuration, 's')\n            .toISOString()\n        : endDate\n    }\n\n    /**\n     * DEPOSIT -> queue deposit request\n     * * isCurrentRequest = cdoEpoch.status === 'RUNNING' && request.requestedOn < cdoEpoch.endDate\n     * isCurrentRequest -> cdoEpoch.endDate\n     * !isCurrentRequest -> cdoEpoch.startDate\n     */\n    case 'DEPOSIT': {\n      const isCurrentRequest =\n        status === 'RUNNING' &&\n        moment(request.requestedOn).isBefore(moment(endDate))\n\n      return isCurrentRequest ? endDate : startDate\n    }\n\n    /**\n     * WITHDRAW -> queue withdraw (running normal withdraw)\n     * * isCurrentRequest = cdoEpoch.status === 'RUNNING' && request.requestedOn < cdoEpoch.endDate\n     * isCurrentRequest -> cdoEpoch.endDate + bufferDuration + duration\n     * !isCurrentRequest -> cdoEpoch.endDate\n     *\n     * INSTANT_WITHDRAW -> queue withdraw (running instant withdraw)\n     * * isCurrentRequest = cdoEpoch.status === 'RUNNING' && request.requestedOn < cdoEpoch.endDate\n     * isCurrentRequest -> cdoEpoch.endDate + bufferDuration + instantWithdrawDuration\n     * !isCurrentRequest -> cdoEpoch.startDate + instantWithdrawDuration\n     */\n\n    case 'WITHDRAW': {\n      const isCurrentRequest =\n        status === 'RUNNING' &&\n        moment(request.requestedOn).isAfter(moment(startDate))\n\n      /**\n       * INSTANT WITHDRAW\n       */\n      if (request.isInstant) {\n        const withdrawDelay = instantWithdraws?.delay\n\n        return isCurrentRequest\n          ? moment(endDate)\n              .add(withdrawDelay, 's')\n              .add(bufferDuration, 's')\n              .toISOString()\n          : moment(startDate).add(withdrawDelay, 's').toISOString()\n      }\n\n      return isCurrentRequest\n        ? moment(endDate)\n            .add(duration, 's')\n            .add(bufferDuration, 's')\n            .toISOString()\n        : endDate\n    }\n  }\n}\n"],"names":["moment","getVaultRequestProcessingDate","block","request","cdoEpoch","duration","bufferDuration","instantWithdraws","startDate","endDate","status","type","isCurrentRequest","requestedOn","isAfter","add","toISOString","isBefore","isInstant","withdrawDelay","delay"],"mappings":"AAAA,OAAOA,YAAY,SAAQ;AAG3B;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BC,GACD,OAAO,SAASC,8BACdC,KAAiB,EACjBC,OAA0B;IAE1B,MAAM,EAAEC,QAAQ,EAAE,GAAGF;IAErB,IAAI,CAACE,UAAU;QACb;IACF;IAEA,MAAM,EACJC,QAAQ,EACRC,cAAc,EACdC,gBAAgB,EAChBC,SAAS,EACTC,OAAO,EACPC,MAAM,EACP,GAAGN;IAEJ,OAAQD,QAAQQ,IAAI;QAClB;;;;;KAKC,GACD,KAAK;YAAU;gBACb,MAAMC,mBACJF,WAAW,aACXV,OAAOG,QAAQU,WAAW,EAAEC,OAAO,CAACd,OAAOS;gBAE7C,OAAOG,mBACHZ,OAAOS,SACJM,GAAG,CAACV,UAAU,KACdU,GAAG,CAACT,gBAAgB,KACpBU,WAAW,KACdP;YACN;QAEA;;;;;KAKC,GACD,KAAK;YAAW;gBACd,MAAMG,mBACJF,WAAW,aACXV,OAAOG,QAAQU,WAAW,EAAEI,QAAQ,CAACjB,OAAOS;gBAE9C,OAAOG,mBAAmBH,UAAUD;YACtC;QAEA;;;;;;;;;;KAUC,GAED,KAAK;YAAY;gBACf,MAAMI,mBACJF,WAAW,aACXV,OAAOG,QAAQU,WAAW,EAAEC,OAAO,CAACd,OAAOQ;gBAE7C;;OAEC,GACD,IAAIL,QAAQe,SAAS,EAAE;oBACrB,MAAMC,gBAAgBZ,oCAAAA,iBAAkBa,KAAK;oBAE7C,OAAOR,mBACHZ,OAAOS,SACJM,GAAG,CAACI,eAAe,KACnBJ,GAAG,CAACT,gBAAgB,KACpBU,WAAW,KACdhB,OAAOQ,WAAWO,GAAG,CAACI,eAAe,KAAKH,WAAW;gBAC3D;gBAEA,OAAOJ,mBACHZ,OAAOS,SACJM,GAAG,CAACV,UAAU,KACdU,GAAG,CAACT,gBAAgB,KACpBU,WAAW,KACdP;YACN;IACF;AACF"}