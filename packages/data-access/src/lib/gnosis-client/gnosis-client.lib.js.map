{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/gnosis-client/gnosis-client.lib.ts"],"sourcesContent":["import axios, { Axios, CreateAxiosDefaults } from 'axios'\nimport { GnosisClientModel, GnosisSafe } from './gnosis-client.model'\nimport {\n  GNOSIS_CLIENT_ENDPOINT,\n  GNOSIS_SAFE_ABI,\n  GNOSIS_SIGNATURE_VERIFICATION_CODE,\n} from './gnosis-client.const'\nimport { isAddress } from '../core'\nimport { hashMessage } from 'web3-eth-accounts'\nimport { Web3Clients } from '../web3-client'\n\n/**\n * API Client class\n */\nexport class GnosisClient implements GnosisClientModel {\n  // Private\n  private safeAddress: string | undefined\n\n  // Web3 instance\n  public web3: Web3Clients\n\n  // Axios instance\n  private axios: Axios\n\n  constructor(web3: Web3Clients, safeAddress?: string) {\n    this.web3 = web3\n    this.safeAddress = safeAddress\n    this.axios = this.initAxios()\n  }\n\n  /**\n   * Axios initialization\n   */\n  private initAxios() {\n    const options: CreateAxiosDefaults = {\n      baseURL: GNOSIS_CLIENT_ENDPOINT,\n      headers: {\n        'content-type': 'application/json',\n      },\n    }\n    return axios.create(options)\n  }\n\n  /**\n   * Get safe address to use\n   * @param safeAddress safe address\n   * @returns safe address\n   */\n  private getSafeAddress(safeAddress?: string) {\n    if (!safeAddress) {\n      safeAddress = this.safeAddress\n    }\n\n    if (!safeAddress || !isAddress(safeAddress)) {\n      throw Error(`Safe address malformed: ${safeAddress}`)\n    }\n\n    return safeAddress\n  }\n\n  /**\n   * Verify gnosis safe signature hash\n   * @param message message to sign\n   * @param hash signed message hash\n   * @param safeAddress safe address\n   * @returns true | false\n   */\n  public async verifySignature(\n    message: string,\n    hash: string,\n    safeAddress?: string\n  ): Promise<boolean> {\n    safeAddress = this.getSafeAddress(safeAddress)\n\n    // Check safe signature for each chain\n    const messageHash = hashMessage(message)\n    const chainIds = Object.keys(this.web3)\n    for await (const chainId of chainIds) {\n      const web3Client = this.web3[chainId]\n      const gnosisSafeContract = web3Client.initContract(\n        GNOSIS_SAFE_ABI,\n        safeAddress\n      )\n\n      try {\n        const signatureAddress: string = await gnosisSafeContract.methods[\n          'isValidSignature'\n        ](messageHash, hash).call({ from: safeAddress })\n        if (signatureAddress === GNOSIS_SIGNATURE_VERIFICATION_CODE) {\n          return true\n        }\n      } catch (err) {\n        continue\n      }\n    }\n    return false\n  }\n\n  /**\n   * Get gnosis safe info from APIs\n   * @param safeAddress safe address\n   * @returns Safe info if any\n   */\n  public async getSafe(safeAddress?: string): Promise<GnosisSafe | undefined> {\n    safeAddress = this.getSafeAddress(safeAddress)\n\n    const response = await this.axios.request({\n      url: safeAddress,\n      method: 'GET',\n      responseType: 'json',\n    })\n\n    return response?.data\n  }\n}\n"],"names":["axios","GNOSIS_CLIENT_ENDPOINT","GNOSIS_SAFE_ABI","GNOSIS_SIGNATURE_VERIFICATION_CODE","isAddress","hashMessage","GnosisClient","initAxios","options","baseURL","headers","create","getSafeAddress","safeAddress","Error","verifySignature","message","hash","messageHash","chainIds","Object","keys","web3","chainId","web3Client","gnosisSafeContract","initContract","signatureAddress","methods","call","from","err","getSafe","response","request","url","method","responseType","data","constructor"],"mappings":"AAAA,OAAOA,WAA2C,QAAO;AAEzD,SACEC,sBAAsB,EACtBC,eAAe,EACfC,kCAAkC,QAC7B,wBAAuB;AAC9B,SAASC,SAAS,QAAQ,UAAS;AACnC,SAASC,WAAW,QAAQ,oBAAmB;AAG/C;;CAEC,GACD,OAAO,MAAMC;IAgBX;;GAEC,GACD,AAAQC,YAAY;QAClB,MAAMC,UAA+B;YACnCC,SAASR;YACTS,SAAS;gBACP,gBAAgB;YAClB;QACF;QACA,OAAOV,MAAMW,MAAM,CAACH;IACtB;IAEA;;;;GAIC,GACD,AAAQI,eAAeC,WAAoB,EAAE;QAC3C,IAAI,CAACA,aAAa;YAChBA,cAAc,IAAI,CAACA,WAAW;QAChC;QAEA,IAAI,CAACA,eAAe,CAACT,UAAUS,cAAc;YAC3C,MAAMC,MAAM,CAAC,wBAAwB,EAAED,YAAY,CAAC;QACtD;QAEA,OAAOA;IACT;IAEA;;;;;;GAMC,GACD,MAAaE,gBACXC,OAAe,EACfC,IAAY,EACZJ,WAAoB,EACF;QAClBA,cAAc,IAAI,CAACD,cAAc,CAACC;QAElC,sCAAsC;QACtC,MAAMK,cAAcb,YAAYW;QAChC,MAAMG,WAAWC,OAAOC,IAAI,CAAC,IAAI,CAACC,IAAI;QACtC,WAAW,MAAMC,WAAWJ,SAAU;YACpC,MAAMK,aAAa,IAAI,CAACF,IAAI,CAACC,QAAQ;YACrC,MAAME,qBAAqBD,WAAWE,YAAY,CAChDxB,iBACAW;YAGF,IAAI;gBACF,MAAMc,mBAA2B,MAAMF,mBAAmBG,OAAO,CAC/D,mBACD,CAACV,aAAaD,MAAMY,IAAI,CAAC;oBAAEC,MAAMjB;gBAAY;gBAC9C,IAAIc,qBAAqBxB,oCAAoC;oBAC3D,OAAO;gBACT;YACF,EAAE,OAAO4B,KAAK;gBACZ;YACF;QACF;QACA,OAAO;IACT;IAEA;;;;GAIC,GACD,MAAaC,QAAQnB,WAAoB,EAAmC;QAC1EA,cAAc,IAAI,CAACD,cAAc,CAACC;QAElC,MAAMoB,WAAW,MAAM,IAAI,CAACjC,KAAK,CAACkC,OAAO,CAAC;YACxCC,KAAKtB;YACLuB,QAAQ;YACRC,cAAc;QAChB;QAEA,OAAOJ,4BAAAA,SAAUK,IAAI;IACvB;IAzFAC,YAAYjB,IAAiB,EAAET,WAAoB,CAAE;QACnD,IAAI,CAACS,IAAI,GAAGA;QACZ,IAAI,CAACT,WAAW,GAAGA;QACnB,IAAI,CAACb,KAAK,GAAG,IAAI,CAACO,SAAS;IAC7B;AAsFF"}