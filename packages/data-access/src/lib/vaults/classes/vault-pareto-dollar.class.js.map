{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/vaults/classes/vault-pareto-dollar.class.ts"],"sourcesContent":["import { ContractAbi } from 'web3'\nimport { BlockNumber, BNFixed } from '../../core'\nimport { Token } from '../../tokens'\nimport { Web3CallData } from '../../web3-client'\nimport {\n  Vault,\n  VaultContractData,\n  VaultContractModel,\n  VaultContractOptions,\n  VaultNonPayableMethodOptions,\n  VaultNonPayableMethodType,\n  VaultPayableMethodOptions,\n  VaultPayableMethodType,\n} from '../vault.model'\nimport { VaultContract } from './vault-contract.class'\nimport { ERC20_ABI } from '../vault.const'\nimport { ParetoDollarQueueYieldSource } from '../../vault-blocks'\n\nexport class VaultParetoDollar\n  extends VaultContract\n  implements VaultContractModel\n{\n  constructor(vault: Vault, token: Token, options?: VaultContractOptions) {\n    super(vault, token, options)\n  }\n\n  /**\n   * Get contract data\n   * @returns the blockchain contract data\n   */\n  public async getContractData(\n    blockNumber: BlockNumber = 'latest'\n  ): Promise<VaultContractData> {\n    const callData = this.makeCallData()\n    const contractData = await this.getData(callData, blockNumber)\n\n    const additionalQueueData = await this.getQueueAdditionalData(\n      blockNumber,\n      contractData\n    )\n\n    return {\n      ...contractData,\n      paretoDollar: {\n        ...contractData.paretoDollar,\n        queue: {\n          ...(contractData.paretoDollar?.queue || {}),\n          ...(additionalQueueData.paretoDollar?.queue || {}),\n        },\n      },\n    }\n  }\n\n  /**\n   * Get additional data from queue contract\n   * @param blockNumber block number\n   * @param contractData main contract data\n   * @returns vault contract data\n   */\n  private async getQueueAdditionalData(\n    blockNumber: BlockNumber = 'latest',\n    contractData: VaultContractData\n  ): Promise<VaultContractData> {\n    const yieldSourceCalls = this.getQueueYieldSourcesCalls(contractData)\n    const epochPendingCalls = this.getQueueEpochPendingCalls(contractData)\n    const callData = [...yieldSourceCalls, ...epochPendingCalls]\n    return await this.getData(callData, blockNumber, { current: contractData })\n  }\n\n  /**\n   * Get contract data from queue contract\n   * @param blockNumber block number\n   * @param contractData main contract data\n   * @returns queue contract data\n   */\n  private getQueueYieldSourcesCalls(\n    contractData: VaultContractData\n  ): Web3CallData[] {\n    if (!contractData.paretoDollar?.queue?.yieldSources?.length) {\n      return []\n    }\n\n    const yieldSources = contractData.paretoDollar.queue.yieldSources\n\n    return yieldSources.reduce(\n      (acc: Web3CallData[], yieldSource) => [\n        ...acc,\n        ...this.makeYieldSourceData(yieldSource),\n      ],\n      []\n    )\n  }\n\n  /**\n   * Prepare call data for deposit queue\n   * @param contractData processed contract data\n   * @returns deposit queue call data\n   */\n  private makeYieldSourceData(\n    yieldSource: ParetoDollarQueueYieldSource\n  ): Web3CallData[] {\n    if (!this.vault.paretoDollar?.queue) {\n      return []\n    }\n\n    const { abi, address } = this.vault.paretoDollar.queue\n    const queueContract = {\n      abi,\n      address,\n      protocol: this.vault.protocol,\n    }\n\n    return this.makeProtocolData(\n      queueContract,\n      'PARETO_DOLLAR_QUEUE_YIELD_SOURCE',\n      undefined,\n      {\n        yieldSourceAddress: yieldSource.sourceAddress,\n      }\n    )\n  }\n\n  /**\n   * Get contract data from queue contract\n   * @param blockNumber block number\n   * @param contractData main contract data\n   * @returns queue contract data\n   */\n  private getQueueEpochPendingCalls(\n    contractData: VaultContractData\n  ): Web3CallData[] {\n    if (\n      !contractData.paretoDollar?.queue?.epochNumber ||\n      isNaN(Number(contractData.paretoDollar.queue.epochNumber))\n    ) {\n      return []\n    }\n\n    const epochNumber = Number(contractData.paretoDollar.queue.epochNumber)\n    const prevEpochNumber = Math.max(0, epochNumber - 1)\n\n    // Get deposit queue data using epochNumber\n    return this.makeQueuePendingEpochData(epochNumber, prevEpochNumber)\n  }\n\n  /**\n   * Prepare call data for deposit queue\n   * @param contractData processed contract data\n   * @returns deposit queue call data\n   */\n  private makeQueuePendingEpochData(\n    epochNumber: number,\n    prevEpochNumber: number\n  ): Web3CallData[] {\n    if (!this.vault.paretoDollar?.queue) {\n      return []\n    }\n\n    const { abi, address } = this.vault.paretoDollar.queue\n    const queueContract = {\n      abi,\n      address,\n      protocol: this.vault.protocol,\n    }\n\n    return this.makeProtocolData(\n      queueContract,\n      'PARETO_DOLLAR_QUEUE_EPOCH_PENDING',\n      undefined,\n      {\n        epochNumber,\n        prevEpochNumber,\n      }\n    )\n  }\n\n  /**\n   * Get vault payable method\n   * @param type the payment method type\n   * @param options the payment method options\n   * @returns the web3 payable method\n   */\n  public getPayableMethod(type: VaultPayableMethodType, options?: any) {\n    try {\n      switch (type) {\n        case 'MINT':\n          return this.mint(options)\n        case 'REQUEST_REDEEM':\n          return this.requestRedeem(options)\n        case 'CLAIM_REDEEM_REQUEST':\n          return this.claim(options)\n        case 'STAKE':\n          return this.stake(options)\n        case 'UNSTAKE':\n          return this.unstake(options)\n        case 'TOKEN_APPROVE':\n          return this.approveToken(options)\n        default:\n          throw new Error('Method not available for this kind of vault')\n      }\n    } catch (error) {\n      console.error(`Contract get method error`, type, error)\n      return\n    }\n  }\n\n  /**\n   * Prepare call data\n   * @returns the web3 call data\n   */\n  protected makeCallData(): Web3CallData[] {\n    // Parse vault contract methods\n    const { abi, address, protocol, contractType } = this.vault\n    let callData = this.makeProtocolData(\n      { abi, address, protocol },\n      contractType\n    )\n\n    const { paretoDollar } = this.vault\n\n    // Make calls for queue contract\n    if (paretoDollar?.queue) {\n      callData = [\n        ...callData,\n        ...this.makeProtocolData(\n          {\n            abi: paretoDollar.queue.abi,\n            address: paretoDollar.queue.address,\n            protocol: this.vault.protocol,\n          },\n          'PARETO_DOLLAR_QUEUE'\n        ),\n      ]\n    }\n\n    // Make calls for staking contract\n    if (paretoDollar?.staking) {\n      callData = [\n        ...callData,\n        ...this.makeProtocolData(\n          {\n            abi: paretoDollar.staking.abi,\n            address: paretoDollar.staking.address,\n            protocol: this.vault.protocol,\n          },\n          'PARETO_DOLLAR_STAKING'\n        ),\n      ]\n\n      if (this.walletAddresses) {\n        // Add staking contract\n        callData = this.walletAddresses.reduce(\n          (acc, walletAddress) => [\n            ...acc,\n            ...this.makeProtocolData(\n              {\n                abi: paretoDollar.staking.abi,\n                address: paretoDollar.staking.address,\n                protocol: this.vault.protocol,\n              },\n              'WALLET_PARETO_DOLLAR_STAKING',\n              undefined,\n              {\n                walletAddress,\n              }\n            ),\n          ],\n          callData\n        )\n      }\n    }\n\n    // Parse wallet methods\n    if (this.walletAddresses) {\n      callData = this.walletAddresses.reduce(\n        (acc, walletAddress) => [\n          ...acc,\n          ...this.makeWalletData(walletAddress, { abi, address, protocol }),\n        ],\n        callData\n      )\n    }\n\n    // Parse token methods\n    if (this.token.oracle) {\n      callData = [\n        ...callData,\n        ...this.makeProtocolData(this.token.oracle, 'ORACLE', this.token),\n      ]\n    }\n\n    // Parse vault pools methods\n    if (this.vault.pools) {\n      callData = this.vault.pools.reduce(\n        (acc, pool) => [...acc, ...this.makePoolData(pool)],\n        callData\n      )\n    }\n\n    return callData\n  }\n\n  /**\n   * Get vault non payable method\n   * @param type\n   * @param params\n   */\n  public getValue(\n    type: VaultNonPayableMethodType,\n    options?: VaultNonPayableMethodOptions\n  ): Promise<any> {\n    try {\n      switch (type) {\n        case 'IS_WALLET_ALLOWED':\n          return this.isWalletAllowed(options)\n        case 'TOKEN_BALANCE':\n          return this.getTokenBalance(options)\n        case 'TOKEN_ALLOWANCE':\n          return this.getTokenAllowance(options)\n        case 'TOKEN_CONVERSION':\n          return this.getTokenConversion(options)\n        case 'WALLET_ALLOWANCE':\n        case 'WALLET_ALLOWANCE_LP':\n        case 'WALLET_BALANCE':\n        case 'WALLET_DEPOSIT':\n        case 'WALLET_WITHDRAWABLE':\n          return Promise.resolve('')\n\n        default:\n          throw new Error('Value not available for this kind of vault')\n      }\n    } catch (error) {\n      console.error(`Contract get value error`, type, error)\n      return Promise.resolve(null)\n    }\n  }\n\n  /**\n   * Mint new USP tokens providing stablecoin as collateral\n   * @param options the method params\n   * @returns the payable method for stop the epoch\n   */\n  public mint(options?: VaultPayableMethodOptions) {\n    if (\n      this.vault.contractType !== 'PARETO_DOLLAR' ||\n      !this.vault.paretoDollar\n    ) {\n      throw Error('Wrong vault type')\n    }\n\n    if (\n      options?.collateralAddress === undefined ||\n      options.amount === undefined\n    ) {\n      return\n    }\n\n    const { abi, address } = this.vault\n    const { collateralAddress, amount } = options\n\n    // Check deposit amount\n    const amountCheck = this.checkContractAmount(amount)\n    if (!amountCheck) {\n      return\n    }\n\n    const params = [collateralAddress, amount]\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'mint',\n      params,\n    })\n  }\n\n  /**\n   * Request redeem back collateral from USP amount\n   * @param options - the payable method options\n   * @returns the payable method\n   */\n  public requestRedeem(options?: VaultPayableMethodOptions) {\n    if (\n      this.vault.contractType !== 'PARETO_DOLLAR' ||\n      !this.vault.paretoDollar\n    ) {\n      throw Error('Wrong vault type')\n    }\n\n    const { abi, address } = this.vault\n    const { amount } = options || {}\n\n    // Check deposit amount\n    const amountCheck = this.checkContractAmount(amount)\n    if (!amountCheck) {\n      return\n    }\n\n    const params = [amount]\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'requestRedeem',\n      params,\n    })\n  }\n\n  /**\n   * Claim redeem request\n   * @param options - the payable method options\n   * @returns the payable method\n   */\n  public claim(options?: VaultPayableMethodOptions) {\n    if (\n      this.vault.contractType !== 'PARETO_DOLLAR' ||\n      !this.vault.paretoDollar\n    ) {\n      throw Error('Wrong vault type')\n    }\n\n    const { abi, address } = this.vault\n    const { epochNumber } = options || {}\n\n    // Check deposit amount\n    if (epochNumber === undefined) {\n      return\n    }\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'claimRedeemRequest',\n      params: [epochNumber],\n    })\n  }\n\n  /**\n   * Stake USP tokens\n   * @param options the method params\n   * @returns the payable method for stop the epoch\n   */\n  public stake(options?: VaultPayableMethodOptions) {\n    if (\n      this.vault.contractType !== 'PARETO_DOLLAR' ||\n      !this.vault.paretoDollar\n    ) {\n      throw Error('Wrong vault type')\n    }\n\n    if (options?.walletAddress === undefined || options.assets === undefined) {\n      return\n    }\n\n    const { abi, address } = this.vault.paretoDollar.staking\n    const { walletAddress, assets } = options\n\n    // Check deposit amount\n    const amountCheck = this.checkContractAmount(assets)\n    if (!amountCheck) {\n      return\n    }\n\n    const params = [assets, walletAddress]\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'deposit',\n      params,\n    })\n  }\n\n  /**\n   * Unstake sUSP tokens\n   * @param options the method params\n   * @returns the payable method for stop the epoch\n   */\n  public unstake(options?: VaultPayableMethodOptions) {\n    if (\n      this.vault.contractType !== 'PARETO_DOLLAR' ||\n      !this.vault.paretoDollar\n    ) {\n      throw Error('Wrong vault type')\n    }\n\n    if (options?.walletAddress === undefined || options.shares === undefined) {\n      return\n    }\n\n    const { abi, address } = this.vault.paretoDollar.staking\n    const { walletAddress, shares } = options\n\n    // Check deposit amount\n    const amountCheck = this.checkContractAmount(shares)\n    if (!amountCheck) {\n      return\n    }\n\n    const params = [shares, walletAddress, walletAddress]\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'redeem',\n      params,\n    })\n  }\n\n  /**\n   * Check if wallet is allowed\n   * @param options - the method options\n   * @returns true if wallet is allowed\n   */\n  public isWalletAllowed(\n    options?: VaultNonPayableMethodOptions\n  ): Promise<boolean> {\n    try {\n      if (\n        this.vault.contractType !== 'PARETO_DOLLAR' ||\n        !this.vault.paretoDollar\n      ) {\n        throw Error('Wrong vault type')\n      }\n\n      if (options?.walletAddress === undefined) {\n        throw Error('Wallet address is mandatory')\n      }\n\n      const { abi, address } = this.vault\n      const method = this.getContractNonPayableMethod({\n        abi,\n        address,\n        method: 'isWalletAllowed',\n        params: [options.walletAddress],\n      })\n\n      if (!method) {\n        throw Error('Not method available')\n      }\n\n      return method.call<boolean>()\n    } catch (error) {\n      return Promise.resolve(false)\n    }\n  }\n\n  /**\n   * Get token balance\n   * @param options - the method options\n   * @returns the token balance\n   */\n  public async getTokenBalance(options?: VaultNonPayableMethodOptions) {\n    if (\n      options?.walletAddress === undefined ||\n      options?.tokenAddress === undefined\n    ) {\n      return\n    }\n\n    const { tokenAddress, walletAddress } = options\n    const { abi, address } = this.getContractAbi(tokenAddress)\n\n    const method = this.getContractNonPayableMethod({\n      abi,\n      address,\n      method: 'balanceOf',\n      params: [walletAddress],\n    })\n\n    if (!method) {\n      throw Error('Not method available')\n    }\n\n    return method.call<bigint>().then((balance) => BNFixed(balance))\n  }\n\n  /**\n   * Get token allowance\n   * @param options\n   * @returns\n   */\n  public async getTokenAllowance(options?: VaultNonPayableMethodOptions) {\n    if (\n      this.vault.contractType !== 'PARETO_DOLLAR' ||\n      !this.vault.paretoDollar\n    ) {\n      throw Error('Wrong vault type')\n    }\n\n    if (\n      options?.walletAddress === undefined ||\n      options?.tokenAddress === undefined ||\n      options?.spender === undefined\n    ) {\n      return\n    }\n\n    const { tokenAddress, walletAddress, spender } = options\n    const { abi, address } = this.getContractAbi(tokenAddress)\n\n    const method = this.getContractNonPayableMethod({\n      abi,\n      address,\n      method: 'allowance',\n      params: [walletAddress, spender],\n    })\n\n    if (!method) {\n      throw Error('Not method available')\n    }\n\n    return method.call<bigint>().then((balance) => BNFixed(balance))\n  }\n\n  /**\n   * Get token conversion\n   * @param options\n   * @returns\n   */\n  public async getTokenConversion(options?: VaultNonPayableMethodOptions) {\n    if (\n      this.vault.contractType !== 'PARETO_DOLLAR' ||\n      !this.vault.paretoDollar\n    ) {\n      throw Error('Wrong vault type')\n    }\n\n    if (options?.pair === undefined || options?.tokenAmount === undefined) {\n      return\n    }\n\n    const { pair, tokenAmount } = options\n    const { abi, address } = this.vault.paretoDollar.staking\n    const methodName =\n      pair === 'USP|sUSP'\n        ? 'convertToShares'\n        : pair === 'sUSP|USP'\n        ? 'convertToAssets'\n        : undefined\n\n    if (!methodName) {\n      return\n    }\n\n    const method = this.getContractNonPayableMethod({\n      abi,\n      address,\n      method: methodName,\n      params: [tokenAmount],\n    })\n\n    if (!method) {\n      throw Error('Not method available')\n    }\n\n    return method.call<bigint>().then((balance) => BNFixed(balance))\n  }\n\n  /**\n   * Increment token allowance\n   * @param options the method options\n   * @returns the payable method for increment allowance\n   */\n  public override approveToken(options?: VaultPayableMethodOptions) {\n    if (\n      options?.tokenAddress === undefined ||\n      options?.spender === undefined ||\n      options?.amount === undefined\n    ) {\n      return\n    }\n\n    const { tokenAddress, spender, amount } = options\n    const { abi, address } = this.getContractAbi(tokenAddress)\n\n    const amountCheck = this.checkContractAmount(options.amount)\n    if (!amountCheck) {\n      return\n    }\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'approve',\n      params: [spender, amount],\n    })\n  }\n\n  /**\n   * Get address and abi of the pareto token\n   * @param tokenId\n   */\n  private getContractAbi(address: string): {\n    address: string\n    abi: ContractAbi\n  } {\n    if (address === this.vault.address) {\n      const { address, abi } = this.vault\n      return { address, abi }\n    }\n\n    // Staking contract\n    if (address === this.vault.paretoDollar?.staking.address) {\n      const { address, abi } = this.vault.paretoDollar.staking\n      return { address, abi }\n    }\n\n    // Collateral contract\n    const collateral = this.vault.paretoDollar?.collaterals?.find(\n      (c) => c.tokenAddress === address\n    )\n    if (collateral) {\n      const { tokenAddress } = collateral\n      return { address: tokenAddress, abi: ERC20_ABI }\n    }\n\n    throw Error('Abi not found')\n  }\n}\n"],"names":["BNFixed","VaultContract","ERC20_ABI","VaultParetoDollar","getContractData","blockNumber","contractData","additionalQueueData","callData","makeCallData","getData","getQueueAdditionalData","paretoDollar","queue","yieldSourceCalls","getQueueYieldSourcesCalls","epochPendingCalls","getQueueEpochPendingCalls","current","yieldSources","length","reduce","acc","yieldSource","makeYieldSourceData","vault","abi","address","queueContract","protocol","makeProtocolData","undefined","yieldSourceAddress","sourceAddress","epochNumber","isNaN","Number","prevEpochNumber","Math","max","makeQueuePendingEpochData","getPayableMethod","type","options","mint","requestRedeem","claim","stake","unstake","approveToken","Error","error","console","contractType","staking","walletAddresses","walletAddress","makeWalletData","token","oracle","pools","pool","makePoolData","getValue","isWalletAllowed","getTokenBalance","getTokenAllowance","getTokenConversion","Promise","resolve","collateralAddress","amount","amountCheck","checkContractAmount","params","getContractPayableMethod","method","assets","shares","getContractNonPayableMethod","call","tokenAddress","getContractAbi","then","balance","spender","pair","tokenAmount","methodName","collateral","collaterals","find","c","constructor"],"mappings":";AACA,SAAsBA,OAAO,QAAQ,aAAY;AAajD,SAASC,aAAa,QAAQ,yBAAwB;AACtD,SAASC,SAAS,QAAQ,iBAAgB;AAG1C,OAAO,MAAMC,0BACHF;IAOR;;;GAGC,GACD,MAAaG,gBACXC,cAA2B,QAAQ,EACP;YAclBC,4BACAC;QAdV,MAAMC,WAAW,IAAI,CAACC,YAAY;QAClC,MAAMH,eAAe,MAAM,IAAI,CAACI,OAAO,CAACF,UAAUH;QAElD,MAAME,sBAAsB,MAAM,IAAI,CAACI,sBAAsB,CAC3DN,aACAC;QAGF,OAAO,aACFA;YACHM,cAAc,aACTN,aAAaM,YAAY;gBAC5BC,OAAO,aACDP,EAAAA,6BAAAA,aAAaM,YAAY,qBAAzBN,2BAA2BO,KAAK,KAAI,CAAC,GACrCN,EAAAA,oCAAAA,oBAAoBK,YAAY,qBAAhCL,kCAAkCM,KAAK,KAAI,CAAC;;;IAIxD;IAEA;;;;;GAKC,GACD,MAAcF,uBACZN,cAA2B,QAAQ,EACnCC,YAA+B,EACH;QAC5B,MAAMQ,mBAAmB,IAAI,CAACC,yBAAyB,CAACT;QACxD,MAAMU,oBAAoB,IAAI,CAACC,yBAAyB,CAACX;QACzD,MAAME,WAAW;eAAIM;eAAqBE;SAAkB;QAC5D,OAAO,MAAM,IAAI,CAACN,OAAO,CAACF,UAAUH,aAAa;YAAEa,SAASZ;QAAa;IAC3E;IAEA;;;;;GAKC,GACD,AAAQS,0BACNT,YAA+B,EACf;YACXA,+CAAAA,kCAAAA;QAAL,IAAI,GAACA,6BAAAA,aAAaM,YAAY,sBAAzBN,mCAAAA,2BAA2BO,KAAK,sBAAhCP,gDAAAA,iCAAkCa,YAAY,qBAA9Cb,8CAAgDc,MAAM,GAAE;YAC3D,OAAO,EAAE;QACX;QAEA,MAAMD,eAAeb,aAAaM,YAAY,CAACC,KAAK,CAACM,YAAY;QAEjE,OAAOA,aAAaE,MAAM,CACxB,CAACC,KAAqBC,cAAgB;mBACjCD;mBACA,IAAI,CAACE,mBAAmB,CAACD;aAC7B,EACD,EAAE;IAEN;IAEA;;;;GAIC,GACD,AAAQC,oBACND,WAAyC,EACzB;YACX;QAAL,IAAI,GAAC,2BAAA,IAAI,CAACE,KAAK,CAACb,YAAY,qBAAvB,yBAAyBC,KAAK,GAAE;YACnC,OAAO,EAAE;QACX;QAEA,MAAM,EAAEa,GAAG,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACF,KAAK,CAACb,YAAY,CAACC,KAAK;QACtD,MAAMe,gBAAgB;YACpBF;YACAC;YACAE,UAAU,IAAI,CAACJ,KAAK,CAACI,QAAQ;QAC/B;QAEA,OAAO,IAAI,CAACC,gBAAgB,CAC1BF,eACA,oCACAG,WACA;YACEC,oBAAoBT,YAAYU,aAAa;QAC/C;IAEJ;IAEA;;;;;GAKC,GACD,AAAQhB,0BACNX,YAA+B,EACf;YAEbA,kCAAAA;QADH,IACE,GAACA,6BAAAA,aAAaM,YAAY,sBAAzBN,mCAAAA,2BAA2BO,KAAK,qBAAhCP,iCAAkC4B,WAAW,KAC9CC,MAAMC,OAAO9B,aAAaM,YAAY,CAACC,KAAK,CAACqB,WAAW,IACxD;YACA,OAAO,EAAE;QACX;QAEA,MAAMA,cAAcE,OAAO9B,aAAaM,YAAY,CAACC,KAAK,CAACqB,WAAW;QACtE,MAAMG,kBAAkBC,KAAKC,GAAG,CAAC,GAAGL,cAAc;QAElD,2CAA2C;QAC3C,OAAO,IAAI,CAACM,yBAAyB,CAACN,aAAaG;IACrD;IAEA;;;;GAIC,GACD,AAAQG,0BACNN,WAAmB,EACnBG,eAAuB,EACP;YACX;QAAL,IAAI,GAAC,2BAAA,IAAI,CAACZ,KAAK,CAACb,YAAY,qBAAvB,yBAAyBC,KAAK,GAAE;YACnC,OAAO,EAAE;QACX;QAEA,MAAM,EAAEa,GAAG,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACF,KAAK,CAACb,YAAY,CAACC,KAAK;QACtD,MAAMe,gBAAgB;YACpBF;YACAC;YACAE,UAAU,IAAI,CAACJ,KAAK,CAACI,QAAQ;QAC/B;QAEA,OAAO,IAAI,CAACC,gBAAgB,CAC1BF,eACA,qCACAG,WACA;YACEG;YACAG;QACF;IAEJ;IAEA;;;;;GAKC,GACD,AAAOI,iBAAiBC,IAA4B,EAAEC,OAAa,EAAE;QACnE,IAAI;YACF,OAAQD;gBACN,KAAK;oBACH,OAAO,IAAI,CAACE,IAAI,CAACD;gBACnB,KAAK;oBACH,OAAO,IAAI,CAACE,aAAa,CAACF;gBAC5B,KAAK;oBACH,OAAO,IAAI,CAACG,KAAK,CAACH;gBACpB,KAAK;oBACH,OAAO,IAAI,CAACI,KAAK,CAACJ;gBACpB,KAAK;oBACH,OAAO,IAAI,CAACK,OAAO,CAACL;gBACtB,KAAK;oBACH,OAAO,IAAI,CAACM,YAAY,CAACN;gBAC3B;oBACE,MAAM,IAAIO,MAAM;YACpB;QACF,EAAE,OAAOC,OAAO;YACdC,QAAQD,KAAK,CAAC,CAAC,yBAAyB,CAAC,EAAET,MAAMS;YACjD;QACF;IACF;IAEA;;;GAGC,GACD,AAAU1C,eAA+B;QACvC,+BAA+B;QAC/B,MAAM,EAAEiB,GAAG,EAAEC,OAAO,EAAEE,QAAQ,EAAEwB,YAAY,EAAE,GAAG,IAAI,CAAC5B,KAAK;QAC3D,IAAIjB,WAAW,IAAI,CAACsB,gBAAgB,CAClC;YAAEJ;YAAKC;YAASE;QAAS,GACzBwB;QAGF,MAAM,EAAEzC,YAAY,EAAE,GAAG,IAAI,CAACa,KAAK;QAEnC,gCAAgC;QAChC,IAAIb,gCAAAA,aAAcC,KAAK,EAAE;YACvBL,WAAW;mBACNA;mBACA,IAAI,CAACsB,gBAAgB,CACtB;oBACEJ,KAAKd,aAAaC,KAAK,CAACa,GAAG;oBAC3BC,SAASf,aAAaC,KAAK,CAACc,OAAO;oBACnCE,UAAU,IAAI,CAACJ,KAAK,CAACI,QAAQ;gBAC/B,GACA;aAEH;QACH;QAEA,kCAAkC;QAClC,IAAIjB,gCAAAA,aAAc0C,OAAO,EAAE;YACzB9C,WAAW;mBACNA;mBACA,IAAI,CAACsB,gBAAgB,CACtB;oBACEJ,KAAKd,aAAa0C,OAAO,CAAC5B,GAAG;oBAC7BC,SAASf,aAAa0C,OAAO,CAAC3B,OAAO;oBACrCE,UAAU,IAAI,CAACJ,KAAK,CAACI,QAAQ;gBAC/B,GACA;aAEH;YAED,IAAI,IAAI,CAAC0B,eAAe,EAAE;gBACxB,uBAAuB;gBACvB/C,WAAW,IAAI,CAAC+C,eAAe,CAAClC,MAAM,CACpC,CAACC,KAAKkC,gBAAkB;2BACnBlC;2BACA,IAAI,CAACQ,gBAAgB,CACtB;4BACEJ,KAAKd,aAAa0C,OAAO,CAAC5B,GAAG;4BAC7BC,SAASf,aAAa0C,OAAO,CAAC3B,OAAO;4BACrCE,UAAU,IAAI,CAACJ,KAAK,CAACI,QAAQ;wBAC/B,GACA,gCACAE,WACA;4BACEyB;wBACF;qBAEH,EACDhD;YAEJ;QACF;QAEA,uBAAuB;QACvB,IAAI,IAAI,CAAC+C,eAAe,EAAE;YACxB/C,WAAW,IAAI,CAAC+C,eAAe,CAAClC,MAAM,CACpC,CAACC,KAAKkC,gBAAkB;uBACnBlC;uBACA,IAAI,CAACmC,cAAc,CAACD,eAAe;wBAAE9B;wBAAKC;wBAASE;oBAAS;iBAChE,EACDrB;QAEJ;QAEA,sBAAsB;QACtB,IAAI,IAAI,CAACkD,KAAK,CAACC,MAAM,EAAE;YACrBnD,WAAW;mBACNA;mBACA,IAAI,CAACsB,gBAAgB,CAAC,IAAI,CAAC4B,KAAK,CAACC,MAAM,EAAE,UAAU,IAAI,CAACD,KAAK;aACjE;QACH;QAEA,4BAA4B;QAC5B,IAAI,IAAI,CAACjC,KAAK,CAACmC,KAAK,EAAE;YACpBpD,WAAW,IAAI,CAACiB,KAAK,CAACmC,KAAK,CAACvC,MAAM,CAChC,CAACC,KAAKuC,OAAS;uBAAIvC;uBAAQ,IAAI,CAACwC,YAAY,CAACD;iBAAM,EACnDrD;QAEJ;QAEA,OAAOA;IACT;IAEA;;;;GAIC,GACD,AAAOuD,SACLrB,IAA+B,EAC/BC,OAAsC,EACxB;QACd,IAAI;YACF,OAAQD;gBACN,KAAK;oBACH,OAAO,IAAI,CAACsB,eAAe,CAACrB;gBAC9B,KAAK;oBACH,OAAO,IAAI,CAACsB,eAAe,CAACtB;gBAC9B,KAAK;oBACH,OAAO,IAAI,CAACuB,iBAAiB,CAACvB;gBAChC,KAAK;oBACH,OAAO,IAAI,CAACwB,kBAAkB,CAACxB;gBACjC,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;oBACH,OAAOyB,QAAQC,OAAO,CAAC;gBAEzB;oBACE,MAAM,IAAInB,MAAM;YACpB;QACF,EAAE,OAAOC,OAAO;YACdC,QAAQD,KAAK,CAAC,CAAC,wBAAwB,CAAC,EAAET,MAAMS;YAChD,OAAOiB,QAAQC,OAAO,CAAC;QACzB;IACF;IAEA;;;;GAIC,GACD,AAAOzB,KAAKD,OAAmC,EAAE;QAC/C,IACE,IAAI,CAAClB,KAAK,CAAC4B,YAAY,KAAK,mBAC5B,CAAC,IAAI,CAAC5B,KAAK,CAACb,YAAY,EACxB;YACA,MAAMsC,MAAM;QACd;QAEA,IACEP,CAAAA,2BAAAA,QAAS2B,iBAAiB,MAAKvC,aAC/BY,QAAQ4B,MAAM,KAAKxC,WACnB;YACA;QACF;QAEA,MAAM,EAAEL,GAAG,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACF,KAAK;QACnC,MAAM,EAAE6C,iBAAiB,EAAEC,MAAM,EAAE,GAAG5B;QAEtC,uBAAuB;QACvB,MAAM6B,cAAc,IAAI,CAACC,mBAAmB,CAACF;QAC7C,IAAI,CAACC,aAAa;YAChB;QACF;QAEA,MAAME,SAAS;YAACJ;YAAmBC;SAAO;QAE1C,OAAO,IAAI,CAACI,wBAAwB,CAAC;YACnCjD;YACAC;YACAiD,QAAQ;YACRF;QACF;IACF;IAEA;;;;GAIC,GACD,AAAO7B,cAAcF,OAAmC,EAAE;QACxD,IACE,IAAI,CAAClB,KAAK,CAAC4B,YAAY,KAAK,mBAC5B,CAAC,IAAI,CAAC5B,KAAK,CAACb,YAAY,EACxB;YACA,MAAMsC,MAAM;QACd;QAEA,MAAM,EAAExB,GAAG,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACF,KAAK;QACnC,MAAM,EAAE8C,MAAM,EAAE,GAAG5B,WAAW,CAAC;QAE/B,uBAAuB;QACvB,MAAM6B,cAAc,IAAI,CAACC,mBAAmB,CAACF;QAC7C,IAAI,CAACC,aAAa;YAChB;QACF;QAEA,MAAME,SAAS;YAACH;SAAO;QAEvB,OAAO,IAAI,CAACI,wBAAwB,CAAC;YACnCjD;YACAC;YACAiD,QAAQ;YACRF;QACF;IACF;IAEA;;;;GAIC,GACD,AAAO5B,MAAMH,OAAmC,EAAE;QAChD,IACE,IAAI,CAAClB,KAAK,CAAC4B,YAAY,KAAK,mBAC5B,CAAC,IAAI,CAAC5B,KAAK,CAACb,YAAY,EACxB;YACA,MAAMsC,MAAM;QACd;QAEA,MAAM,EAAExB,GAAG,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACF,KAAK;QACnC,MAAM,EAAES,WAAW,EAAE,GAAGS,WAAW,CAAC;QAEpC,uBAAuB;QACvB,IAAIT,gBAAgBH,WAAW;YAC7B;QACF;QAEA,OAAO,IAAI,CAAC4C,wBAAwB,CAAC;YACnCjD;YACAC;YACAiD,QAAQ;YACRF,QAAQ;gBAACxC;aAAY;QACvB;IACF;IAEA;;;;GAIC,GACD,AAAOa,MAAMJ,OAAmC,EAAE;QAChD,IACE,IAAI,CAAClB,KAAK,CAAC4B,YAAY,KAAK,mBAC5B,CAAC,IAAI,CAAC5B,KAAK,CAACb,YAAY,EACxB;YACA,MAAMsC,MAAM;QACd;QAEA,IAAIP,CAAAA,2BAAAA,QAASa,aAAa,MAAKzB,aAAaY,QAAQkC,MAAM,KAAK9C,WAAW;YACxE;QACF;QAEA,MAAM,EAAEL,GAAG,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACF,KAAK,CAACb,YAAY,CAAC0C,OAAO;QACxD,MAAM,EAAEE,aAAa,EAAEqB,MAAM,EAAE,GAAGlC;QAElC,uBAAuB;QACvB,MAAM6B,cAAc,IAAI,CAACC,mBAAmB,CAACI;QAC7C,IAAI,CAACL,aAAa;YAChB;QACF;QAEA,MAAME,SAAS;YAACG;YAAQrB;SAAc;QAEtC,OAAO,IAAI,CAACmB,wBAAwB,CAAC;YACnCjD;YACAC;YACAiD,QAAQ;YACRF;QACF;IACF;IAEA;;;;GAIC,GACD,AAAO1B,QAAQL,OAAmC,EAAE;QAClD,IACE,IAAI,CAAClB,KAAK,CAAC4B,YAAY,KAAK,mBAC5B,CAAC,IAAI,CAAC5B,KAAK,CAACb,YAAY,EACxB;YACA,MAAMsC,MAAM;QACd;QAEA,IAAIP,CAAAA,2BAAAA,QAASa,aAAa,MAAKzB,aAAaY,QAAQmC,MAAM,KAAK/C,WAAW;YACxE;QACF;QAEA,MAAM,EAAEL,GAAG,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACF,KAAK,CAACb,YAAY,CAAC0C,OAAO;QACxD,MAAM,EAAEE,aAAa,EAAEsB,MAAM,EAAE,GAAGnC;QAElC,uBAAuB;QACvB,MAAM6B,cAAc,IAAI,CAACC,mBAAmB,CAACK;QAC7C,IAAI,CAACN,aAAa;YAChB;QACF;QAEA,MAAME,SAAS;YAACI;YAAQtB;YAAeA;SAAc;QAErD,OAAO,IAAI,CAACmB,wBAAwB,CAAC;YACnCjD;YACAC;YACAiD,QAAQ;YACRF;QACF;IACF;IAEA;;;;GAIC,GACD,AAAOV,gBACLrB,OAAsC,EACpB;QAClB,IAAI;YACF,IACE,IAAI,CAAClB,KAAK,CAAC4B,YAAY,KAAK,mBAC5B,CAAC,IAAI,CAAC5B,KAAK,CAACb,YAAY,EACxB;gBACA,MAAMsC,MAAM;YACd;YAEA,IAAIP,CAAAA,2BAAAA,QAASa,aAAa,MAAKzB,WAAW;gBACxC,MAAMmB,MAAM;YACd;YAEA,MAAM,EAAExB,GAAG,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACF,KAAK;YACnC,MAAMmD,SAAS,IAAI,CAACG,2BAA2B,CAAC;gBAC9CrD;gBACAC;gBACAiD,QAAQ;gBACRF,QAAQ;oBAAC/B,QAAQa,aAAa;iBAAC;YACjC;YAEA,IAAI,CAACoB,QAAQ;gBACX,MAAM1B,MAAM;YACd;YAEA,OAAO0B,OAAOI,IAAI;QACpB,EAAE,OAAO7B,OAAO;YACd,OAAOiB,QAAQC,OAAO,CAAC;QACzB;IACF;IAEA;;;;GAIC,GACD,MAAaJ,gBAAgBtB,OAAsC,EAAE;QACnE,IACEA,CAAAA,2BAAAA,QAASa,aAAa,MAAKzB,aAC3BY,CAAAA,2BAAAA,QAASsC,YAAY,MAAKlD,WAC1B;YACA;QACF;QAEA,MAAM,EAAEkD,YAAY,EAAEzB,aAAa,EAAE,GAAGb;QACxC,MAAM,EAAEjB,GAAG,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACuD,cAAc,CAACD;QAE7C,MAAML,SAAS,IAAI,CAACG,2BAA2B,CAAC;YAC9CrD;YACAC;YACAiD,QAAQ;YACRF,QAAQ;gBAAClB;aAAc;QACzB;QAEA,IAAI,CAACoB,QAAQ;YACX,MAAM1B,MAAM;QACd;QAEA,OAAO0B,OAAOI,IAAI,GAAWG,IAAI,CAAC,CAACC,UAAYpF,QAAQoF;IACzD;IAEA;;;;GAIC,GACD,MAAalB,kBAAkBvB,OAAsC,EAAE;QACrE,IACE,IAAI,CAAClB,KAAK,CAAC4B,YAAY,KAAK,mBAC5B,CAAC,IAAI,CAAC5B,KAAK,CAACb,YAAY,EACxB;YACA,MAAMsC,MAAM;QACd;QAEA,IACEP,CAAAA,2BAAAA,QAASa,aAAa,MAAKzB,aAC3BY,CAAAA,2BAAAA,QAASsC,YAAY,MAAKlD,aAC1BY,CAAAA,2BAAAA,QAAS0C,OAAO,MAAKtD,WACrB;YACA;QACF;QAEA,MAAM,EAAEkD,YAAY,EAAEzB,aAAa,EAAE6B,OAAO,EAAE,GAAG1C;QACjD,MAAM,EAAEjB,GAAG,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACuD,cAAc,CAACD;QAE7C,MAAML,SAAS,IAAI,CAACG,2BAA2B,CAAC;YAC9CrD;YACAC;YACAiD,QAAQ;YACRF,QAAQ;gBAAClB;gBAAe6B;aAAQ;QAClC;QAEA,IAAI,CAACT,QAAQ;YACX,MAAM1B,MAAM;QACd;QAEA,OAAO0B,OAAOI,IAAI,GAAWG,IAAI,CAAC,CAACC,UAAYpF,QAAQoF;IACzD;IAEA;;;;GAIC,GACD,MAAajB,mBAAmBxB,OAAsC,EAAE;QACtE,IACE,IAAI,CAAClB,KAAK,CAAC4B,YAAY,KAAK,mBAC5B,CAAC,IAAI,CAAC5B,KAAK,CAACb,YAAY,EACxB;YACA,MAAMsC,MAAM;QACd;QAEA,IAAIP,CAAAA,2BAAAA,QAAS2C,IAAI,MAAKvD,aAAaY,CAAAA,2BAAAA,QAAS4C,WAAW,MAAKxD,WAAW;YACrE;QACF;QAEA,MAAM,EAAEuD,IAAI,EAAEC,WAAW,EAAE,GAAG5C;QAC9B,MAAM,EAAEjB,GAAG,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACF,KAAK,CAACb,YAAY,CAAC0C,OAAO;QACxD,MAAMkC,aACJF,SAAS,aACL,oBACAA,SAAS,aACT,oBACAvD;QAEN,IAAI,CAACyD,YAAY;YACf;QACF;QAEA,MAAMZ,SAAS,IAAI,CAACG,2BAA2B,CAAC;YAC9CrD;YACAC;YACAiD,QAAQY;YACRd,QAAQ;gBAACa;aAAY;QACvB;QAEA,IAAI,CAACX,QAAQ;YACX,MAAM1B,MAAM;QACd;QAEA,OAAO0B,OAAOI,IAAI,GAAWG,IAAI,CAAC,CAACC,UAAYpF,QAAQoF;IACzD;IAEA;;;;GAIC,GACD,AAAgBnC,aAAaN,OAAmC,EAAE;QAChE,IACEA,CAAAA,2BAAAA,QAASsC,YAAY,MAAKlD,aAC1BY,CAAAA,2BAAAA,QAAS0C,OAAO,MAAKtD,aACrBY,CAAAA,2BAAAA,QAAS4B,MAAM,MAAKxC,WACpB;YACA;QACF;QAEA,MAAM,EAAEkD,YAAY,EAAEI,OAAO,EAAEd,MAAM,EAAE,GAAG5B;QAC1C,MAAM,EAAEjB,GAAG,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACuD,cAAc,CAACD;QAE7C,MAAMT,cAAc,IAAI,CAACC,mBAAmB,CAAC9B,QAAQ4B,MAAM;QAC3D,IAAI,CAACC,aAAa;YAChB;QACF;QAEA,OAAO,IAAI,CAACG,wBAAwB,CAAC;YACnCjD;YACAC;YACAiD,QAAQ;YACRF,QAAQ;gBAACW;gBAASd;aAAO;QAC3B;IACF;IAEA;;;GAGC,GACD,AAAQW,eAAevD,OAAe,EAGpC;YAOgB,0BAMG,sCAAA;QAZnB,IAAIA,YAAY,IAAI,CAACF,KAAK,CAACE,OAAO,EAAE;YAClC,MAAM,EAAEA,OAAO,EAAED,GAAG,EAAE,GAAG,IAAI,CAACD,KAAK;YACnC,OAAO;gBAAEE;gBAASD;YAAI;QACxB;QAEA,mBAAmB;QACnB,IAAIC,cAAY,2BAAA,IAAI,CAACF,KAAK,CAACb,YAAY,qBAAvB,yBAAyB0C,OAAO,CAAC3B,OAAO,GAAE;YACxD,MAAM,EAAEA,OAAO,EAAED,GAAG,EAAE,GAAG,IAAI,CAACD,KAAK,CAACb,YAAY,CAAC0C,OAAO;YACxD,OAAO;gBAAE3B;gBAASD;YAAI;QACxB;QAEA,sBAAsB;QACtB,MAAM+D,cAAa,4BAAA,IAAI,CAAChE,KAAK,CAACb,YAAY,sBAAvB,uCAAA,0BAAyB8E,WAAW,qBAApC,qCAAsCC,IAAI,CAC3D,CAACC,IAAMA,EAAEX,YAAY,KAAKtD;QAE5B,IAAI8D,YAAY;YACd,MAAM,EAAER,YAAY,EAAE,GAAGQ;YACzB,OAAO;gBAAE9D,SAASsD;gBAAcvD,KAAKxB;YAAU;QACjD;QAEA,MAAMgD,MAAM;IACd;IAxrBA2C,YAAYpE,KAAY,EAAEiC,KAAY,EAAEf,OAA8B,CAAE;QACtE,KAAK,CAAClB,OAAOiC,OAAOf;IACtB;AAurBF"}