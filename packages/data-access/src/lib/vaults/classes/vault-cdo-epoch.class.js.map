{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/vaults/classes/vault-cdo-epoch.class.ts"],"sourcesContent":["import moment from 'moment'\nimport {\n  BlockNumber,\n  BNFixed,\n  BNgt,\n  BNgte,\n  BNify,\n  BNint,\n  BNlt,\n  compLower,\n} from '../../core'\nimport { Token } from '../../tokens'\nimport { Web3CallData } from '../../web3-client'\nimport {\n  Vault,\n  VaultContractData,\n  VaultContractModel,\n  VaultContractOptions,\n  VaultPayableMethodOptions,\n  VaultPayableMethodType,\n  VaultNonPayableMethodOptions,\n  VaultNonPayableMethodType,\n  VaultWalletData,\n} from '../vault.model'\nimport { VaultContract } from './vault-contract.class'\nimport { ERC20_ABI } from '../vault.const'\n\nexport class VaultCDOEpoch extends VaultContract implements VaultContractModel {\n  constructor(vault: Vault, token: Token, options: VaultContractOptions) {\n    super(vault, token, options)\n\n    if (!vault.cdoEpoch) {\n      throw new Error('Vault without CDO Epoch data')\n    }\n  }\n\n  /**\n   * Parse Cdo epoch raw contract data\n   * @param contractData Cdo Epoch contract raw data\n   * @returns Parsed Cdo Epoch contract data\n   */\n  protected parseContractData(\n    contractData: VaultContractData\n  ): VaultContractData {\n    if (contractData.cdoEpoch) {\n      // Transform endDate and startDate in ISO string\n      if (BNgt(contractData.cdoEpoch.endDate)) {\n        contractData.cdoEpoch.startDate = moment(\n          BNify(contractData.cdoEpoch.endDate)\n            .minus(BNify(contractData.cdoEpoch.duration))\n            .times(1000)\n            .toNumber()\n        )\n          .utc()\n          .toISOString()\n\n        contractData.cdoEpoch.endDate = moment(\n          BNify(contractData.cdoEpoch.endDate).times(1000).toNumber()\n        )\n          .utc()\n          .toISOString()\n      } else {\n        delete contractData.cdoEpoch.endDate\n      }\n\n      // Transform APRs\n      const epochDuration = BNify(contractData.cdoEpoch.duration)\n      const totalDuration = epochDuration.plus(\n        BNify(contractData.cdoEpoch.bufferDuration)\n      )\n      const apr = BNify(contractData.cdoEpoch.apr)\n        .times(epochDuration)\n        .div(totalDuration)\n\n      contractData.cdoEpoch.apr = apr.div(1e18).toNumber()\n\n      contractData.APRs = {\n        BASE: BNFixed(apr),\n      }\n    }\n\n    // Delete instant withdraws attribute if disabled\n    if (contractData.cdoEpoch?.instantWithdraws?.disabled) {\n      delete contractData.cdoEpoch.instantWithdraws\n    }\n\n    if (contractData.cdoEpoch?.instantWithdraws) {\n      // Convert deadline to ISO string\n      if (BNgt(contractData.cdoEpoch.instantWithdraws.deadline)) {\n        contractData.cdoEpoch.instantWithdraws.deadline = moment(\n          BNify(contractData.cdoEpoch.instantWithdraws.deadline)\n            .times(1000)\n            .toNumber()\n        )\n          .utc()\n          .toISOString()\n      } else {\n        delete contractData.cdoEpoch.instantWithdraws.deadline\n      }\n\n      contractData.cdoEpoch.instantWithdraws.aprDelta = BNify(\n        contractData.cdoEpoch.instantWithdraws.aprDelta\n      )\n        .div(1e18)\n        .toNumber()\n\n      // Remove disabled field\n      delete contractData.cdoEpoch.instantWithdraws.disabled\n    }\n\n    return contractData\n  }\n\n  /**\n   * Merge multiple array of VaultWalletData into one single array\n   * @param walletsList arrays of wallets data\n   * @returns array of wallet data\n   */\n  private mergeWalletsData(\n    walletsList: VaultWalletData[][]\n  ): VaultWalletData[] {\n    const updateWallets = (\n      wallets: VaultWalletData[],\n      wallet: VaultWalletData\n    ): VaultWalletData[] => {\n      const existingWallet = wallets.find((existing) =>\n        compLower(existing.address, wallet.address)\n      )\n      if (existingWallet) {\n        return wallets.map((existing) =>\n          compLower(existing.address, wallet.address)\n            ? {\n                ...existing,\n                cdoEpoch: { ...existing.cdoEpoch, ...wallet.cdoEpoch },\n              }\n            : existing\n        )\n      } else {\n        return [...wallets, wallet]\n      }\n    }\n\n    return walletsList.reduce(\n      (acc: VaultWalletData[], wallets: VaultWalletData[]) => {\n        return wallets.reduce(\n          (innerAcc, wallet) => updateWallets(innerAcc, wallet),\n          acc\n        )\n      },\n      []\n    )\n  }\n\n  /**\n   * Get contract data\n   * @returns the blockchain contract data\n   */\n  public async getContractData(\n    blockNumber: BlockNumber = 'latest'\n  ): Promise<VaultContractData> {\n    const callData = this.makeCallData()\n    const contractData = await this.getData(callData, blockNumber)\n    const vaultContractData = this.parseContractData(contractData)\n\n    // Get deposit and withdraw queue data\n    const [depositQueueContractData, withdrawQueueContractData] =\n      await Promise.all([\n        this.getDepositQueueContractData(\n          blockNumber,\n          contractData,\n          vaultContractData\n        ),\n        this.getWithdrawQueueContractData(\n          blockNumber,\n          contractData,\n          vaultContractData\n        ),\n      ])\n\n    const wallets = this.mergeWalletsData([\n      vaultContractData.wallets || [],\n      depositQueueContractData.wallets || [],\n      withdrawQueueContractData.wallets || [],\n    ])\n\n    return {\n      ...vaultContractData,\n      cdoEpoch: {\n        ...vaultContractData.cdoEpoch,\n        ...depositQueueContractData.cdoEpoch,\n        ...withdrawQueueContractData.cdoEpoch,\n      },\n      wallets,\n    }\n  }\n\n  /**\n   * Get contract data from deposit queue contract\n   * @param blockNumber block number\n   * @param contractData main contract data\n   * @param parsedContractData main contract parsed data\n   * @returns deposit queue contract data\n   */\n  private async getDepositQueueContractData(\n    blockNumber: BlockNumber = 'latest',\n    contractData: VaultContractData,\n    parsedContractData: VaultContractData\n  ): Promise<VaultContractData> {\n    if (\n      !contractData?.cdoEpoch ||\n      !this.vault.cdoEpoch?.depositQueue ||\n      !contractData.cdoEpoch.epochNumber ||\n      isNaN(Number(contractData.cdoEpoch.epochNumber))\n    ) {\n      return {}\n    }\n\n    const prevEpochNumber = Number(contractData.cdoEpoch.epochNumber)\n    const epochNumber = prevEpochNumber + 1\n\n    // Get deposit queue data using epochNumber\n    const callData = this.makeDepositQueueData(epochNumber, prevEpochNumber)\n    const depositQueue = await this.getData(callData, blockNumber, {\n      current: parsedContractData,\n      previous: parsedContractData.previous,\n    })\n\n    return {\n      cdoEpoch: {\n        depositQueue: depositQueue.cdoEpoch?.depositQueue,\n      },\n      wallets: depositQueue.wallets,\n    }\n  }\n\n  /**\n   * Get contract data from withdraw queue contract\n   * @param blockNumber block number\n   * @param contractData main contract data\n   * @param parsedContractData main contract parsed data\n   * @returns withdraw queue contract data\n   */\n  private async getWithdrawQueueContractData(\n    blockNumber: BlockNumber = 'latest',\n    contractData: VaultContractData,\n    parsedContractData: VaultContractData\n  ): Promise<VaultContractData> {\n    if (\n      !contractData?.cdoEpoch ||\n      !this.vault.cdoEpoch?.withdrawQueue ||\n      !contractData.cdoEpoch.epochNumber ||\n      isNaN(Number(contractData.cdoEpoch.epochNumber))\n    ) {\n      return {}\n    }\n\n    const prevEpochNumber = Number(contractData.cdoEpoch.epochNumber)\n    const epochNumber = prevEpochNumber + 1\n\n    // Get deposit queue data using epochNumber\n    const callData = this.makeWithdrawQueueData(epochNumber, prevEpochNumber)\n    const withdrawQueue = await this.getData(callData, blockNumber, {\n      current: parsedContractData,\n      previous: parsedContractData.previous,\n    })\n\n    return {\n      cdoEpoch: {\n        withdrawQueue: withdrawQueue.cdoEpoch?.withdrawQueue,\n      },\n      wallets: withdrawQueue.wallets,\n    }\n  }\n\n  /**\n   * Prepare call data for deposit queue\n   * @param contractData processed contract data\n   * @returns deposit queue call data\n   */\n  private makeDepositQueueData(\n    epochNumber: number,\n    prevEpochNumber: number\n  ): Web3CallData[] {\n    // TODO: this should not be necessary. Fix VaultCdoType\n    if (!this.vault.cdoEpoch?.depositQueue) {\n      return []\n    }\n\n    const { abi, address } = this.vault.cdoEpoch.depositQueue\n    const depositQueueContract = {\n      abi,\n      address,\n      protocol: this.vault.protocol,\n    }\n\n    let callData = this.makeProtocolData(\n      depositQueueContract,\n      'CDO_EPOCH_DEPOSIT_QUEUE',\n      undefined,\n      {\n        epochNumber,\n        prevEpochNumber,\n      }\n    )\n\n    // Parse wallet methods\n    if (this.walletAddresses) {\n      callData = this.walletAddresses.reduce(\n        (acc, walletAddress) => [\n          ...acc,\n          ...this.makeProtocolData(\n            depositQueueContract,\n            'WALLET_DEPOSIT_QUEUE',\n            undefined,\n            {\n              epochNumber,\n              walletAddress,\n            }\n          ),\n        ],\n        callData\n      )\n    }\n\n    return callData\n  }\n\n  /**\n   * Prepare call data for deposit queue\n   * @param contractData processed contract data\n   * @returns deposit queue call data\n   */\n  private makeWithdrawQueueData(\n    epochNumber: number,\n    prevEpochNumber: number\n  ): Web3CallData[] {\n    // TODO: this should not be necessary. Fix VaultCdoType\n    if (!this.vault.cdoEpoch?.withdrawQueue) {\n      return []\n    }\n\n    const { abi, address } = this.vault.cdoEpoch.withdrawQueue\n    const withdrawQueueContract = {\n      abi,\n      address,\n      protocol: this.vault.protocol,\n    }\n\n    let callData = this.makeProtocolData(\n      withdrawQueueContract,\n      'CDO_EPOCH_WITHDRAW_QUEUE',\n      undefined,\n      {\n        epochNumber,\n        prevEpochNumber,\n      }\n    )\n\n    // Parse wallet methods\n    if (this.walletAddresses) {\n      callData = this.walletAddresses.reduce(\n        (acc, walletAddress) => [\n          ...acc,\n          ...this.makeProtocolData(\n            withdrawQueueContract,\n            'WALLET_WITHDRAW_QUEUE',\n            undefined,\n            {\n              epochNumber,\n              walletAddress,\n            }\n          ),\n        ],\n        callData\n      )\n    }\n\n    return callData\n  }\n\n  /**\n   * Prepare call data\n   * @returns the web3 call data\n   */\n  private makeCallData(): Web3CallData[] {\n    // Parse vault contract methods\n    const { abi, address, protocol } = this.vault\n    let callData = this.makeProtocolData({ abi, address, protocol }, 'TRANCHE')\n\n    // TODO: this should not be necessary. Fix VaultCdoType\n    if (!this.vault.cdoEpoch) {\n      return []\n    }\n\n    // Parse vault CDO methods\n    callData = [\n      ...callData,\n      ...this.makeProtocolData(\n        {\n          abi: this.vault.cdoEpoch.abi,\n          address: this.vault.cdoEpoch.address,\n          protocol: this.vault.protocol,\n        },\n        'CDO_EPOCH'\n      ),\n    ]\n\n    if (this.vault.strategy) {\n      const strategyContract = this.vault.strategy\n\n      callData = [\n        ...callData,\n        ...this.makeProtocolData(\n          {\n            ...strategyContract,\n            protocol: this.vault.protocol,\n          },\n          'CDO_EPOCH_STRATEGY'\n        ),\n      ]\n\n      if (this.walletAddresses) {\n        callData = this.walletAddresses.reduce(\n          (acc, walletAddress) => [\n            ...acc,\n            ...this.makeProtocolData(\n              {\n                ...strategyContract,\n                protocol: this.vault.protocol,\n              },\n              'WALLET_CDO_EPOCH_STRATEGY',\n              undefined,\n              {\n                walletAddress,\n              }\n            ),\n          ],\n          callData\n        )\n      }\n    }\n\n    // Parse wallet methods\n    if (this.walletAddresses) {\n      callData = this.walletAddresses.reduce(\n        (acc, walletAddress) => [\n          ...acc,\n          ...this.makeWalletData(walletAddress, { abi, address, protocol }),\n        ],\n        callData\n      )\n    }\n\n    // Parse token methods\n    if (this.token.oracle) {\n      callData = [\n        ...callData,\n        ...this.makeProtocolData(this.token.oracle, 'ORACLE', this.token),\n      ]\n    }\n\n    // Add rewards token call data\n    callData = [...callData, ...this.makeRewardTokensData(protocol)]\n\n    return callData\n  }\n\n  /**\n   * Get vault payable method\n   * @param type the payment method type\n   * @param options the payment method options\n   * @returns the web3 payable method\n   */\n  public getPayableMethod(\n    type: VaultPayableMethodType,\n    options?: VaultPayableMethodOptions\n  ) {\n    try {\n      switch (type) {\n        case 'START_EPOCH':\n          return this.startEpoch()\n        case 'STOP_EPOCH':\n          return this.stopEpoch(options)\n        case 'DEFAULT':\n          return this.defaultVault()\n        case 'STOP_EPOCH_WITH_DURATION':\n          return this.stopEpoch(options, true)\n        case 'APPROVE':\n          return this.approveToken(options)\n        case 'APPROVE_LP':\n          return this.approveLPToken(options)\n        case 'GET_INSTANT_WITHDRAWS':\n          return this.getInstantWithdrawFunds()\n        case 'SET_EPOCH_PARAMS':\n          return this.setEpochParams(options)\n        case 'SET_EPOCH_APR':\n          return this.setAPRs(options)\n        case 'PROCESS_DEPOSIT_QUEUE':\n          return this.processDepositQueue()\n        case 'PROCESS_WITHDRAW_QUEUE':\n          return this.processWithdrawQueue()\n        case 'PROCESS_WITHDRAWAL_CLAIMS':\n          return this.processWithdrawalClaims(options)\n        case 'DEPOSIT':\n          return this.deposit(options)\n        case 'REQUEST_DEPOSIT':\n          return this.requestDeposit(options)\n        case 'WITHDRAW':\n          return this.withdraw(options)\n        case 'REQUEST_WITHDRAW':\n          return this.requestWithdraw(options)\n        case 'CLAIM_WITHDRAW':\n          return this.claimWithdraw()\n        case 'CLAIM_INSTANT_WITHDRAW':\n          return this.claimWithdraw(true)\n        case 'CLAIM_DEPOSIT_REQUEST':\n          return this.claimDepositRequest(options)\n        case 'CANCEL_DEPOSIT_REQUEST':\n          return this.cancelDepositRequest(options)\n        case 'CLAIM_WITHDRAW_REQUEST':\n          return this.claimWithdrawRequest(options)\n        case 'CANCEL_WITHDRAW_REQUEST':\n          return this.cancelWithdrawRequest(options)\n        default:\n          throw new Error('Method not available for this kind of vault')\n      }\n    } catch (error) {\n      console.error(`Contract get method error`, type, error)\n      return\n    }\n  }\n\n  /**\n   * Get vault non payable method\n   * @param type\n   * @param params\n   */\n  public getValue(\n    type: VaultNonPayableMethodType,\n    options?: VaultNonPayableMethodOptions\n  ): Promise<any> {\n    try {\n      switch (type) {\n        case 'IS_WALLET_ALLOWED':\n          return this.isWalletAllowed(options)\n        case 'WALLET_DEPOSIT':\n          return this.getWalletDeposit(options)\n        case 'WALLET_BALANCE':\n          return this.getWalletBalance(options)\n        case 'WALLET_ALLOWANCE':\n          return this.getWalletAllowance(options, this.token)\n        case 'WALLET_ALLOWANCE_LP':\n          return this.getWalletAllowance(options, this.vault)\n        case 'WALLET_WITHDRAWABLE':\n          return this.getWalletWithdrawable(options)\n        default:\n          throw new Error('Value not available for this kind of vault')\n      }\n    } catch (error) {\n      console.error(`Contract get value error`, type, error)\n      return Promise.resolve(null)\n    }\n  }\n\n  /**\n   * Process deposit queue\n   * @returns the payable method for process the deposit queue\n   */\n  public processDepositQueue() {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (!this.vault.cdoEpoch.depositQueue) {\n      return\n    }\n\n    const { abi, address } = this.vault.cdoEpoch.depositQueue\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'processDeposits',\n    })\n  }\n\n  /**\n   * Process withdraw queue\n   * @returns the payable method for process the withdraw queue\n   */\n  public processWithdrawQueue() {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (!this.vault.cdoEpoch.withdrawQueue) {\n      return\n    }\n\n    const { abi, address } = this.vault.cdoEpoch.withdrawQueue\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'processWithdrawRequests',\n    })\n  }\n\n  /**\n   * Process withdrawal claims\n   * @param options the method options\n   * @returns the payable method for process withdrawal claims\n   */\n  public processWithdrawalClaims(options?: VaultPayableMethodOptions) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (!this.vault.cdoEpoch.withdrawQueue) {\n      return\n    }\n\n    if (options?.epochNumber === undefined) {\n      throw Error('Epoch number necessary to stop the epoch')\n    }\n\n    const { abi, address } = this.vault.cdoEpoch.withdrawQueue\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'processWithdrawalClaims',\n      params: [options.epochNumber],\n    })\n  }\n\n  /**\n   * Start vault epoch\n   * @returns the payable method for start the epoch\n   */\n  public startEpoch() {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    const { abi, address } = this.vault.cdoEpoch\n    return this.getContractPayableMethod({ abi, address, method: 'startEpoch' })\n  }\n\n  /**\n   * Stop vault epoch\n   * @param options the method params\n   * @returns the payable method for stop the epoch\n   */\n  public stopEpoch(options?: VaultPayableMethodOptions, withDuration = false) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (\n      options?.epochAPR === undefined &&\n      options?.epochInterests === undefined\n    ) {\n      throw Error('APR or Interests necessary to stop the epoch')\n    }\n\n    const { epochAPR, epochInterests, epochDuration, overwriteInterests } =\n      options\n\n    if (\n      this.vault.cdoEpoch.mode === 'CREDIT' &&\n      (BNlt(epochAPR, this.minTokenAmount) ||\n        BNgte(epochAPR, this.maxTokenAmount))\n    ) {\n      return\n    } else if (\n      this.vault.cdoEpoch.mode === 'STRATEGY' &&\n      (BNlt(epochInterests, this.minTokenAmount) ||\n        BNgte(epochInterests, this.maxTokenAmount))\n    ) {\n      return\n    }\n\n    // Check duration\n    if (withDuration && (epochDuration === undefined || epochDuration <= 0)) {\n      return\n    }\n\n    const { abi, address } = this.vault.cdoEpoch\n\n    // Params calculation\n    let apr = '0'\n    let interests = '0'\n\n    if (this.vault.cdoEpoch.mode === 'CREDIT' && !overwriteInterests) {\n      apr = BNint(BNify(epochAPR).times(1e18))\n    } else {\n      interests = epochInterests || '0'\n    }\n\n    const params = withDuration\n      ? [apr, interests, epochDuration]\n      : [apr, interests]\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: withDuration ? 'stopEpochWithDuration' : 'stopEpoch',\n      params,\n    })\n  }\n\n  /**\n   * Deposit amount\n   * @param options the method params\n   * @returns the payable method for deposit\n   */\n  public deposit(options?: VaultPayableMethodOptions) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    const { amount } = options || {}\n    const { abi, address } = this.vault.cdoEpoch\n\n    // Check deposit amount\n    const amountCheck = this.checkContractAmount(amount)\n    if (!amountCheck) {\n      return\n    }\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'depositAA',\n      params: [amount],\n    })\n  }\n\n  /**\n   * Request deposit\n   * @param options the method params\n   * @returns the payable method for request deposit\n   */\n  public requestDeposit(options?: VaultPayableMethodOptions) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (!this.vault.cdoEpoch.depositQueue) {\n      return\n    }\n\n    const { amount } = options || {}\n    const { abi, address } = this.vault.cdoEpoch.depositQueue\n\n    // Check deposit amount\n    const amountCheck = this.checkContractAmount(amount)\n    if (!amountCheck) {\n      return\n    }\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'requestDeposit',\n      params: [amount],\n    })\n  }\n\n  /**\n   * Withdraw amount\n   * @param options - the method params\n   * @return the payable method for withdraw\n   */\n  public withdraw(options?: VaultPayableMethodOptions) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    const { amount } = options || {}\n    const { abi, address } = this.vault.cdoEpoch\n\n    // Check withdraw amount\n    const amountCheck = this.checkContractAmount(amount)\n    if (!amountCheck) {\n      return\n    }\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'requestWithdraw',\n      params: [amount, this.vault.address],\n    })\n  }\n\n  /**\n   * Withdraw amount\n   * @param options - the method params\n   * @return the payable method for withdraw\n   */\n  public requestWithdraw(options?: VaultPayableMethodOptions) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (!this.vault.cdoEpoch.withdrawQueue) {\n      return\n    }\n\n    const { amount } = options || {}\n    const { abi, address } = this.vault.cdoEpoch.withdrawQueue\n\n    // Check deposit amount\n    const amountCheck = this.checkContractAmount(amount)\n    if (!amountCheck) {\n      return\n    }\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'requestWithdraw',\n      params: [amount],\n    })\n  }\n\n  /**\n   * Claim withdraw\n   * @return the payable method for withdraw\n   */\n  public claimWithdraw(isInstant?: boolean) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    const { abi, address } = this.vault.cdoEpoch\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: isInstant\n        ? 'claimInstantWithdrawRequest'\n        : 'claimWithdrawRequest',\n    })\n  }\n\n  /**\n   * Claim deposit request\n   * @param options - the request options\n   * @returns\n   */\n  public claimDepositRequest(options?: VaultPayableMethodOptions) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (!this.vault.cdoEpoch.depositQueue || !options?.epochNumber) {\n      return\n    }\n\n    const { abi, address } = this.vault.cdoEpoch.depositQueue\n    const { epochNumber } = options\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'claimDepositRequest',\n      params: [epochNumber],\n    })\n  }\n\n  /**\n   * Cancel deposit request\n   * @param options - the request options\n   * @returns\n   */\n  public cancelDepositRequest(options?: VaultPayableMethodOptions) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (!this.vault.cdoEpoch.depositQueue || !options?.epochNumber) {\n      return\n    }\n\n    const { abi, address } = this.vault.cdoEpoch.depositQueue\n    const { epochNumber } = options\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'deleteRequest',\n      params: [epochNumber],\n    })\n  }\n\n  /**\n   * Claim withdraw request\n   * @param options - the request options\n   * @returns\n   */\n  public claimWithdrawRequest(options?: VaultPayableMethodOptions) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (!this.vault.cdoEpoch.withdrawQueue || !options?.epochNumber) {\n      return\n    }\n\n    const { abi, address } = this.vault.cdoEpoch.withdrawQueue\n    const { epochNumber } = options\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'claimWithdrawRequest',\n      params: [epochNumber],\n    })\n  }\n\n  /**\n   * Cancel withdraw request\n   * @param options - the request options\n   * @returns\n   */\n  public cancelWithdrawRequest(options?: VaultPayableMethodOptions) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (!this.vault.cdoEpoch.withdrawQueue || !options?.epochNumber) {\n      return\n    }\n\n    const { abi, address } = this.vault.cdoEpoch.withdrawQueue\n    const { epochNumber } = options\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'deleteWithdrawRequest',\n      params: [epochNumber],\n    })\n  }\n\n  /**\n   * Close the current vault\n   * @returns the payable method for close the vault\n   */\n  public defaultVault() {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    const { abi, address } = this.vault.cdoEpoch\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'stopEpoch',\n      params: [0, 1],\n    })\n  }\n\n  /**\n   * Set epoch params\n   * @param options - the method params\n   * @returns the payable method for set the epoch params\n   */\n  public setEpochParams(options?: VaultPayableMethodOptions) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (\n      options?.epochDuration === undefined ||\n      options?.bufferDuration === undefined\n    ) {\n      throw Error('Epoch duration and buffer duration are mandatory')\n    }\n\n    const { epochDuration, bufferDuration } = options\n    const { abi, address } = this.vault.cdoEpoch\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'setEpochParams',\n      params: [epochDuration, bufferDuration],\n    })\n  }\n\n  /**\n   * Set epoch APR\n   * @param options - the method params\n   * @returns the payable method for set the epoch apr\n   */\n  public setAPRs(options?: VaultPayableMethodOptions) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.strategy) {\n      throw Error('Wrong vault type')\n    }\n\n    if (\n      options?.epochAPR === undefined ||\n      options.epochAPRScaled === undefined\n    ) {\n      throw Error('Epoch APRs is mandatory')\n    }\n\n    const { epochAPR, epochAPRScaled } = options\n    const { abi, address } = this.vault.strategy\n\n    if (BNlt(epochAPR) || BNlt(epochAPRScaled)) {\n      return\n    }\n\n    const apr = BNint(BNify(epochAPR).times(1e18))\n    const aprScaled = BNint(BNify(epochAPRScaled).times(1e18))\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'setAprs',\n      params: [apr, aprScaled],\n    })\n  }\n\n  /**\n   * Get wallet allowance\n   * @param options - the method options\n   * @returns the allowance amount\n   */\n  public getWalletAllowance(\n    options?: VaultNonPayableMethodOptions,\n    contract?: {\n      address: string\n    }\n  ): Promise<string> {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (\n      options?.walletAddress === undefined ||\n      options?.spender === undefined\n    ) {\n      throw Error('Wallet address is mandatory')\n    }\n\n    // Use custom contract if specified\n    const { address } = contract || this.token\n\n    const method = this.getContractNonPayableMethod({\n      abi: ERC20_ABI,\n      address,\n      method: 'allowance',\n      params: [options.walletAddress, options.spender],\n    })\n\n    if (!method) {\n      throw Error('Not method available')\n    }\n\n    return method.call<bigint>().then((allowance) => BNFixed(allowance))\n  }\n\n  /**\n   * Get wallet max withdrawable\n   * @param options - the method options\n   * @returns the withdrawable amount\n   */\n  public getWalletWithdrawable(options?: VaultNonPayableMethodOptions) {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    if (options?.walletAddress === undefined) {\n      throw Error('Wallet address is mandatory')\n    }\n\n    const { abi, address } = this.vault.cdoEpoch\n    const { address: trancheTokenAddr } = this.vault || {}\n    const method = this.getContractNonPayableMethod({\n      abi,\n      address,\n      method: 'maxWithdrawable',\n      params: [options.walletAddress, trancheTokenAddr],\n    })\n\n    if (!method) {\n      throw Error('Not method available')\n    }\n\n    return method.call<bigint>().then((withdrawable) => BNFixed(withdrawable))\n  }\n\n  /**\n   * Get instant withdraw funds\n   * @returns the payable method for get the instant withdraws funds\n   */\n  public getInstantWithdrawFunds() {\n    if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n      throw Error('Wrong vault type')\n    }\n\n    const { abi, address } = this.vault.cdoEpoch\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'getInstantWithdrawFunds',\n    })\n  }\n\n  /**\n   * Check if wallet is allowed\n   * @param options - the method options\n   * @returns true if wallet is allowed\n   */\n  public isWalletAllowed(\n    options?: VaultNonPayableMethodOptions\n  ): Promise<boolean> {\n    try {\n      if (this.vault.contractType !== 'CDO_EPOCH' || !this.vault.cdoEpoch) {\n        throw Error('Wrong vault type')\n      }\n\n      if (options?.walletAddress === undefined) {\n        throw Error('Wallet address is mandatory')\n      }\n\n      const { abi, address } = this.vault.cdoEpoch\n      const method = this.getContractNonPayableMethod({\n        abi,\n        address,\n        method: 'isWalletAllowed',\n        params: [options.walletAddress],\n      })\n\n      if (!method) {\n        throw Error('Not method available')\n      }\n\n      return method.call<boolean>()\n    } catch (error) {\n      return Promise.resolve(false)\n    }\n  }\n}\n"],"names":["moment","BNFixed","BNgt","BNgte","BNify","BNint","BNlt","compLower","VaultContract","ERC20_ABI","VaultCDOEpoch","parseContractData","contractData","cdoEpoch","endDate","startDate","minus","duration","times","toNumber","utc","toISOString","epochDuration","totalDuration","plus","bufferDuration","apr","div","APRs","BASE","instantWithdraws","disabled","deadline","aprDelta","mergeWalletsData","walletsList","updateWallets","wallets","wallet","existingWallet","find","existing","address","map","reduce","acc","innerAcc","getContractData","blockNumber","callData","makeCallData","getData","vaultContractData","depositQueueContractData","withdrawQueueContractData","Promise","all","getDepositQueueContractData","getWithdrawQueueContractData","parsedContractData","depositQueue","vault","epochNumber","isNaN","Number","prevEpochNumber","makeDepositQueueData","current","previous","withdrawQueue","makeWithdrawQueueData","abi","depositQueueContract","protocol","makeProtocolData","undefined","walletAddresses","walletAddress","withdrawQueueContract","strategy","strategyContract","makeWalletData","token","oracle","makeRewardTokensData","getPayableMethod","type","options","startEpoch","stopEpoch","defaultVault","approveToken","approveLPToken","getInstantWithdrawFunds","setEpochParams","setAPRs","processDepositQueue","processWithdrawQueue","processWithdrawalClaims","deposit","requestDeposit","withdraw","requestWithdraw","claimWithdraw","claimDepositRequest","cancelDepositRequest","claimWithdrawRequest","cancelWithdrawRequest","Error","error","console","getValue","isWalletAllowed","getWalletDeposit","getWalletBalance","getWalletAllowance","getWalletWithdrawable","resolve","contractType","getContractPayableMethod","method","params","withDuration","epochAPR","epochInterests","overwriteInterests","mode","minTokenAmount","maxTokenAmount","interests","amount","amountCheck","checkContractAmount","isInstant","epochAPRScaled","aprScaled","contract","spender","getContractNonPayableMethod","call","then","allowance","trancheTokenAddr","withdrawable","constructor"],"mappings":"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"}