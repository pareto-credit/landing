{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/vaults/vault.mock.ts"],"sourcesContent":["import { AbiContract, DeepPartial, LocalesMock } from '../core'\nimport { WEB3_DEFAULT_ADDR, Web3BaseContractMock } from '../web3-client'\nimport {\n  Vault,\n  VaultCampaign,\n  VaultCdoEpoch,\n  VaultOperator,\n  VaultIntegration,\n  VaultParetoDollar,\n  VaultParetoDollarCollateral,\n  VaultParetoDollarStaking,\n  VaultRewardAddress,\n  VaultRewardEmission,\n  VaultRewardProgram,\n  VaultRewardProgramFrequency,\n} from './vault.model'\n\n/**\n * Vault Mock\n */\nexport function VaultMock(options?: Partial<Vault>): Vault {\n  const now = new Date().toISOString()\n\n  return {\n    _id: options?._id || 'VAULT_ID',\n    tokenId: options?.tokenId || 'TOKEN_ID',\n    chainId: options?.chainId || 'CHAIN_ID',\n    typeId: options?.typeId,\n    categoryId: options?.categoryId,\n\n    description: LocalesMock(options?.description),\n\n    name: options?.name || 'VAULT_NAME',\n    address: options?.address || 'VAULT_ADDRESS',\n    symbol: options?.symbol || 'VAULT_SYMBOL',\n    protocol: options?.protocol || 'Idle',\n    contractType: options?.contractType || 'BestYield',\n    abi: VaultAbiParamMock(options?.abi),\n\n    visibility: options?.visibility || 'HIDDEN',\n    status: options?.status || 'DISABLED',\n\n    feePercentage: options?.feePercentage || 0,\n    harvestTokenIds: options?.harvestTokenIds?.map((id) => id || 'TOKEN_ID'),\n\n    cdoEpoch: VaultCdoEpochMock(options?.cdoEpoch),\n\n    strategy: Web3BaseContractMock(options?.strategy),\n\n    rewardPrograms: options?.rewardPrograms?.map((p) =>\n      VaultRewardProgramMock(p)\n    ),\n    rewardEmissions: options?.rewardEmissions?.map((e) =>\n      VaultRewardEmissionMock(e)\n    ),\n    paretoDollar: VaultParetoDollarMock(options?.paretoDollar),\n\n    campaigns: options?.campaigns?.map((c) => VaultCampaignMock(c)),\n\n    integrations: options?.integrations?.map((i) => VaultIntegrationMock(i)),\n\n    createdAt: now,\n    createdBy: options?.createdBy || 'USER_ID',\n    updatedAt: now,\n    updatedBy: options?.updatedBy || 'USER_ID',\n  }\n}\n\nexport function VaultIntegrationMock(\n  options: VaultIntegration\n): VaultIntegration {\n  return {\n    provider: options.provider,\n    type: options.type,\n  }\n}\n\nexport function VaultCdoEpochMock(\n  options?: Partial<VaultCdoEpoch>\n): VaultCdoEpoch {\n  return {\n    abi: VaultAbiParamMock(options?.abi),\n    address: options?.address || WEB3_DEFAULT_ADDR,\n    manager: VaultOperatorMock(options?.manager),\n    borrower: VaultOperatorMock(options?.borrower),\n    waitingPeriod: options?.waitingPeriod,\n    depositQueue:\n      options?.depositQueue && Web3BaseContractMock(options?.depositQueue),\n    withdrawQueue:\n      options?.withdrawQueue && Web3BaseContractMock(options?.withdrawQueue),\n    mode: options?.mode || 'CREDIT',\n  }\n}\n\nexport function VaultParetoDollarStakingMock(\n  options?: Partial<VaultParetoDollarStaking>\n): VaultParetoDollarStaking {\n  return {\n    tokenId: options?.tokenId || 'TOKEN_ID',\n    ...Web3BaseContractMock(options),\n  }\n}\n\nexport function VaultParetoDollarMock(\n  options?: Partial<VaultParetoDollar>\n): VaultParetoDollar {\n  return {\n    tokenId: options?.tokenId || 'TOKEN_ID',\n    managers: options?.managers || [],\n    queue: Web3BaseContractMock(options?.queue),\n    staking: VaultParetoDollarStakingMock(options?.staking),\n    collaterals: options?.collaterals?.map((c) =>\n      VaultParetoDollarCollateralMock(c)\n    ),\n  }\n}\n\nexport function VaultParetoDollarCollateralMock(\n  options?: Partial<VaultParetoDollarCollateral>\n): VaultParetoDollarCollateral {\n  return {\n    tokenId: options?.tokenId || 'TOKEN_ID',\n    tokenAddress: options?.tokenAddress || WEB3_DEFAULT_ADDR,\n  }\n}\n\nexport function VaultOperatorMock(\n  options?: Partial<VaultOperator>\n): VaultOperator {\n  return {\n    address: options?.address || '',\n    operatorId: options?.operatorId,\n  }\n}\n\nexport function VaultAbiParamMock(options?: AbiContract): AbiContract {\n  return options || []\n}\n\nexport function VaultRewardProgramMock(\n  options?: Partial<VaultRewardProgram>\n): VaultRewardProgram {\n  return {\n    isActive: options?.isActive ?? true,\n    tokenId: options?.tokenId || 'ffffffffffffffffffffffff',\n    distributionType: options?.distributionType || 'AMOUNT',\n    distributionFrequency: VaultRewardDistributionFrequency(\n      options?.distributionFrequency\n    ),\n    distributionValue: options?.distributionValue || '0',\n    startBlock: options?.startBlock,\n    endBlock: options?.endBlock,\n    blocksAmount: options?.blocksAmount,\n    excludedAddresses: options?.excludedAddresses?.map((a) =>\n      VaultRewardAddressMock(a)\n    ),\n  }\n}\n\nexport function VaultRewardDistributionFrequency(\n  options?: Partial<VaultRewardProgramFrequency>\n): VaultRewardProgramFrequency {\n  return {\n    value: options?.value || 0,\n    unit: options?.unit || 'M',\n  }\n}\n\nexport function VaultRewardAddressMock(\n  options?: Partial<VaultRewardAddress>\n): VaultRewardAddress {\n  return {\n    address: options?.address || WEB3_DEFAULT_ADDR,\n    toRedistribute: options?.toRedistribute || false,\n  }\n}\n\nexport function VaultRewardEmissionMock(\n  options?: Partial<VaultRewardEmission>\n): VaultRewardEmission {\n  return {\n    tokenId: options?.tokenId || 'TOKEN_ID',\n    emissionRate: options?.emissionRate || '0',\n    frequency: options?.frequency || 'BLOCK',\n    startBlock: options?.startBlock,\n    endBlock: options?.endBlock,\n  }\n}\n\nexport function VaultCampaignMock(\n  options?: Partial<VaultCampaign>\n): VaultCampaign {\n  return {\n    _id: options?._id || 'CAMPAIGN_ID',\n    rules: options?.rules,\n    isActive: options?.isActive || true,\n  }\n}\n"],"names":["LocalesMock","WEB3_DEFAULT_ADDR","Web3BaseContractMock","VaultMock","options","now","Date","toISOString","_id","tokenId","chainId","typeId","categoryId","description","name","address","symbol","protocol","contractType","abi","VaultAbiParamMock","visibility","status","feePercentage","harvestTokenIds","map","id","cdoEpoch","VaultCdoEpochMock","strategy","rewardPrograms","p","VaultRewardProgramMock","rewardEmissions","e","VaultRewardEmissionMock","paretoDollar","VaultParetoDollarMock","campaigns","c","VaultCampaignMock","integrations","i","VaultIntegrationMock","createdAt","createdBy","updatedAt","updatedBy","provider","type","manager","VaultOperatorMock","borrower","waitingPeriod","depositQueue","withdrawQueue","mode","VaultParetoDollarStakingMock","managers","queue","staking","collaterals","VaultParetoDollarCollateralMock","tokenAddress","operatorId","isActive","distributionType","distributionFrequency","VaultRewardDistributionFrequency","distributionValue","startBlock","endBlock","blocksAmount","excludedAddresses","a","VaultRewardAddressMock","value","unit","toRedistribute","emissionRate","frequency","rules"],"mappings":"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"}