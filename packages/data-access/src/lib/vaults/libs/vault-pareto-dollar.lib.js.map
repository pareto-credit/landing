{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/vaults/libs/vault-pareto-dollar.lib.ts"],"sourcesContent":["import { BNify } from '../../core'\nimport { ParetoDollarQueueYieldSource, VaultBlock } from '../../vault-blocks'\nimport {\n  Vault,\n  VaultYieldSource,\n  VaultYieldSourcesData,\n  VaultYieldSourcesOptions,\n  VaultYieldSourcesSideData,\n} from '../vault.model'\n\n/**\n * Get vault pareto dollar spender\n * @param vault - the vault object\n * @param kind - the spender kind\n * @returns the spender address\n */\nexport function getVaultParetoDollarSpender(\n  vault: Vault,\n  kind: 'MINT' | 'STAKE'\n) {\n  switch (kind) {\n    case 'MINT':\n      return vault.address\n    case 'STAKE':\n      return vault.paretoDollar?.staking.address\n  }\n}\n\n/**\n * Get Vault pareto dollar collateralization amounts\n * @param block - the vault block\n * @returns the collateralization amounts\n */\nexport function getVaultParetoDollarCollateralization(block: VaultBlock): {\n  value: string\n  percentage: string\n} {\n  const queue = block.paretoDollar?.queue\n\n  if (!queue) {\n    throw Error('Wrong vault contract type')\n  }\n\n  const { totalSupply } = block\n  const { totalCollateralsScaled } = queue\n\n  const value = BNify(totalCollateralsScaled).toString()\n  const percentage = BNify(value).div(BNify(totalSupply)).times(100).toString()\n\n  return { value, percentage }\n}\n\n/**\n * Get vault pareto dollar allocation data\n * @param block - the vault block\n * @param vaults - the allocation vaults\n * @param operators - the allocation operators\n * @param tokens - the allocation tokens\n * @returns the allocation data\n */\nexport function getVaultParetoDollarAllocation(\n  block: VaultBlock,\n  sourcesSideData?: VaultYieldSourcesSideData,\n  options?: VaultYieldSourcesOptions\n): VaultYieldSourcesData {\n  const queue = block.paretoDollar?.queue\n\n  if (!queue) {\n    throw Error('Wrong vault contract type')\n  }\n\n  const {\n    totalCollateralsScaled,\n    unlentBalanceScaled,\n    yieldSources = [],\n  } = queue\n\n  const total = BNify(totalCollateralsScaled).toString()\n  const unlentValue = BNify(unlentBalanceScaled).toString()\n  const unlentPercentage = BNify(unlentValue).div(total).times(100).toString()\n\n  const unlent = { value: unlentValue, percentage: unlentPercentage }\n\n  // Parse yield sources data\n  const sources = yieldSources\n    .filter((y) => y.vaultType !== 0)\n    .map((yieldSource) =>\n      parseYieldSourceAllocation(total, yieldSource, sourcesSideData, options)\n    )\n\n  return { total, unlent, sources }\n}\n\nfunction parseYieldSourceAllocation(\n  totalSources: string,\n  yieldSource: ParetoDollarQueueYieldSource,\n  sourcesData: VaultYieldSourcesSideData = {},\n  options: VaultYieldSourcesOptions = {}\n): VaultYieldSource {\n  const { vaults, operators, tokens } = sourcesData\n  const { currentKey, defaultColor, primaryColor } = options\n\n  // Check yield source type\n  const vault = vaults?.find((v) => v._id === yieldSource.vaultId)\n  const operator = operators?.find(\n    (o) =>\n      o._id === yieldSource.operatorId ||\n      o._id === vault?.cdoEpoch?.borrower.operatorId\n  )\n  const token = tokens?.find((t) => t._id === yieldSource.tokenId)\n\n  // Get yield source data\n  const label = vault?.name || token?.name || operator?.name || 'Yield source'\n  const value = BNify(yieldSource.depositedAmount).toNumber()\n  const percentage = BNify(yieldSource.depositedAmount)\n    .div(totalSources)\n    .times(100)\n    .toNumber()\n\n  const key = vault\n    ? `VAULT_${vault.symbol}`\n    : token\n    ? `TOKEN_${token.symbol}`\n    : operator\n    ? `OPERATOR_${operator.code}`\n    : 'YIELD_SOURCE'\n\n  // Yield color\n  const sourceColor = operator?.color || token?.color || primaryColor\n  const color = currentKey === key ? sourceColor : defaultColor\n\n  return {\n    key,\n    label,\n    value,\n    percentage,\n    color,\n    data: {\n      vault,\n      operator,\n      token,\n    },\n  }\n}\n"],"names":["BNify","getVaultParetoDollarSpender","vault","kind","address","paretoDollar","staking","getVaultParetoDollarCollateralization","block","queue","Error","totalSupply","totalCollateralsScaled","value","toString","percentage","div","times","getVaultParetoDollarAllocation","sourcesSideData","options","unlentBalanceScaled","yieldSources","total","unlentValue","unlentPercentage","unlent","sources","filter","y","vaultType","map","yieldSource","parseYieldSourceAllocation","totalSources","sourcesData","vaults","operators","tokens","currentKey","defaultColor","primaryColor","find","v","_id","vaultId","operator","o","operatorId","cdoEpoch","borrower","token","t","tokenId","label","name","depositedAmount","toNumber","key","symbol","code","sourceColor","color","data"],"mappings":"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"}