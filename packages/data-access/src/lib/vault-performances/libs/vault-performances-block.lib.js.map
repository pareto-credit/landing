{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/vault-performances/libs/vault-performances-block.lib.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport {\n  Block,\n  BNFixed,\n  BNgt,\n  BNgte,\n  BNify,\n  BNlte,\n  SECONDS_IN_YEAR,\n} from '../../core'\nimport { getTokenAmount, Token, TokenPriceData } from '../../tokens'\nimport { Transaction } from '../../transactions'\nimport { VaultBlockData, VaultBlocks } from '../../vault-blocks'\nimport {\n  VaultBlockEarnings,\n  VaultBlockPerformance,\n  VaultPerformance,\n} from '../vault-performance.model'\nimport { cloneDeep, defaultsDeep } from 'lodash'\nimport { WalletBlock } from '../../wallet-blocks'\nimport { VaultEpoch } from '../../vault-epochs'\nimport moment from 'moment'\n\n/**\n * Vault performance initial state\n */\nexport const VAULT_PERFORMANCE: VaultBlockPerformance = {\n  age: 0,\n  holders: 0,\n  earnings: {\n    USD: '0',\n    token: '0',\n    percentage: 0,\n  },\n  realizedAPY: 0,\n  accruedRewards: [],\n}\n\n/**\n * Init vault performance object\n * @param options partial vault performance\n * @returns vault performance object\n */\nexport function initVaultPerformance(\n  performance: Partial<VaultBlockPerformance> = {}\n): VaultBlockPerformance {\n  return defaultsDeep(cloneDeep(performance), VAULT_PERFORMANCE)\n}\n\nexport function initVaultEarnings(\n  earnings: Partial<VaultBlockEarnings> = {}\n): VaultBlockEarnings {\n  return defaultsDeep(cloneDeep(earnings), VAULT_PERFORMANCE.earnings)\n}\n\n/**\n * Calculate earnings percentage between two vault blocks\n * @param vaultBlocks current and last vault blocks\n * @returns earnings percentage\n */\nexport function getEarningsPercentage({\n  current,\n  last,\n}: VaultBlocks): BigNumber {\n  if (!last || BNlte(last.totalSupply)) {\n    return BNify()\n  }\n  return BNgt(last.price)\n    ? BNify(current.price).div(BNify(last.price)).minus(1)\n    : BNify()\n}\n\n/**\n * Calculate wallet earnings using transaction price\n * @param earnings earnings accumulator\n * @param token underlying token\n * @param transaction transaction entity\n * @param lastVaultBlock last vault block entity\n * @returns earnings generated for the transaction\n */\nexport function calculateTransactionEarnings(\n  earnings: BigNumber,\n  token: Token,\n  transaction: Transaction,\n  lastVaultBlock: VaultBlockData\n): BigNumber {\n  const tokenDecimalsDiff = 18 - token.decimals\n  const transactionEarningsPercentage = BNify(transaction.price)\n    .div(BNify(lastVaultBlock.price))\n    .minus(1)\n  const transactionEarnings = BNify(transaction.amount)\n    .times(transactionEarningsPercentage)\n    .div(`1e${tokenDecimalsDiff}`)\n  return earnings.plus(transactionEarnings)\n}\n\n/**\n * Calculate earnings using transactions price\n * @param token underlying token\n * @param lastVaultBlock last vault block\n * @param transactions transactions entities\n * @returns total earnings generated\n */\nexport function calculateTransactionsEarnings(\n  token: Token,\n  lastVaultBlock: VaultBlockData,\n  transactions?: Transaction[]\n): BigNumber {\n  if (!transactions) return BNify()\n  return transactions.reduce(\n    (earnings: BigNumber, transaction: Transaction) => {\n      return calculateTransactionEarnings(\n        earnings,\n        token,\n        transaction,\n        lastVaultBlock\n      )\n    },\n    BNify()\n  )\n}\n\n/**\n * Get vault earnings in underlying token\n * @param token token entity\n * @param vaultBlocks current and last vault blocks\n * @param redeemTransactions redeems transactions\n * @returns vault earnings in underlying tokens\n */\nexport function getVaultEarningsToken(\n  token: Token,\n  { current, last }: VaultBlocks,\n  redeemTransactions?: Transaction[]\n): BigNumber {\n  if (!last || BNlte(last.totalSupply)) {\n    return BNify()\n  }\n\n  const earningsPercentage = getEarningsPercentage({ current, last })\n\n  // Calculate earnings using last totalSupply\n  if (BNgte(current.totalSupply, last.totalSupply)) {\n    const prevNAV = BNify(last.totalSupply).times(last.price).div(1e18)\n    const currentNAV = BNify(last.totalSupply).times(current.price).div(1e18)\n    return currentNAV.minus(prevNAV)\n  }\n\n  // Calculate earnings before redeem and for redeemed amounts using transaction price\n\n  // Needed for token amount decimals\n  const tokenDecimalsDiff = 18 - token.decimals\n\n  // Calculate earnings for remaining totalSupply (after redeem)\n  const earningsToken = BNify(current.totalSupply)\n    .times(earningsPercentage)\n    .div(`1e${tokenDecimalsDiff}`)\n\n  // Calculate redeems earnings\n  const redeemEarnings = calculateTransactionsEarnings(\n    token,\n    last,\n    redeemTransactions\n  )\n\n  // Return total earnings\n  return earningsToken.plus(redeemEarnings)\n}\n\n/**\n * Calculate vault performance earnings\n * @param token vault token entity\n * @param vaultBlocks last and current vault block\n * @param tokenPriceData token USD conversion data\n * @param redeemTransactions transactions with type REDEEM for the current block\n * @returns the vault earnings\n */\nexport function getVaultEarnings(\n  token: Token,\n  { current, last }: VaultBlocks,\n  { price }: TokenPriceData,\n  redeemTransactions?: Transaction[]\n): VaultBlockEarnings {\n  if (!last || BNlte(last.totalSupply)) {\n    return initVaultEarnings()\n  }\n\n  const earningsPercentage = getEarningsPercentage({ current, last })\n  const earningsToken = getVaultEarningsToken(\n    token,\n    { current, last },\n    redeemTransactions\n  )\n  const earningsUSD = earningsToken.times(price).div(getTokenAmount(token))\n\n  return initVaultEarnings({\n    percentage: earningsPercentage.times(100).toNumber(),\n    token: BNFixed(earningsToken),\n    USD: BNFixed(earningsUSD),\n  })\n}\n\n/**\n * Get seconds between current and last vault block\n * @param block current block\n * @param lastVaultBlock last vault block data\n * @returns Seconds passed between two blocks\n */\nexport function getSecondsBetweenBlocks(\n  block: Block,\n  lastVaultBlock: VaultBlockData\n): number {\n  return BNgt(lastVaultBlock.totalSupply)\n    ? block.timestamp - lastVaultBlock.block.timestamp\n    : 0\n}\n\nexport function getVaultPerformanceAge(\n  { current, last }: VaultBlocks,\n  epochsDuration?: number\n) {\n  // Seconds between blocks\n  const totalAge = last ? getSecondsBetweenBlocks(current.block, last) : 0\n\n  // For CDO_EPOCH use the age of en epoch duration to calculate the vault performances\n  if (last?.cdoEpoch?.duration) {\n    if (epochsDuration) {\n      return epochsDuration\n    }\n\n    const totalDuration =\n      last.cdoEpoch.duration + (last.cdoEpoch.bufferDuration || 0)\n\n    return Math.max(1, Math.floor(totalAge / totalDuration)) * totalDuration\n  }\n\n  return totalAge\n}\n\n/**\n * Calculate realized APY\n * @param secondsBetweenBlocks seconds between last and current vault block\n * @param earningsPercentage earnings generated between blocks in percentage\n * @returns realized APY\n */\nexport function getVaultRealizedAPY(\n  age: number,\n  earningsPercentage: number\n): number {\n  return BNgt(age)\n    ? BNify(earningsPercentage).times(SECONDS_IN_YEAR).div(age).toNumber()\n    : 0\n}\n\n/**\n * Get vault finished epochs between blocks\n * @param vaultEpochs vault epochs\n * @param currLastBlocks vault current and prev blocks\n * @param lastWalletBlock last wallet block with balance\n * @returns vault finished epochs\n */\nexport function getVaultFinishedEpochs(\n  vaultEpochs: VaultEpoch[],\n  currLastBlocks: VaultBlocks,\n  lastWalletBlock?: WalletBlock\n): VaultEpoch[] {\n  const minTimestamp = Math.max(\n    lastWalletBlock?.block.timestamp || 0,\n    currLastBlocks.last?.block.timestamp || 0\n  )\n\n  return vaultEpochs.filter(\n    (vaultEpoch) =>\n      vaultEpoch.status === 'FINISHED' &&\n      moment(vaultEpoch.startDate).isSameOrAfter(moment.unix(minTimestamp)) &&\n      moment(vaultEpoch.endDate).isSameOrBefore(\n        moment.unix(currLastBlocks.current.block.timestamp)\n      )\n  )\n}\n\n/**\n * Calculate vault performances\n * @param block - the current block\n * @param vaultBlocks - the current and the latest blocks\n * @param tokenData - the token data\n * @returns the current vault performance\n */\nexport function getVaultPerformance(\n  { current, last }: VaultBlocks,\n  token: Token,\n  tokenPrice: TokenPriceData,\n  walletBlocksHolders: WalletBlock[],\n  lastPerformance?: VaultPerformance,\n  redeemTransactions?: Transaction[],\n  epochsDuration?: number\n): VaultBlockPerformance {\n  if (!last || BNlte(last.totalSupply)) {\n    return initVaultPerformance()\n  }\n\n  // Update holders\n  const holders = walletBlocksHolders.filter((b) => BNgt(b.balance)).length\n  const newHolders = BNify(holders)\n    .minus(BNify(lastPerformance?.holders))\n    .toNumber()\n\n  // Calculate earnings\n  const earnings = getVaultEarnings(\n    token,\n    { current, last },\n    tokenPrice,\n    redeemTransactions\n  )\n\n  // Get vault performance age\n  const age = getVaultPerformanceAge({ current, last }, epochsDuration)\n\n  // Realized APY\n  const realizedAPY = getVaultRealizedAPY(age, earnings.percentage)\n\n  return initVaultPerformance({\n    age,\n    earnings,\n    holders: newHolders,\n    realizedAPY: realizedAPY,\n  })\n}\n\n/**\n * Calculate performance aggregation\n * @param currentPerformance - the performance of the current block\n * @param vaultBlocks - the current and the latest blocks\n * @returns the aggregation of the performances\n */\nexport function getVaultAggregatedPerformance(\n  currentPerformance: VaultBlockPerformance,\n  lastPerformance?: VaultBlockPerformance\n): VaultBlockPerformance {\n  if (!lastPerformance) {\n    return currentPerformance\n  }\n\n  // Update holders\n  const holders = BNify(lastPerformance.holders).plus(\n    currentPerformance.holders\n  )\n\n  // Earnings\n  const earnings = {\n    token: BNify(lastPerformance.earnings.token)\n      .plus(currentPerformance.earnings.token)\n      .toFixed(0),\n    USD: BNify(lastPerformance.earnings.USD)\n      .plus(currentPerformance.earnings.USD)\n      .toFixed(0),\n    percentage: BNify(lastPerformance.earnings.percentage)\n      .plus(currentPerformance.earnings.percentage)\n      .toNumber(),\n  }\n\n  // Age\n  const age = BNify(lastPerformance.age).plus(currentPerformance.age).toNumber()\n\n  const realizedAPY = BNgt(age)\n    ? BNify(lastPerformance.realizedAPY)\n        .times(lastPerformance.age || 0)\n        .plus(\n          BNify(currentPerformance.realizedAPY).times(currentPerformance.age)\n        )\n        .div(age)\n    : BNify()\n\n  return initVaultPerformance({\n    age,\n    holders: holders.toNumber(),\n    earnings,\n    realizedAPY: realizedAPY.toNumber(),\n  })\n}\n"],"names":["BNFixed","BNgt","BNgte","BNify","BNlte","SECONDS_IN_YEAR","getTokenAmount","cloneDeep","defaultsDeep","moment","VAULT_PERFORMANCE","age","holders","earnings","USD","token","percentage","realizedAPY","accruedRewards","initVaultPerformance","performance","initVaultEarnings","getEarningsPercentage","current","last","totalSupply","price","div","minus","calculateTransactionEarnings","transaction","lastVaultBlock","tokenDecimalsDiff","decimals","transactionEarningsPercentage","transactionEarnings","amount","times","plus","calculateTransactionsEarnings","transactions","reduce","getVaultEarningsToken","redeemTransactions","earningsPercentage","prevNAV","currentNAV","earningsToken","redeemEarnings","getVaultEarnings","earningsUSD","toNumber","getSecondsBetweenBlocks","block","timestamp","getVaultPerformanceAge","epochsDuration","totalAge","cdoEpoch","duration","totalDuration","bufferDuration","Math","max","floor","getVaultRealizedAPY","getVaultFinishedEpochs","vaultEpochs","currLastBlocks","lastWalletBlock","minTimestamp","filter","vaultEpoch","status","startDate","isSameOrAfter","unix","endDate","isSameOrBefore","getVaultPerformance","tokenPrice","walletBlocksHolders","lastPerformance","b","balance","length","newHolders","getVaultAggregatedPerformance","currentPerformance","toFixed"],"mappings":"AACA,SAEEA,OAAO,EACPC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,KAAK,EACLC,eAAe,QACV,aAAY;AACnB,SAASC,cAAc,QAA+B,eAAc;AAQpE,SAASC,SAAS,EAAEC,YAAY,QAAQ,SAAQ;AAGhD,OAAOC,YAAY,SAAQ;AAE3B;;CAEC,GACD,OAAO,MAAMC,oBAA2C;IACtDC,KAAK;IACLC,SAAS;IACTC,UAAU;QACRC,KAAK;QACLC,OAAO;QACPC,YAAY;IACd;IACAC,aAAa;IACbC,gBAAgB,EAAE;AACpB,EAAC;AAED;;;;CAIC,GACD,OAAO,SAASC,qBACdC,cAA8C,CAAC,CAAC;IAEhD,OAAOZ,aAAaD,UAAUa,cAAcV;AAC9C;AAEA,OAAO,SAASW,kBACdR,WAAwC,CAAC,CAAC;IAE1C,OAAOL,aAAaD,UAAUM,WAAWH,kBAAkBG,QAAQ;AACrE;AAEA;;;;CAIC,GACD,OAAO,SAASS,sBAAsB,EACpCC,OAAO,EACPC,IAAI,EACQ;IACZ,IAAI,CAACA,QAAQpB,MAAMoB,KAAKC,WAAW,GAAG;QACpC,OAAOtB;IACT;IACA,OAAOF,KAAKuB,KAAKE,KAAK,IAClBvB,MAAMoB,QAAQG,KAAK,EAAEC,GAAG,CAACxB,MAAMqB,KAAKE,KAAK,GAAGE,KAAK,CAAC,KAClDzB;AACN;AAEA;;;;;;;CAOC,GACD,OAAO,SAAS0B,6BACdhB,QAAmB,EACnBE,KAAY,EACZe,WAAwB,EACxBC,cAA8B;IAE9B,MAAMC,oBAAoB,KAAKjB,MAAMkB,QAAQ;IAC7C,MAAMC,gCAAgC/B,MAAM2B,YAAYJ,KAAK,EAC1DC,GAAG,CAACxB,MAAM4B,eAAeL,KAAK,GAC9BE,KAAK,CAAC;IACT,MAAMO,sBAAsBhC,MAAM2B,YAAYM,MAAM,EACjDC,KAAK,CAACH,+BACNP,GAAG,CAAC,CAAC,EAAE,EAAEK,kBAAkB,CAAC;IAC/B,OAAOnB,SAASyB,IAAI,CAACH;AACvB;AAEA;;;;;;CAMC,GACD,OAAO,SAASI,8BACdxB,KAAY,EACZgB,cAA8B,EAC9BS,YAA4B;IAE5B,IAAI,CAACA,cAAc,OAAOrC;IAC1B,OAAOqC,aAAaC,MAAM,CACxB,CAAC5B,UAAqBiB;QACpB,OAAOD,6BACLhB,UACAE,OACAe,aACAC;IAEJ,GACA5B;AAEJ;AAEA;;;;;;CAMC,GACD,OAAO,SAASuC,sBACd3B,KAAY,EACZ,EAAEQ,OAAO,EAAEC,IAAI,EAAe,EAC9BmB,kBAAkC;IAElC,IAAI,CAACnB,QAAQpB,MAAMoB,KAAKC,WAAW,GAAG;QACpC,OAAOtB;IACT;IAEA,MAAMyC,qBAAqBtB,sBAAsB;QAAEC;QAASC;IAAK;IAEjE,4CAA4C;IAC5C,IAAItB,MAAMqB,QAAQE,WAAW,EAAED,KAAKC,WAAW,GAAG;QAChD,MAAMoB,UAAU1C,MAAMqB,KAAKC,WAAW,EAAEY,KAAK,CAACb,KAAKE,KAAK,EAAEC,GAAG,CAAC;QAC9D,MAAMmB,aAAa3C,MAAMqB,KAAKC,WAAW,EAAEY,KAAK,CAACd,QAAQG,KAAK,EAAEC,GAAG,CAAC;QACpE,OAAOmB,WAAWlB,KAAK,CAACiB;IAC1B;IAEA,oFAAoF;IAEpF,mCAAmC;IACnC,MAAMb,oBAAoB,KAAKjB,MAAMkB,QAAQ;IAE7C,8DAA8D;IAC9D,MAAMc,gBAAgB5C,MAAMoB,QAAQE,WAAW,EAC5CY,KAAK,CAACO,oBACNjB,GAAG,CAAC,CAAC,EAAE,EAAEK,kBAAkB,CAAC;IAE/B,6BAA6B;IAC7B,MAAMgB,iBAAiBT,8BACrBxB,OACAS,MACAmB;IAGF,wBAAwB;IACxB,OAAOI,cAAcT,IAAI,CAACU;AAC5B;AAEA;;;;;;;CAOC,GACD,OAAO,SAASC,iBACdlC,KAAY,EACZ,EAAEQ,OAAO,EAAEC,IAAI,EAAe,EAC9B,EAAEE,KAAK,EAAkB,EACzBiB,kBAAkC;IAElC,IAAI,CAACnB,QAAQpB,MAAMoB,KAAKC,WAAW,GAAG;QACpC,OAAOJ;IACT;IAEA,MAAMuB,qBAAqBtB,sBAAsB;QAAEC;QAASC;IAAK;IACjE,MAAMuB,gBAAgBL,sBACpB3B,OACA;QAAEQ;QAASC;IAAK,GAChBmB;IAEF,MAAMO,cAAcH,cAAcV,KAAK,CAACX,OAAOC,GAAG,CAACrB,eAAeS;IAElE,OAAOM,kBAAkB;QACvBL,YAAY4B,mBAAmBP,KAAK,CAAC,KAAKc,QAAQ;QAClDpC,OAAOf,QAAQ+C;QACfjC,KAAKd,QAAQkD;IACf;AACF;AAEA;;;;;CAKC,GACD,OAAO,SAASE,wBACdC,KAAY,EACZtB,cAA8B;IAE9B,OAAO9B,KAAK8B,eAAeN,WAAW,IAClC4B,MAAMC,SAAS,GAAGvB,eAAesB,KAAK,CAACC,SAAS,GAChD;AACN;AAEA,OAAO,SAASC,uBACd,EAAEhC,OAAO,EAAEC,IAAI,EAAe,EAC9BgC,cAAuB;QAMnBhC;IAJJ,yBAAyB;IACzB,MAAMiC,WAAWjC,OAAO4B,wBAAwB7B,QAAQ8B,KAAK,EAAE7B,QAAQ;IAEvE,qFAAqF;IACrF,IAAIA,yBAAAA,iBAAAA,KAAMkC,QAAQ,qBAAdlC,eAAgBmC,QAAQ,EAAE;QAC5B,IAAIH,gBAAgB;YAClB,OAAOA;QACT;QAEA,MAAMI,gBACJpC,KAAKkC,QAAQ,CAACC,QAAQ,GAAInC,CAAAA,KAAKkC,QAAQ,CAACG,cAAc,IAAI,CAAA;QAE5D,OAAOC,KAAKC,GAAG,CAAC,GAAGD,KAAKE,KAAK,CAACP,WAAWG,kBAAkBA;IAC7D;IAEA,OAAOH;AACT;AAEA;;;;;CAKC,GACD,OAAO,SAASQ,oBACdtD,GAAW,EACXiC,kBAA0B;IAE1B,OAAO3C,KAAKU,OACRR,MAAMyC,oBAAoBP,KAAK,CAAChC,iBAAiBsB,GAAG,CAAChB,KAAKwC,QAAQ,KAClE;AACN;AAEA;;;;;;CAMC,GACD,OAAO,SAASe,uBACdC,WAAyB,EACzBC,cAA2B,EAC3BC,eAA6B;QAI3BD;IAFF,MAAME,eAAeR,KAAKC,GAAG,CAC3BM,CAAAA,mCAAAA,gBAAiBhB,KAAK,CAACC,SAAS,KAAI,GACpCc,EAAAA,uBAAAA,eAAe5C,IAAI,qBAAnB4C,qBAAqBf,KAAK,CAACC,SAAS,KAAI;IAG1C,OAAOa,YAAYI,MAAM,CACvB,CAACC,aACCA,WAAWC,MAAM,KAAK,cACtBhE,OAAO+D,WAAWE,SAAS,EAAEC,aAAa,CAAClE,OAAOmE,IAAI,CAACN,kBACvD7D,OAAO+D,WAAWK,OAAO,EAAEC,cAAc,CACvCrE,OAAOmE,IAAI,CAACR,eAAe7C,OAAO,CAAC8B,KAAK,CAACC,SAAS;AAG1D;AAEA;;;;;;CAMC,GACD,OAAO,SAASyB,oBACd,EAAExD,OAAO,EAAEC,IAAI,EAAe,EAC9BT,KAAY,EACZiE,UAA0B,EAC1BC,mBAAkC,EAClCC,eAAkC,EAClCvC,kBAAkC,EAClCa,cAAuB;IAEvB,IAAI,CAAChC,QAAQpB,MAAMoB,KAAKC,WAAW,GAAG;QACpC,OAAON;IACT;IAEA,iBAAiB;IACjB,MAAMP,UAAUqE,oBAAoBV,MAAM,CAAC,CAACY,IAAMlF,KAAKkF,EAAEC,OAAO,GAAGC,MAAM;IACzE,MAAMC,aAAanF,MAAMS,SACtBgB,KAAK,CAACzB,MAAM+E,mCAAAA,gBAAiBtE,OAAO,GACpCuC,QAAQ;IAEX,qBAAqB;IACrB,MAAMtC,WAAWoC,iBACflC,OACA;QAAEQ;QAASC;IAAK,GAChBwD,YACArC;IAGF,4BAA4B;IAC5B,MAAMhC,MAAM4C,uBAAuB;QAAEhC;QAASC;IAAK,GAAGgC;IAEtD,eAAe;IACf,MAAMvC,cAAcgD,oBAAoBtD,KAAKE,SAASG,UAAU;IAEhE,OAAOG,qBAAqB;QAC1BR;QACAE;QACAD,SAAS0E;QACTrE,aAAaA;IACf;AACF;AAEA;;;;;CAKC,GACD,OAAO,SAASsE,8BACdC,kBAAyC,EACzCN,eAAuC;IAEvC,IAAI,CAACA,iBAAiB;QACpB,OAAOM;IACT;IAEA,iBAAiB;IACjB,MAAM5E,UAAUT,MAAM+E,gBAAgBtE,OAAO,EAAE0B,IAAI,CACjDkD,mBAAmB5E,OAAO;IAG5B,WAAW;IACX,MAAMC,WAAW;QACfE,OAAOZ,MAAM+E,gBAAgBrE,QAAQ,CAACE,KAAK,EACxCuB,IAAI,CAACkD,mBAAmB3E,QAAQ,CAACE,KAAK,EACtC0E,OAAO,CAAC;QACX3E,KAAKX,MAAM+E,gBAAgBrE,QAAQ,CAACC,GAAG,EACpCwB,IAAI,CAACkD,mBAAmB3E,QAAQ,CAACC,GAAG,EACpC2E,OAAO,CAAC;QACXzE,YAAYb,MAAM+E,gBAAgBrE,QAAQ,CAACG,UAAU,EAClDsB,IAAI,CAACkD,mBAAmB3E,QAAQ,CAACG,UAAU,EAC3CmC,QAAQ;IACb;IAEA,MAAM;IACN,MAAMxC,MAAMR,MAAM+E,gBAAgBvE,GAAG,EAAE2B,IAAI,CAACkD,mBAAmB7E,GAAG,EAAEwC,QAAQ;IAE5E,MAAMlC,cAAchB,KAAKU,OACrBR,MAAM+E,gBAAgBjE,WAAW,EAC9BoB,KAAK,CAAC6C,gBAAgBvE,GAAG,IAAI,GAC7B2B,IAAI,CACHnC,MAAMqF,mBAAmBvE,WAAW,EAAEoB,KAAK,CAACmD,mBAAmB7E,GAAG,GAEnEgB,GAAG,CAAChB,OACPR;IAEJ,OAAOgB,qBAAqB;QAC1BR;QACAC,SAASA,QAAQuC,QAAQ;QACzBtC;QACAI,aAAaA,YAAYkC,QAAQ;IACnC;AACF"}