{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/vault-performances/vault-performance.mock.ts"],"sourcesContent":["import { BlockMock, DeepPartial, RewardMock } from '../core'\nimport {\n  VaultBlockEarnings,\n  VaultBlockPerformance,\n  VaultPerformance,\n} from './vault-performance.model'\n\n/**\n * Vault Performance Mock\n */\nexport function VaultPerformanceMock(\n  options?: DeepPartial<VaultPerformance>\n): VaultPerformance {\n  const now = new Date().toISOString()\n\n  return {\n    _id: options?._id || 'VAULT_PERFORMANCE_ID',\n\n    vaultId: options?.vaultId || 'VAULT_ID',\n    vaultBlockId: options?.vaultBlockId || 'VAULT_BLOCK_ID',\n    block: BlockMock(options?.block),\n    age: options?.age || 0,\n    holders: options?.holders || 0,\n    realizedAPY: options?.realizedAPY || 0,\n    earnings: VaultBlockEarningsMock(options?.earnings),\n    accruedRewards: options?.accruedRewards?.map((a) => RewardMock(a)),\n\n    createdAt: now,\n    createdBy: options?.createdBy || 'USER_ID',\n    updatedAt: now,\n    updatedBy: options?.updatedBy || 'USER_ID',\n  }\n}\n\nexport function VaultBlockEarningsMock(\n  options?: Partial<VaultBlockEarnings>\n): VaultBlockEarnings {\n  return {\n    token: options?.token || '0',\n    USD: options?.USD || '0',\n    percentage: options?.percentage || 0,\n  }\n}\n\nexport function VaultBlockPerformanceMock(\n  options?: DeepPartial<VaultBlockPerformance>\n): VaultBlockPerformance {\n  return {\n    age: options?.age || 0,\n    holders: options?.holders || 0,\n    realizedAPY: options?.realizedAPY || 0,\n    earnings: VaultBlockEarningsMock(options?.earnings),\n    accruedRewards: options?.accruedRewards?.map((a) => RewardMock(a)),\n  }\n}\n"],"names":["BlockMock","RewardMock","VaultPerformanceMock","options","now","Date","toISOString","_id","vaultId","vaultBlockId","block","age","holders","realizedAPY","earnings","VaultBlockEarningsMock","accruedRewards","map","a","createdAt","createdBy","updatedAt","updatedBy","token","USD","percentage","VaultBlockPerformanceMock"],"mappings":"AAAA,SAASA,SAAS,EAAeC,UAAU,QAAQ,UAAS;AAO5D;;CAEC,GACD,OAAO,SAASC,qBACdC,OAAuC;QAcrBA;IAZlB,MAAMC,MAAM,IAAIC,OAAOC,WAAW;IAElC,OAAO;QACLC,KAAKJ,CAAAA,2BAAAA,QAASI,GAAG,KAAI;QAErBC,SAASL,CAAAA,2BAAAA,QAASK,OAAO,KAAI;QAC7BC,cAAcN,CAAAA,2BAAAA,QAASM,YAAY,KAAI;QACvCC,OAAOV,UAAUG,2BAAAA,QAASO,KAAK;QAC/BC,KAAKR,CAAAA,2BAAAA,QAASQ,GAAG,KAAI;QACrBC,SAAST,CAAAA,2BAAAA,QAASS,OAAO,KAAI;QAC7BC,aAAaV,CAAAA,2BAAAA,QAASU,WAAW,KAAI;QACrCC,UAAUC,uBAAuBZ,2BAAAA,QAASW,QAAQ;QAClDE,cAAc,EAAEb,4BAAAA,0BAAAA,QAASa,cAAc,qBAAvBb,wBAAyBc,GAAG,CAAC,CAACC,IAAMjB,WAAWiB;QAE/DC,WAAWf;QACXgB,WAAWjB,CAAAA,2BAAAA,QAASiB,SAAS,KAAI;QACjCC,WAAWjB;QACXkB,WAAWnB,CAAAA,2BAAAA,QAASmB,SAAS,KAAI;IACnC;AACF;AAEA,OAAO,SAASP,uBACdZ,OAAqC;IAErC,OAAO;QACLoB,OAAOpB,CAAAA,2BAAAA,QAASoB,KAAK,KAAI;QACzBC,KAAKrB,CAAAA,2BAAAA,QAASqB,GAAG,KAAI;QACrBC,YAAYtB,CAAAA,2BAAAA,QAASsB,UAAU,KAAI;IACrC;AACF;AAEA,OAAO,SAASC,0BACdvB,OAA4C;QAO1BA;IALlB,OAAO;QACLQ,KAAKR,CAAAA,2BAAAA,QAASQ,GAAG,KAAI;QACrBC,SAAST,CAAAA,2BAAAA,QAASS,OAAO,KAAI;QAC7BC,aAAaV,CAAAA,2BAAAA,QAASU,WAAW,KAAI;QACrCC,UAAUC,uBAAuBZ,2BAAAA,QAASW,QAAQ;QAClDE,cAAc,EAAEb,4BAAAA,0BAAAA,QAASa,cAAc,qBAAvBb,wBAAyBc,GAAG,CAAC,CAACC,IAAMjB,WAAWiB;IACjE;AACF"}