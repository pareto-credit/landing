{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/wallet-blocks/libs/wallet-blocks.lib.ts"],"sourcesContent":["import { BigNumberValue, BNFixed, BNgt, BNify, iBigInt } from '../../core'\nimport { fixAmount, fixTokenAmount, Token } from '../../tokens'\nimport { VaultBlock, VaultBlockData } from '../../vault-blocks'\nimport {\n  Vault,\n  VaultContractPoolData,\n  VaultPool,\n  VaultWalletPoolData,\n  VaultWalletPoolTokenData,\n} from '../../vaults'\nimport { Web3Protocol } from '../../web3-client'\nimport { WalletBlock, WalletBlockData } from '../wallet-block.model'\n\n/**\n * Get the total amount of token held by a wallet in a pool\n * @param token token object\n * @param walletPool wallet pool object\n * @returns total amount\n */\nexport function getWalletPoolTokensBalance(\n  tokenId: string,\n  walletPool: VaultWalletPoolData\n): iBigInt {\n  const tokens = walletPool.tokens?.filter((t) => t.tokenId === tokenId)\n  if (!tokens?.length) {\n    return '0'\n  }\n\n  return BNFixed(\n    (tokens || []).reduce((sum, t) => sum.plus(t.balance), BNify(0))\n  )\n}\n\n/**\n * Get wallet balance converted in tokens including requests\n * @param walletBlock wallet block\n * @param vaultBlock vault block\n * @returns wallet vault balance in underlying\n */\nexport function getWalletBalanceWithRequests(\n  walletBlock: WalletBlockData,\n  vaultBlock: VaultBlockData\n): iBigInt {\n  const totalBalance = BNify(walletBlock.balance).plus(\n    walletBlock.cdoEpoch?.pendingWithdrawAmount || '0'\n  )\n  const tokenBalance = fixAmount(totalBalance.times(vaultBlock.price), 18)\n\n  return BNFixed(\n    tokenBalance\n      .plus(walletBlock.cdoEpoch?.withdrawsRequests || '0')\n      .plus(walletBlock.cdoEpoch?.instantWithdrawsRequests || '0')\n  )\n}\n\n/**\n * Calculate wallet pool balance using tokens or exchangeRate\n * @param walletPool wallet pool data\n * @param vaultPoolData vault pool data\n * @param vaultPool vault pool config\n * @param tokens tokens balances\n * @returns pool wallet balance\n */\nexport function getPoolWalletBalance(\n  vaultPools: VaultContractPoolData[],\n  walletPools: VaultWalletPoolData[],\n  walletPool: VaultWalletPoolData,\n  vaultPoolData?: VaultContractPoolData,\n  vaultPool?: VaultPool,\n  tokens?: VaultWalletPoolTokenData[]\n): iBigInt {\n  // Use tokens to calculate balance\n  const hasSingleToken =\n    vaultPool &&\n    tokens?.length === 1 &&\n    tokens[0].tokenId === vaultPool.tokens?.[0].tokenId\n\n  if (hasSingleToken) {\n    return tokens.reduce((acc, t) => BNFixed(BNify(acc).plus(t.balance)), '0')\n  }\n\n  switch (walletPool.protocol) {\n    case 'PendleLP':\n      return getPendleWalletBalance(vaultPools, walletPools)\n    default:\n      // Calculate balance using lpBalance and exchangeRage\n      return BNFixed(\n        BNify(walletPool.lpBalance)\n          .times(vaultPoolData?.exchangeRate || 1e18)\n          .div(1e18)\n      )\n  }\n}\n\n/**\n * Get Pendle underlying token balance\n * @param vaultPools vault pools data\n * @param walletPools wallet pools data\n * @returns pendle underlying token balance\n */\nexport function getPendleWalletBalance(\n  vaultPools: VaultContractPoolData[],\n  walletPools: VaultWalletPoolData[]\n): iBigInt {\n  const pendleLPVaultpool = vaultPools.find((p) => p.protocol === 'PendleLP')\n  const pendlePTVaultPool = vaultPools.find((p) => p.protocol === 'PendlePT')\n  const pendleLPWalletPool = walletPools.find((p) => p.protocol === 'PendleLP')\n\n  if (!pendleLPVaultpool || !pendleLPWalletPool) {\n    return '0'\n  }\n\n  const poolShare = BNgt(pendleLPVaultpool.totalSupply)\n    ? BNify(pendleLPWalletPool.lpBalance).div(\n        pendleLPVaultpool.totalSupply || 0\n      )\n    : 0\n\n  return BNFixed(\n    BNify(pendleLPVaultpool.underlyingBalance)\n      .plus(pendlePTVaultPool?.totalSupply || '0')\n      .times(poolShare)\n  )\n}\n\n/**\n * Convert pool token balance to USD\n * @param vault vault\n * @param vaultToken vault token\n * @param vaultBlock vault block\n * @param tokenId pool tokenID\n * @param balance pool token balance\n * @returns pool token balance in USD\n */\nexport function getWalletBlockPoolTokenBalanceUSD(\n  vault: Vault,\n  vaultToken: Token,\n  vaultBlock: VaultBlock,\n  tokenId: string,\n  balance: iBigInt\n): iBigInt {\n  // Convert sUSP balance to USD\n  if (vault.paretoDollar?.staking.tokenId === tokenId) {\n    const amountUSD = fixTokenAmount(\n      vaultToken,\n      BNify(balance).times(vaultBlock.price)\n    )\n    return BNFixed(fixTokenAmount(vaultToken, amountUSD).times(1e6))\n  }\n  return BNFixed(fixTokenAmount(vaultToken, balance).times(1e6))\n}\n\n/**\n * Get pool token balance based on protocol\n * @param token token object\n * @param walletPool wallet pool\n * @returns pool token balance\n */\nexport function getWalletBlockPoolTokenBalance(\n  tokenId: string,\n  walletPool: VaultWalletPoolData\n): iBigInt {\n  switch (walletPool.protocol) {\n    // Divide by 2 total pool balance\n    case 'Balancer': {\n      if (walletPool.balance) {\n        return BNFixed(BNify(walletPool.balance).div(2))\n      }\n      return getWalletPoolTokensBalance(tokenId, walletPool)\n    }\n    default:\n      return getWalletPoolTokensBalance(tokenId, walletPool)\n  }\n}\n\n/**\n * Get total amount of token balance for a specific wallet\n * @param token token object\n * @param walletBlock wallet block object\n * @returns token total balance\n */\nexport function getWalletBlockTokenBalance(\n  token: Token,\n  walletBlock: WalletBlock,\n  startBalance: BigNumberValue = 0,\n  protocols?: Web3Protocol[]\n): iBigInt {\n  const balance = (walletBlock.pools || []).reduce((balance, pool) => {\n    // Check protocol corrispondence\n    if (protocols && !protocols.includes(pool.protocol)) {\n      return balance\n    }\n    const poolTokenBalance = getWalletBlockPoolTokenBalance(token._id, pool)\n    return balance.plus(poolTokenBalance)\n  }, BNify(startBalance))\n  return BNFixed(balance)\n}\n\nexport type WalletBlockBalanceField =\n  | 'tokenBalance'\n  | 'uspPools'\n  | 'uspBalance'\n  | 'uspAggregated'\n  | 'suspAggregated'\n  | 'balance'\n  | 'tokenAggregated'\n\n/**\n * Wallet block balance based on vault type\n * @param vaultType vault contract type\n * @param walletBlock wallet block\n * @returns wallet block balance\n */\nexport function getWalletBlockBalance(\n  walletBlock: WalletBlock,\n  balanceField?: WalletBlockBalanceField,\n  options?: {\n    token?: Token\n    protocols?: Web3Protocol[]\n  }\n): iBigInt {\n  const { token, protocols } = options || {}\n\n  const poolToken = token\n    ? getWalletBlockTokenBalance(token, walletBlock, 0, protocols)\n    : '0'\n  switch (balanceField) {\n    case 'balance':\n      return walletBlock.balance\n    case 'tokenAggregated':\n      return BNFixed(\n        BNify(walletBlock.balance)\n          .plus(walletBlock.cdoEpoch?.pendingWithdrawAmount || '0')\n          .plus(poolToken)\n      )\n    case 'suspAggregated':\n      return BNFixed(BNify(walletBlock.balance).plus(poolToken))\n    case 'uspAggregated':\n      return BNFixed(\n        BNify(walletBlock.paretoDollar?.uspBalance)\n          .plus(walletBlock.tokenBalance)\n          .plus(poolToken)\n      )\n    case 'uspPools':\n      return BNFixed(\n        BNify(walletBlock.paretoDollar?.uspBalance).plus(poolToken)\n      )\n    case 'uspBalance':\n      return BNFixed(\n        BNify(walletBlock.paretoDollar?.uspBalance).plus(\n          walletBlock.tokenBalance\n        )\n      )\n    default:\n      return walletBlock.tokenBalance\n  }\n}\n"],"names":["BNFixed","BNgt","BNify","fixAmount","fixTokenAmount","getWalletPoolTokensBalance","tokenId","walletPool","tokens","filter","t","length","reduce","sum","plus","balance","getWalletBalanceWithRequests","walletBlock","vaultBlock","totalBalance","cdoEpoch","pendingWithdrawAmount","tokenBalance","times","price","withdrawsRequests","instantWithdrawsRequests","getPoolWalletBalance","vaultPools","walletPools","vaultPoolData","vaultPool","hasSingleToken","acc","protocol","getPendleWalletBalance","lpBalance","exchangeRate","div","pendleLPVaultpool","find","p","pendlePTVaultPool","pendleLPWalletPool","poolShare","totalSupply","underlyingBalance","getWalletBlockPoolTokenBalanceUSD","vault","vaultToken","paretoDollar","staking","amountUSD","getWalletBlockPoolTokenBalance","getWalletBlockTokenBalance","token","startBalance","protocols","pools","pool","includes","poolTokenBalance","_id","getWalletBlockBalance","balanceField","options","poolToken","uspBalance"],"mappings":"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"}