{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/wallet-blocks/wallet-block.mock.ts"],"sourcesContent":["import { DeepPartial } from '../core'\nimport { WalletBlock } from './wallet-block.model'\nimport { BlockMock } from '../core/utility.mock'\nimport {\n  VaultWalletParetoDollarData,\n  VaultWalletPoolData,\n  VaultWalletPoolTokenData,\n} from '../vaults'\nimport { WEB3_DEFAULT_ADDR } from '../web3-client'\n\n/**\n * WalletBlock Mock\n */\nexport function WalletBlockMock(\n  options?: DeepPartial<WalletBlock>\n): WalletBlock {\n  const now = new Date().toISOString()\n\n  return {\n    _id: options?._id || 'WALLET_BLOCK_ID',\n\n    block: BlockMock(options?.block),\n\n    walletId: options?.walletId || 'WALLET_ID',\n    walletAddress: options?.walletAddress || 'WALLET_ADDRESS',\n\n    vaultId: options?.vaultId || 'VAULT_ID',\n    vaultAddress: options?.vaultAddress || 'VAULT_ADDRESS',\n\n    balance: options?.balance || '0',\n    tokenBalance: options?.tokenBalance || '0',\n\n    paretoDollar: WalletBlockParetoDollarMock(options?.paretoDollar),\n    pools: options?.pools?.map((p) => WalletBlockPoolMock(p)),\n\n    createdAt: now,\n    createdBy: options?.createdBy || 'USER_ID',\n    updatedAt: now,\n    updatedBy: options?.updatedBy || 'USER_ID',\n  }\n}\n\nexport function WalletBlockParetoDollarMock(\n  options?: Partial<VaultWalletParetoDollarData>\n): VaultWalletParetoDollarData {\n  return {\n    uspBalance: options?.uspBalance,\n    stakedBalance: options?.stakedBalance,\n  }\n}\n\nexport function WalletBlockPoolMock(\n  options?: DeepPartial<VaultWalletPoolData>\n): VaultWalletPoolData {\n  return {\n    balance: options?.balance,\n    lpBalance: options?.lpBalance,\n    address: options?.address || WEB3_DEFAULT_ADDR,\n    protocol: options?.protocol || 'Idle',\n    operatorId: options?.operatorId,\n    tokens: options?.tokens?.map((t) => WalletBlockPoolTokenMock(t)),\n  }\n}\n\nexport function WalletBlockPoolTokenMock(\n  options?: Partial<VaultWalletPoolTokenData>\n): VaultWalletPoolTokenData {\n  return {\n    tokenId: options?.tokenId,\n    tokenAddress: options?.tokenAddress || WEB3_DEFAULT_ADDR,\n    balance: options?.balance || '0',\n    balanceScaled: options?.balanceScaled,\n  }\n}\n"],"names":["BlockMock","WEB3_DEFAULT_ADDR","WalletBlockMock","options","now","Date","toISOString","_id","block","walletId","walletAddress","vaultId","vaultAddress","balance","tokenBalance","paretoDollar","WalletBlockParetoDollarMock","pools","map","p","WalletBlockPoolMock","createdAt","createdBy","updatedAt","updatedBy","uspBalance","stakedBalance","lpBalance","address","protocol","operatorId","tokens","t","WalletBlockPoolTokenMock","tokenId","tokenAddress","balanceScaled"],"mappings":"AAEA,SAASA,SAAS,QAAQ,uBAAsB;AAMhD,SAASC,iBAAiB,QAAQ,iBAAgB;AAElD;;CAEC,GACD,OAAO,SAASC,gBACdC,OAAkC;QAmBzBA;IAjBT,MAAMC,MAAM,IAAIC,OAAOC,WAAW;IAElC,OAAO;QACLC,KAAKJ,CAAAA,2BAAAA,QAASI,GAAG,KAAI;QAErBC,OAAOR,UAAUG,2BAAAA,QAASK,KAAK;QAE/BC,UAAUN,CAAAA,2BAAAA,QAASM,QAAQ,KAAI;QAC/BC,eAAeP,CAAAA,2BAAAA,QAASO,aAAa,KAAI;QAEzCC,SAASR,CAAAA,2BAAAA,QAASQ,OAAO,KAAI;QAC7BC,cAAcT,CAAAA,2BAAAA,QAASS,YAAY,KAAI;QAEvCC,SAASV,CAAAA,2BAAAA,QAASU,OAAO,KAAI;QAC7BC,cAAcX,CAAAA,2BAAAA,QAASW,YAAY,KAAI;QAEvCC,cAAcC,4BAA4Bb,2BAAAA,QAASY,YAAY;QAC/DE,KAAK,EAAEd,4BAAAA,iBAAAA,QAASc,KAAK,qBAAdd,eAAgBe,GAAG,CAAC,CAACC,IAAMC,oBAAoBD;QAEtDE,WAAWjB;QACXkB,WAAWnB,CAAAA,2BAAAA,QAASmB,SAAS,KAAI;QACjCC,WAAWnB;QACXoB,WAAWrB,CAAAA,2BAAAA,QAASqB,SAAS,KAAI;IACnC;AACF;AAEA,OAAO,SAASR,4BACdb,OAA8C;IAE9C,OAAO;QACLsB,UAAU,EAAEtB,2BAAAA,QAASsB,UAAU;QAC/BC,aAAa,EAAEvB,2BAAAA,QAASuB,aAAa;IACvC;AACF;AAEA,OAAO,SAASN,oBACdjB,OAA0C;QAQhCA;IANV,OAAO;QACLU,OAAO,EAAEV,2BAAAA,QAASU,OAAO;QACzBc,SAAS,EAAExB,2BAAAA,QAASwB,SAAS;QAC7BC,SAASzB,CAAAA,2BAAAA,QAASyB,OAAO,KAAI3B;QAC7B4B,UAAU1B,CAAAA,2BAAAA,QAAS0B,QAAQ,KAAI;QAC/BC,UAAU,EAAE3B,2BAAAA,QAAS2B,UAAU;QAC/BC,MAAM,EAAE5B,4BAAAA,kBAAAA,QAAS4B,MAAM,qBAAf5B,gBAAiBe,GAAG,CAAC,CAACc,IAAMC,yBAAyBD;IAC/D;AACF;AAEA,OAAO,SAASC,yBACd9B,OAA2C;IAE3C,OAAO;QACL+B,OAAO,EAAE/B,2BAAAA,QAAS+B,OAAO;QACzBC,cAAchC,CAAAA,2BAAAA,QAASgC,YAAY,KAAIlC;QACvCY,SAASV,CAAAA,2BAAAA,QAASU,OAAO,KAAI;QAC7BuB,aAAa,EAAEjC,2BAAAA,QAASiC,aAAa;IACvC;AACF"}