{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/vaults/libs/vault-web3.lib.ts"],"sourcesContent":["import { Token } from '../../tokens'\nimport { VaultBlock } from '../../vault-blocks'\nimport { Web3Clients } from '../../web3-client'\nimport { VaultContractFactory } from '../classes/vault-contract.factory'\nimport { Vault, VaultContractModel, VaultKycData } from '../vault.model'\n\n/**\n * Load vault web3 data\n * @param web3Clients - the web3 clients\n * @param vault - the vault data\n * @param tokens - the tokens available\n * @param options - the options\n * @returns the web3 data\n */\nexport async function getVaultWeb3Data(\n  web3Clients: Web3Clients,\n  vault: Vault,\n  tokens: Token[],\n  options?: {\n    walletAddress?: string\n  }\n): Promise<VaultKycData> {\n  const token = tokens.find((t) => vault.tokenId === t._id)\n  const web3Client = web3Clients[vault.chainId]\n\n  if (!token) {\n    throw Error('Token not found')\n  }\n\n  // Init contract\n  const contract = VaultContractFactory.fromVault(vault, token, {\n    web3Client,\n  })\n\n  return getVaultKycData(vault, contract, options)\n}\n\n/**\n * Load all contract vault contract data\n * @param contract - the vault contract\n * @returns the promise<VaultKycData> for load contract data\n */\nasync function getVaultKycData(\n  vault: Vault,\n  contract: VaultContractModel,\n  options: {\n    walletAddress?: string\n  } = {}\n): Promise<VaultKycData> {\n  const { walletAddress } = options\n  const vaultId = vault._id\n\n  if (!walletAddress || !vault.kyc?.isActive) {\n    return {\n      vaultId,\n      isActive: !!vault.kyc?.isActive,\n    }\n  }\n\n  // Kyc data\n  const isWalletAllowed = await contract.getValue<boolean>(\n    'IS_WALLET_ALLOWED',\n    {\n      walletAddress,\n    }\n  )\n\n  return {\n    vaultId,\n    isActive: !!vault.kyc?.isActive,\n    isWalletAllowed,\n  }\n}\n\n/**\n * Get spender address for deposits\n * @param vault vault object\n * @param block vault block object\n * @returns deposit spender address\n */\nexport function getVaultDepositSpender(vault: Vault, block: VaultBlock) {\n  const isQueueEnabled = !!vault.cdoEpoch?.depositQueue?.address\n  const isEpochRunning = block.cdoEpoch?.status === 'RUNNING'\n\n  return isQueueEnabled && isEpochRunning\n    ? vault.cdoEpoch?.depositQueue?.address\n    : vault.cdoEpoch?.address\n}\n\n/**\n * Get spender address for withdraws\n * @param vault vault object\n * @param block vault block object\n * @returns withdraw spender address\n */\nexport function getVaultWithdrawSpender(vault: Vault, block: VaultBlock) {\n  const isQueueEnabled = !!vault.cdoEpoch?.withdrawQueue?.address\n  const isEpochRunning = block.cdoEpoch?.status === 'RUNNING'\n\n  return isQueueEnabled && isEpochRunning\n    ? vault.cdoEpoch?.withdrawQueue?.address\n    : undefined\n}\n"],"names":["VaultContractFactory","getVaultWeb3Data","web3Clients","vault","tokens","options","token","find","t","tokenId","_id","web3Client","chainId","Error","contract","fromVault","getVaultKycData","walletAddress","vaultId","kyc","isActive","isWalletAllowed","getValue","getVaultDepositSpender","block","isQueueEnabled","cdoEpoch","depositQueue","address","isEpochRunning","status","getVaultWithdrawSpender","withdrawQueue","undefined"],"mappings":"AAGA,SAASA,oBAAoB,QAAQ,oCAAmC;AAGxE;;;;;;;CAOC,GACD,OAAO,eAAeC,iBACpBC,WAAwB,EACxBC,KAAY,EACZC,MAAe,EACfC,OAEC;IAED,MAAMC,QAAQF,OAAOG,IAAI,CAAC,CAACC,IAAML,MAAMM,OAAO,KAAKD,EAAEE,GAAG;IACxD,MAAMC,aAAaT,WAAW,CAACC,MAAMS,OAAO,CAAC;IAE7C,IAAI,CAACN,OAAO;QACV,MAAMO,MAAM;IACd;IAEA,gBAAgB;IAChB,MAAMC,WAAWd,qBAAqBe,SAAS,CAACZ,OAAOG,OAAO;QAC5DK;IACF;IAEA,OAAOK,gBAAgBb,OAAOW,UAAUT;AAC1C;AAEA;;;;CAIC,GACD,eAAeW,gBACbb,KAAY,EACZW,QAA4B,EAC5BT,UAEI,CAAC,CAAC;QAKiBF,YAiBTA;IApBd,MAAM,EAAEc,aAAa,EAAE,GAAGZ;IAC1B,MAAMa,UAAUf,MAAMO,GAAG;IAEzB,IAAI,CAACO,iBAAiB,GAACd,aAAAA,MAAMgB,GAAG,qBAAThB,WAAWiB,QAAQ,GAAE;YAG5BjB;QAFd,OAAO;YACLe;YACAE,UAAU,CAAC,GAACjB,cAAAA,MAAMgB,GAAG,qBAAThB,YAAWiB,QAAQ;QACjC;IACF;IAEA,WAAW;IACX,MAAMC,kBAAkB,MAAMP,SAASQ,QAAQ,CAC7C,qBACA;QACEL;IACF;IAGF,OAAO;QACLC;QACAE,UAAU,CAAC,GAACjB,cAAAA,MAAMgB,GAAG,qBAAThB,YAAWiB,QAAQ;QAC/BC;IACF;AACF;AAEA;;;;;CAKC,GACD,OAAO,SAASE,uBAAuBpB,KAAY,EAAEqB,KAAiB;QAC3CrB,8BAAAA,iBACFqB,iBAGnBrB,+BAAAA,kBACAA;IALJ,MAAMsB,iBAAiB,CAAC,GAACtB,kBAAAA,MAAMuB,QAAQ,sBAAdvB,+BAAAA,gBAAgBwB,YAAY,qBAA5BxB,6BAA8ByB,OAAO;IAC9D,MAAMC,iBAAiBL,EAAAA,kBAAAA,MAAME,QAAQ,qBAAdF,gBAAgBM,MAAM,MAAK;IAElD,OAAOL,kBAAkBI,kBACrB1B,mBAAAA,MAAMuB,QAAQ,sBAAdvB,gCAAAA,iBAAgBwB,YAAY,qBAA5BxB,8BAA8ByB,OAAO,IACrCzB,mBAAAA,MAAMuB,QAAQ,qBAAdvB,iBAAgByB,OAAO;AAC7B;AAEA;;;;;CAKC,GACD,OAAO,SAASG,wBAAwB5B,KAAY,EAAEqB,KAAiB;QAC5CrB,+BAAAA,iBACFqB,iBAGnBrB,gCAAAA;IAJJ,MAAMsB,iBAAiB,CAAC,GAACtB,kBAAAA,MAAMuB,QAAQ,sBAAdvB,gCAAAA,gBAAgB6B,aAAa,qBAA7B7B,8BAA+ByB,OAAO;IAC/D,MAAMC,iBAAiBL,EAAAA,kBAAAA,MAAME,QAAQ,qBAAdF,gBAAgBM,MAAM,MAAK;IAElD,OAAOL,kBAAkBI,kBACrB1B,mBAAAA,MAAMuB,QAAQ,sBAAdvB,iCAAAA,iBAAgB6B,aAAa,qBAA7B7B,+BAA+ByB,OAAO,GACtCK;AACN"}