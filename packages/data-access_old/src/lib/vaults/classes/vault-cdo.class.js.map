{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/vaults/classes/vault-cdo.class.ts"],"sourcesContent":["import { BlockNumber } from '../../core'\nimport { Token } from '../../tokens'\nimport { Web3CallData } from '../../web3-client'\nimport {\n  Vault,\n  VaultContractData,\n  VaultContractModel,\n  VaultContractOptions,\n  VaultNonPayableMethodOptions,\n  VaultNonPayableMethodType,\n  VaultPayableMethodType,\n} from '../vault.model'\nimport { VaultContract } from './vault-contract.class'\n\nexport class VaultCDO extends VaultContract implements VaultContractModel {\n  constructor(vault: Vault, token: Token, options?: VaultContractOptions) {\n    super(vault, token, options)\n\n    if (!vault.cdo) {\n      throw new Error('Vault without CDO data')\n    }\n  }\n\n  /**\n   * Get contract data\n   * @returns the blockchain contract data\n   */\n  public async getContractData(\n    blockNumber: BlockNumber = 'latest'\n  ): Promise<VaultContractData> {\n    return this.getData(this.makeCallData(), blockNumber)\n  }\n\n  /**\n   * Get vault payable method\n   * @param type the payment method type\n   * @param options the payment method options\n   * @returns the web3 payable method\n   */\n  public getPayableMethod(type: VaultPayableMethodType, options?: any) {\n    switch (type) {\n      case 'APPROVE':\n        return this.approveToken(options)\n      default:\n        throw new Error('Method not available for this kind of vault')\n    }\n  }\n\n  /**\n   * Get vault non payable method\n   * @param type\n   * @param params\n   */\n  public getValue(\n    type: VaultNonPayableMethodType,\n    options?: VaultNonPayableMethodOptions\n  ): Promise<any> {\n    switch (type) {\n      default:\n        throw new Error('Method not available for this kind of vault')\n    }\n  }\n\n  /**\n   * Prepare call data\n   * @returns the web3 call data\n   */\n  private makeCallData(): Web3CallData[] {\n    // Parse vault contract methods\n    const { abi, address, protocol } = this.vault\n    let callData = this.makeProtocolData({ abi, address, protocol }, 'TRANCHE')\n\n    // TODO: this should not be necessary. Fix VaultCdoType\n    if (!this.vault.cdo) {\n      return []\n    }\n\n    // Parse vault CDO methods\n    callData = [\n      ...callData,\n      ...this.makeProtocolData(\n        {\n          ...this.vault.cdo,\n          protocol: this.vault.protocol,\n        },\n        'CDO'\n      ),\n    ]\n\n    if (this.vault.strategy) {\n      callData = [\n        ...callData,\n        ...this.makeProtocolData(\n          {\n            ...this.vault.strategy,\n            protocol: this.vault.protocol,\n          },\n          'STRATEGY'\n        ),\n      ]\n    }\n\n    // Parse wallet methods\n    if (this.walletAddresses) {\n      callData = this.walletAddresses.reduce(\n        (acc, walletAddress) => [\n          ...acc,\n          ...this.makeWalletData(walletAddress, { abi, address, protocol }),\n        ],\n        callData\n      )\n    }\n\n    // Parse vault pools methods\n    if (this.vault.pools) {\n      callData = this.vault.pools.reduce(\n        (acc, pool) => [...acc, ...this.makePoolData(pool)],\n        callData\n      )\n    }\n\n    // Parse token methods\n    if (this.token.oracle) {\n      callData = [\n        ...callData,\n        ...this.makeProtocolData(this.token.oracle, 'ORACLE', this.token),\n      ]\n    }\n\n    return callData\n  }\n}\n"],"names":["VaultContract","VaultCDO","getContractData","blockNumber","getData","makeCallData","getPayableMethod","type","options","approveToken","Error","getValue","abi","address","protocol","vault","callData","makeProtocolData","cdo","strategy","walletAddresses","reduce","acc","walletAddress","makeWalletData","pools","pool","makePoolData","token","oracle","constructor"],"mappings":";AAYA,SAASA,aAAa,QAAQ,yBAAwB;AAEtD,OAAO,MAAMC,iBAAiBD;IAS5B;;;GAGC,GACD,MAAaE,gBACXC,cAA2B,QAAQ,EACP;QAC5B,OAAO,IAAI,CAACC,OAAO,CAAC,IAAI,CAACC,YAAY,IAAIF;IAC3C;IAEA;;;;;GAKC,GACD,AAAOG,iBAAiBC,IAA4B,EAAEC,OAAa,EAAE;QACnE,OAAQD;YACN,KAAK;gBACH,OAAO,IAAI,CAACE,YAAY,CAACD;YAC3B;gBACE,MAAM,IAAIE,MAAM;QACpB;IACF;IAEA;;;;GAIC,GACD,AAAOC,SACLJ,IAA+B,EAC/BC,OAAsC,EACxB;QACd,OAAQD;YACN;gBACE,MAAM,IAAIG,MAAM;QACpB;IACF;IAEA;;;GAGC,GACD,AAAQL,eAA+B;QACrC,+BAA+B;QAC/B,MAAM,EAAEO,GAAG,EAAEC,OAAO,EAAEC,QAAQ,EAAE,GAAG,IAAI,CAACC,KAAK;QAC7C,IAAIC,WAAW,IAAI,CAACC,gBAAgB,CAAC;YAAEL;YAAKC;YAASC;QAAS,GAAG;QAEjE,uDAAuD;QACvD,IAAI,CAAC,IAAI,CAACC,KAAK,CAACG,GAAG,EAAE;YACnB,OAAO,EAAE;QACX;QAEA,0BAA0B;QAC1BF,WAAW;eACNA;eACA,IAAI,CAACC,gBAAgB,CACtB,aACK,IAAI,CAACF,KAAK,CAACG,GAAG;gBACjBJ,UAAU,IAAI,CAACC,KAAK,CAACD,QAAQ;gBAE/B;SAEH;QAED,IAAI,IAAI,CAACC,KAAK,CAACI,QAAQ,EAAE;YACvBH,WAAW;mBACNA;mBACA,IAAI,CAACC,gBAAgB,CACtB,aACK,IAAI,CAACF,KAAK,CAACI,QAAQ;oBACtBL,UAAU,IAAI,CAACC,KAAK,CAACD,QAAQ;oBAE/B;aAEH;QACH;QAEA,uBAAuB;QACvB,IAAI,IAAI,CAACM,eAAe,EAAE;YACxBJ,WAAW,IAAI,CAACI,eAAe,CAACC,MAAM,CACpC,CAACC,KAAKC,gBAAkB;uBACnBD;uBACA,IAAI,CAACE,cAAc,CAACD,eAAe;wBAAEX;wBAAKC;wBAASC;oBAAS;iBAChE,EACDE;QAEJ;QAEA,4BAA4B;QAC5B,IAAI,IAAI,CAACD,KAAK,CAACU,KAAK,EAAE;YACpBT,WAAW,IAAI,CAACD,KAAK,CAACU,KAAK,CAACJ,MAAM,CAChC,CAACC,KAAKI,OAAS;uBAAIJ;uBAAQ,IAAI,CAACK,YAAY,CAACD;iBAAM,EACnDV;QAEJ;QAEA,sBAAsB;QACtB,IAAI,IAAI,CAACY,KAAK,CAACC,MAAM,EAAE;YACrBb,WAAW;mBACNA;mBACA,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACW,KAAK,CAACC,MAAM,EAAE,UAAU,IAAI,CAACD,KAAK;aACjE;QACH;QAEA,OAAOZ;IACT;IAnHAc,YAAYf,KAAY,EAAEa,KAAY,EAAEpB,OAA8B,CAAE;QACtE,KAAK,CAACO,OAAOa,OAAOpB;QAEpB,IAAI,CAACO,MAAMG,GAAG,EAAE;YACd,MAAM,IAAIR,MAAM;QAClB;IACF;AA8GF"}