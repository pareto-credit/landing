{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/vaults/classes/vault-pareto-dollar.class.ts"],"sourcesContent":["import { BlockNumber } from '../../core'\nimport { Token } from '../../tokens'\nimport { Web3CallData } from '../../web3-client'\nimport {\n  Vault,\n  VaultContractData,\n  VaultContractModel,\n  VaultContractOptions,\n  VaultNonPayableMethodOptions,\n  VaultNonPayableMethodType,\n  VaultPayableMethodOptions,\n  VaultPayableMethodType,\n} from '../vault.model'\nimport { VaultContract } from './vault-contract.class'\n\nexport class VaultParetoDollar\n  extends VaultContract\n  implements VaultContractModel\n{\n  constructor(vault: Vault, token: Token, options?: VaultContractOptions) {\n    super(vault, token, options)\n  }\n\n  /**\n   * Get contract data\n   * @returns the blockchain contract data\n   */\n  public async getContractData(\n    blockNumber: BlockNumber = 'latest'\n  ): Promise<VaultContractData> {\n    const callData = this.makeCallData(blockNumber)\n    return this.getData(callData, blockNumber)\n  }\n\n  /**\n   * Get vault payable method\n   * @param type the payment method type\n   * @param options the payment method options\n   * @returns the web3 payable method\n   */\n  public getPayableMethod(type: VaultPayableMethodType, options?: any) {\n    try {\n      switch (type) {\n        case 'MINT':\n          return this.mint(options)\n        default:\n          throw new Error('Method not available for this kind of vault')\n      }\n    } catch (error) {\n      console.error(`Contract get method error`, type, error)\n      return\n    }\n  }\n\n  /**\n   * Prepare call data\n   * @returns the web3 call data\n   */\n  protected makeCallData(blockNumber?: BlockNumber): Web3CallData[] {\n    // Parse vault contract methods\n    const { abi, address, protocol, contractType } = this.vault\n    const callData = this.makeProtocolData(\n      { abi, address, protocol },\n      contractType\n    )\n\n    return callData\n  }\n\n  /**\n   * Get vault non payable method\n   * @param type\n   * @param params\n   */\n  public getValue(\n    type: VaultNonPayableMethodType,\n    options?: VaultNonPayableMethodOptions\n  ): Promise<any> {\n    try {\n      switch (type) {\n        case 'IS_WALLET_ALLOWED':\n          return this.isWalletAllowed(options)\n        default:\n          throw new Error('Value not available for this kind of vault')\n      }\n    } catch (error) {\n      console.error(`Contract get value error`, type, error)\n      return Promise.resolve(null)\n    }\n  }\n\n  /**\n   * Mint new USP tokens providing stablecoin as collateral\n   * @param options the method params\n   * @returns the payable method for stop the epoch\n   */\n  public mint(options?: VaultPayableMethodOptions) {\n    if (\n      this.vault.contractType !== 'PARETO_DOLLAR' ||\n      !this.vault.paretoDollar\n    ) {\n      throw Error('Wrong vault type')\n    }\n\n    if (\n      options?.collateralAddress === undefined ||\n      options.amount === undefined\n    ) {\n      throw Error('Collateral address and amount are mandatory')\n    }\n\n    const { abi, address } = this.vault\n    const { collateralAddress, amount } = options\n\n    // Check deposit amount\n    const amountCheck = this.checkContractAmount(amount)\n    if (!amountCheck) {\n      return\n    }\n\n    const params = [collateralAddress, amount]\n\n    return this.getContractPayableMethod({\n      abi,\n      address,\n      method: 'mint',\n      params,\n    })\n  }\n\n  /**\n   * Check if wallet is allowed\n   * @param options - the method options\n   * @returns true if wallet is allowed\n   */\n  public isWalletAllowed(\n    options?: VaultNonPayableMethodOptions\n  ): Promise<boolean> {\n    try {\n      if (\n        this.vault.contractType !== 'PARETO_DOLLAR' ||\n        !this.vault.paretoDollar\n      ) {\n        throw Error('Wrong vault type')\n      }\n\n      if (options?.walletAddress === undefined) {\n        throw Error('Wallet address is mandatory')\n      }\n\n      const { abi, address } = this.vault\n      const method = this.getContractNonPayableMethod({\n        abi,\n        address,\n        method: 'isWalletAllowed',\n        params: [options.walletAddress],\n      })\n\n      if (!method) {\n        throw Error('Not method available')\n      }\n\n      return method.call<boolean>()\n    } catch (error) {\n      return Promise.resolve(false)\n    }\n  }\n}\n"],"names":["VaultContract","VaultParetoDollar","getContractData","blockNumber","callData","makeCallData","getData","getPayableMethod","type","options","mint","Error","error","console","abi","address","protocol","contractType","vault","makeProtocolData","getValue","isWalletAllowed","Promise","resolve","paretoDollar","collateralAddress","undefined","amount","amountCheck","checkContractAmount","params","getContractPayableMethod","method","walletAddress","getContractNonPayableMethod","call","constructor","token"],"mappings":"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"}