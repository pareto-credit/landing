{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/tokens/libs/token.lib.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport { Token } from '../token.model'\nimport { BigNumberValue, BNify, numberFormat } from '../../core'\n\n/**\n * Fix token price with correct decimals\n * @param token - the token entity\n * @param amount - the full digits amount\n * @returns the token price\n */\nexport function fixTokenAmount(\n  token: Token,\n  amount: BigNumber.Value\n): BigNumber {\n  return fixAmount(amount, token.decimals)\n}\n\n/**\n * Fix amount with correct decimals\n * @param amount full digit amount\n * @param decimals decimals\n * @returns fixed amount\n */\nexport function fixAmount(\n  amount: BigNumber.Value,\n  decimals: number\n): BigNumber {\n  return BNify(amount).div(10 ** decimals)\n}\n\n/**\n * Normalize an amount to token minimum decimals\n * @param token - the token entity\n * @param amount - the amount to multiply\n * @returns the amount to show\n */\nexport function normalizeTokenAmount(\n  token: Token,\n  amount: BigNumber.Value\n): BigNumber {\n  return BNify(\n    BNify(amount)\n      .times(10 ** token.decimals)\n      .toFixed(0)\n  )\n}\n\n/**\n * Parse token amount into human readable string\n * @param token - the token entity\n * @param amount - the amount to parse\n * @returns the string to show\n */\nexport function parseTokenAmount(\n  token: Token,\n  amount: BigNumber.Value = 0\n): string {\n  const fixedValue = fixTokenAmount(token, amount)\n  return numberFormat(Number(fixedValue.toNumber()), {\n    minimumFractionDigits: token.decimals,\n  })\n}\n\n/**\n * Return minimum token value\n * @param token - the token\n * @returns the minimum token value\n */\nexport function minTokenAmount(token: Token): BigNumber {\n  return fixTokenAmount(token, 1)\n}\n\n/**\n * Get token USD Amount\n * @param amount - the amount of tokens\n * @param price - the USDC price of the token\n * @returns the token USD amount\n */\nexport function getTokenUSDAmount(\n  amount: BigNumberValue = 1,\n  price: BigNumberValue = 1000000\n): string {\n  // Format token price\n  const tokenPrice = BNify(price).div(10 ** 6)\n  return BNify(amount).times(tokenPrice).toString()\n}\n"],"names":["BNify","numberFormat","fixTokenAmount","token","amount","fixAmount","decimals","div","normalizeTokenAmount","times","toFixed","parseTokenAmount","fixedValue","Number","toNumber","minimumFractionDigits","minTokenAmount","getTokenUSDAmount","price","tokenPrice","toString"],"mappings":"AAEA,SAAyBA,KAAK,EAAEC,YAAY,QAAQ,aAAY;AAEhE;;;;;CAKC,GACD,OAAO,SAASC,eACdC,KAAY,EACZC,MAAuB;IAEvB,OAAOC,UAAUD,QAAQD,MAAMG,QAAQ;AACzC;AAEA;;;;;CAKC,GACD,OAAO,SAASD,UACdD,MAAuB,EACvBE,QAAgB;IAEhB,OAAON,MAAMI,QAAQG,GAAG,CAAC,MAAMD;AACjC;AAEA;;;;;CAKC,GACD,OAAO,SAASE,qBACdL,KAAY,EACZC,MAAuB;IAEvB,OAAOJ,MACLA,MAAMI,QACHK,KAAK,CAAC,MAAMN,MAAMG,QAAQ,EAC1BI,OAAO,CAAC;AAEf;AAEA;;;;;CAKC,GACD,OAAO,SAASC,iBACdR,KAAY,EACZC,SAA0B,CAAC;IAE3B,MAAMQ,aAAaV,eAAeC,OAAOC;IACzC,OAAOH,aAAaY,OAAOD,WAAWE,QAAQ,KAAK;QACjDC,uBAAuBZ,MAAMG,QAAQ;IACvC;AACF;AAEA;;;;CAIC,GACD,OAAO,SAASU,eAAeb,KAAY;IACzC,OAAOD,eAAeC,OAAO;AAC/B;AAEA;;;;;CAKC,GACD,OAAO,SAASc,kBACdb,SAAyB,CAAC,EAC1Bc,QAAwB,OAAO;IAE/B,qBAAqB;IACrB,MAAMC,aAAanB,MAAMkB,OAAOX,GAAG,CAAC,MAAM;IAC1C,OAAOP,MAAMI,QAAQK,KAAK,CAACU,YAAYC,QAAQ;AACjD"}