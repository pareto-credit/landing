{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/tokens/libs/tokens-client.lib.ts"],"sourcesContent":["import { Axios } from 'axios'\nimport {\n  TokenData,\n  TokenRoutes,\n  TokensClient,\n  TokensSearchQuery,\n} from '../token.model'\nimport { uriFy } from '../../core'\nimport { stringify } from '../../core/utility.lib'\n\n/**\n * Create tokens client\n * @param axios - The Axios instance\n * @returns the tokens GOT client\n */\nexport function createTokensClient(axios: Axios): TokensClient {\n  return {\n    // Create new token\n    create: (body: TokenData) =>\n      axios\n        .request({\n          url: TokenRoutes.v1Create,\n          method: 'POST',\n          data: stringify(body),\n        })\n        .then((response) => response.data),\n\n    // Search tokens\n    search: (searchParams?: TokensSearchQuery) =>\n      axios\n        .request({\n          url: TokenRoutes.v1Search,\n          method: 'GET',\n          params: searchParams\n            ? new URLSearchParams(uriFy(searchParams))\n            : undefined,\n        })\n        .then((response) => response.data),\n\n    // List tokens\n    list: (searchParams?: TokensSearchQuery) =>\n      axios\n        .request({\n          url: TokenRoutes.v1Search,\n          method: 'GET',\n          params: searchParams\n            ? new URLSearchParams(uriFy(searchParams))\n            : undefined,\n        })\n        .then((response) => {\n          const page = response.data\n          return page.data\n        }),\n    findOne: (searchParams?: TokensSearchQuery) =>\n      axios\n        .request({\n          url: TokenRoutes.v1Search,\n          method: 'GET',\n          params: searchParams\n            ? new URLSearchParams(uriFy(searchParams))\n            : undefined,\n        })\n        .then((response) => {\n          const page = response.data\n          return page.data ? page.data[0] : undefined\n        }),\n    readOne: (searchParams: TokensSearchQuery) =>\n      axios\n        .request({\n          url: TokenRoutes.v1Search,\n          method: 'GET',\n          params: new URLSearchParams(uriFy(searchParams)),\n        })\n        .then((response) => {\n          const { data } = response.data\n\n          if (!data.length) {\n            throw Error('Not found')\n          }\n\n          return data[0]\n        }),\n  }\n}\n"],"names":["TokenRoutes","uriFy","stringify","createTokensClient","axios","create","body","request","url","v1Create","method","data","then","response","search","searchParams","v1Search","params","URLSearchParams","undefined","list","page","findOne","readOne","length","Error"],"mappings":"AACA,SAEEA,WAAW,QAGN,iBAAgB;AACvB,SAASC,KAAK,QAAQ,aAAY;AAClC,SAASC,SAAS,QAAQ,yBAAwB;AAElD;;;;CAIC,GACD,OAAO,SAASC,mBAAmBC,KAAY;IAC7C,OAAO;QACL,mBAAmB;QACnBC,QAAQ,CAACC,OACPF,MACGG,OAAO,CAAC;gBACPC,KAAKR,YAAYS,QAAQ;gBACzBC,QAAQ;gBACRC,MAAMT,UAAUI;YAClB,GACCM,IAAI,CAAC,CAACC,WAAaA,SAASF,IAAI;QAErC,gBAAgB;QAChBG,QAAQ,CAACC,eACPX,MACGG,OAAO,CAAC;gBACPC,KAAKR,YAAYgB,QAAQ;gBACzBN,QAAQ;gBACRO,QAAQF,eACJ,IAAIG,gBAAgBjB,MAAMc,iBAC1BI;YACN,GACCP,IAAI,CAAC,CAACC,WAAaA,SAASF,IAAI;QAErC,cAAc;QACdS,MAAM,CAACL,eACLX,MACGG,OAAO,CAAC;gBACPC,KAAKR,YAAYgB,QAAQ;gBACzBN,QAAQ;gBACRO,QAAQF,eACJ,IAAIG,gBAAgBjB,MAAMc,iBAC1BI;YACN,GACCP,IAAI,CAAC,CAACC;gBACL,MAAMQ,OAAOR,SAASF,IAAI;gBAC1B,OAAOU,KAAKV,IAAI;YAClB;QACJW,SAAS,CAACP,eACRX,MACGG,OAAO,CAAC;gBACPC,KAAKR,YAAYgB,QAAQ;gBACzBN,QAAQ;gBACRO,QAAQF,eACJ,IAAIG,gBAAgBjB,MAAMc,iBAC1BI;YACN,GACCP,IAAI,CAAC,CAACC;gBACL,MAAMQ,OAAOR,SAASF,IAAI;gBAC1B,OAAOU,KAAKV,IAAI,GAAGU,KAAKV,IAAI,CAAC,EAAE,GAAGQ;YACpC;QACJI,SAAS,CAACR,eACRX,MACGG,OAAO,CAAC;gBACPC,KAAKR,YAAYgB,QAAQ;gBACzBN,QAAQ;gBACRO,QAAQ,IAAIC,gBAAgBjB,MAAMc;YACpC,GACCH,IAAI,CAAC,CAACC;gBACL,MAAM,EAAEF,IAAI,EAAE,GAAGE,SAASF,IAAI;gBAE9B,IAAI,CAACA,KAAKa,MAAM,EAAE;oBAChB,MAAMC,MAAM;gBACd;gBAEA,OAAOd,IAAI,CAAC,EAAE;YAChB;IACN;AACF"}