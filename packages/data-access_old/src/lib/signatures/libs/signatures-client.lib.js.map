{"version":3,"sources":["../../../../../../../../libs/shared/data-access/src/lib/signatures/libs/signatures-client.lib.ts"],"sourcesContent":["import { Axios } from 'axios'\nimport { ApiEntity, stringify, uriFy } from '../../core'\nimport {\n  Signature,\n  SignatureCheckBody,\n  SignatureData,\n  SignatureRoutes,\n  SignaturesClientModel,\n  SignatureSignBody,\n  SignaturesSearchQuery,\n} from '../signature.model'\nimport { WalletSignature } from '../../wallets'\n\nexport class SignaturesClient\n  extends ApiEntity\n  implements SignaturesClientModel\n{\n  constructor(axios: Axios) {\n    super(axios)\n  }\n\n  /**\n   * Create a signature\n   * @param body - the signature data\n   * @returns the promise for create a new signature\n   */\n  public create(body: SignatureData) {\n    return this._create<Signature>(SignatureRoutes.v1Create, body)\n  }\n\n  /**\n   * Search signatures by params\n   * @param searchParams - the signatures search params\n   * @returns the promise for search signatures\n   */\n  public search(searchParams?: SignaturesSearchQuery) {\n    return this._search<Signature>(SignatureRoutes.v1Search, searchParams)\n  }\n\n  /**\n   * Search all signatures by params\n   * @param searchParams - the signatures search params\n   * @returns the promise for search all signatures\n   */\n  public searchAll(searchParams?: SignaturesSearchQuery) {\n    return this._searchAll<Signature>(SignatureRoutes.v1Search, searchParams)\n  }\n\n  /**\n   * List signatures by params\n   * @param searchParams - the signatures search params\n   * @returns the promise for list signatures\n   */\n  public list(searchParams?: SignaturesSearchQuery) {\n    return this._list<Signature>(SignatureRoutes.v1Search, searchParams)\n  }\n\n  /**\n   * List all signatures by params\n   * @param searchParams - the signatures search params\n   * @returns the promise for list all signatures\n   */\n  public listAll(searchParams?: SignaturesSearchQuery) {\n    return this._listAll<Signature>(SignatureRoutes.v1Search, searchParams)\n  }\n\n  /**\n   * Find a signature by params\n   * @param searchParams - the search params\n   * @returns the promise for find an epoch\n   */\n  public findOne(searchParams?: SignaturesSearchQuery) {\n    return this._findOne<Signature>(SignatureRoutes.v1Search, searchParams)\n  }\n\n  /**\n   * Read a signature by params\n   * @param searchParams - the search params\n   * @returns the promise for read a signature\n   */\n  public readOne(searchParams?: SignaturesSearchQuery) {\n    return this._readOne<Signature>(SignatureRoutes.v1Read, searchParams)\n  }\n\n  /**\n   * Check signature by wallet\n   * @param signatureId - the signature ID\n   * @param params - the signature check body\n   * @returns the promise for check signature\n   */\n  public check(signatureId: string, params: SignatureCheckBody) {\n    return this.axios\n      .request<WalletSignature>({\n        url: SignatureRoutes.v1Check.replace(':signatureId', signatureId),\n        method: 'GET',\n        responseType: 'json',\n        params: new URLSearchParams(uriFy(params)),\n      })\n      .then((response) => response.data)\n  }\n\n  /**\n   * Sign a signature by wallet\n   * @param signatureId - the signature ID\n   * @param params - the signature sign body\n   * @returns the promise for sign a signature\n   */\n  public sign(signatureId: string, body: SignatureSignBody) {\n    return this.axios\n      .request<WalletSignature>({\n        url: SignatureRoutes.v1Sign.replace(':signatureId', signatureId),\n        method: 'POST',\n        responseType: 'json',\n        data: stringify(body),\n      })\n      .then((response) => response.data)\n  }\n}\n"],"names":["ApiEntity","stringify","uriFy","SignatureRoutes","SignaturesClient","create","body","_create","v1Create","search","searchParams","_search","v1Search","searchAll","_searchAll","list","_list","listAll","_listAll","findOne","_findOne","readOne","_readOne","v1Read","check","signatureId","params","axios","request","url","v1Check","replace","method","responseType","URLSearchParams","then","response","data","sign","v1Sign","constructor"],"mappings":"AACA,SAASA,SAAS,EAAEC,SAAS,EAAEC,KAAK,QAAQ,aAAY;AACxD,SAIEC,eAAe,QAIV,qBAAoB;AAG3B,OAAO,MAAMC,yBACHJ;IAOR;;;;GAIC,GACD,AAAOK,OAAOC,IAAmB,EAAE;QACjC,OAAO,IAAI,CAACC,OAAO,CAAYJ,gBAAgBK,QAAQ,EAAEF;IAC3D;IAEA;;;;GAIC,GACD,AAAOG,OAAOC,YAAoC,EAAE;QAClD,OAAO,IAAI,CAACC,OAAO,CAAYR,gBAAgBS,QAAQ,EAAEF;IAC3D;IAEA;;;;GAIC,GACD,AAAOG,UAAUH,YAAoC,EAAE;QACrD,OAAO,IAAI,CAACI,UAAU,CAAYX,gBAAgBS,QAAQ,EAAEF;IAC9D;IAEA;;;;GAIC,GACD,AAAOK,KAAKL,YAAoC,EAAE;QAChD,OAAO,IAAI,CAACM,KAAK,CAAYb,gBAAgBS,QAAQ,EAAEF;IACzD;IAEA;;;;GAIC,GACD,AAAOO,QAAQP,YAAoC,EAAE;QACnD,OAAO,IAAI,CAACQ,QAAQ,CAAYf,gBAAgBS,QAAQ,EAAEF;IAC5D;IAEA;;;;GAIC,GACD,AAAOS,QAAQT,YAAoC,EAAE;QACnD,OAAO,IAAI,CAACU,QAAQ,CAAYjB,gBAAgBS,QAAQ,EAAEF;IAC5D;IAEA;;;;GAIC,GACD,AAAOW,QAAQX,YAAoC,EAAE;QACnD,OAAO,IAAI,CAACY,QAAQ,CAAYnB,gBAAgBoB,MAAM,EAAEb;IAC1D;IAEA;;;;;GAKC,GACD,AAAOc,MAAMC,WAAmB,EAAEC,MAA0B,EAAE;QAC5D,OAAO,IAAI,CAACC,KAAK,CACdC,OAAO,CAAkB;YACxBC,KAAK1B,gBAAgB2B,OAAO,CAACC,OAAO,CAAC,gBAAgBN;YACrDO,QAAQ;YACRC,cAAc;YACdP,QAAQ,IAAIQ,gBAAgBhC,MAAMwB;QACpC,GACCS,IAAI,CAAC,CAACC,WAAaA,SAASC,IAAI;IACrC;IAEA;;;;;GAKC,GACD,AAAOC,KAAKb,WAAmB,EAAEnB,IAAuB,EAAE;QACxD,OAAO,IAAI,CAACqB,KAAK,CACdC,OAAO,CAAkB;YACxBC,KAAK1B,gBAAgBoC,MAAM,CAACR,OAAO,CAAC,gBAAgBN;YACpDO,QAAQ;YACRC,cAAc;YACdI,MAAMpC,UAAUK;QAClB,GACC6B,IAAI,CAAC,CAACC,WAAaA,SAASC,IAAI;IACrC;IAnGAG,YAAYb,KAAY,CAAE;QACxB,KAAK,CAACA;IACR;AAkGF"}