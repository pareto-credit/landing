{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/wallet-performances/wallet-performance.mock.ts"],"sourcesContent":["import { BlockMock, DeepPartial, RewardMock } from '../core'\nimport {\n  WalletBlockEarnings,\n  WalletBlockEarningsRewards,\n  WalletBlockPerformance,\n  WalletPerformance,\n} from './wallet-performance.model'\n\n/**\n * Wallet Performance Mock\n */\nexport function WalletPerformanceMock(\n  options?: DeepPartial<WalletPerformance>\n): WalletPerformance {\n  const now = new Date().toISOString()\n\n  return {\n    _id: options?._id || 'WALLET_PERFORMANCE_ID',\n\n    vaultId: options?.vaultId || 'VAULT_ID',\n    walletId: options?.walletId || 'WALLET_ID',\n    walletBlockId: options?.walletBlockId || 'WALLET_BLOCK_ID',\n    block: BlockMock(options?.block),\n\n    age: options?.age || 0,\n\n    earnings: WalletBlockEarningsMock(options?.earnings),\n\n    realizedAPY: options?.realizedAPY || 0,\n    rewardsRealizedAPY: options?.rewardsRealizedAPY || 0,\n    poolSharePercentage: options?.poolSharePercentage || 0,\n\n    accruedRewards: options?.accruedRewards?.map((a) => RewardMock(a)),\n    collectedRewards: options?.collectedRewards?.map((c) => RewardMock(c)),\n\n    createdAt: now,\n    createdBy: options?.createdBy || 'USER_ID',\n    updatedAt: now,\n    updatedBy: options?.updatedBy || 'USER_ID',\n  }\n}\n\nexport function WalletBlockPerformanceMock(\n  options?: DeepPartial<WalletBlockPerformance>\n): WalletBlockPerformance {\n  return {\n    age: options?.age || 0,\n\n    earnings: WalletBlockEarningsMock(options?.earnings),\n\n    realizedAPY: options?.realizedAPY || 0,\n    rewardsRealizedAPY: options?.rewardsRealizedAPY || 0,\n    poolSharePercentage: options?.poolSharePercentage || 0,\n\n    accruedRewards: options?.accruedRewards?.map((a) => RewardMock(a)),\n    collectedRewards: options?.collectedRewards?.map((c) => RewardMock(c)),\n  }\n}\n\nexport function WalletBlockEarningsMock(\n  options?: DeepPartial<WalletBlockEarnings>\n): WalletBlockEarnings {\n  return {\n    token: options?.token || '0',\n    USD: options?.USD || '0',\n    percentage: options?.percentage || 0,\n    rewards: WalletBlockEarningsRewardsMock(options?.rewards),\n  }\n}\n\nexport function WalletBlockEarningsRewardsMock(\n  options?: Partial<WalletBlockEarningsRewards>\n): WalletBlockEarningsRewards {\n  return {\n    USD: options?.USD || '0',\n    percentage: options?.percentage || 0,\n  }\n}\n"],"names":["BlockMock","RewardMock","WalletPerformanceMock","options","now","Date","toISOString","_id","vaultId","walletId","walletBlockId","block","age","earnings","WalletBlockEarningsMock","realizedAPY","rewardsRealizedAPY","poolSharePercentage","accruedRewards","map","a","collectedRewards","c","createdAt","createdBy","updatedAt","updatedBy","WalletBlockPerformanceMock","token","USD","percentage","rewards","WalletBlockEarningsRewardsMock"],"mappings":"AAAA,SAASA,SAAS,EAAeC,UAAU,QAAQ,UAAS;AAQ5D;;CAEC,GACD,OAAO,SAASC,sBACdC,OAAwC;QAoBtBA,yBACEA;IAnBpB,MAAMC,MAAM,IAAIC,OAAOC,WAAW;IAElC,OAAO;QACLC,KAAKJ,CAAAA,2BAAAA,QAASI,GAAG,KAAI;QAErBC,SAASL,CAAAA,2BAAAA,QAASK,OAAO,KAAI;QAC7BC,UAAUN,CAAAA,2BAAAA,QAASM,QAAQ,KAAI;QAC/BC,eAAeP,CAAAA,2BAAAA,QAASO,aAAa,KAAI;QACzCC,OAAOX,UAAUG,2BAAAA,QAASQ,KAAK;QAE/BC,KAAKT,CAAAA,2BAAAA,QAASS,GAAG,KAAI;QAErBC,UAAUC,wBAAwBX,2BAAAA,QAASU,QAAQ;QAEnDE,aAAaZ,CAAAA,2BAAAA,QAASY,WAAW,KAAI;QACrCC,oBAAoBb,CAAAA,2BAAAA,QAASa,kBAAkB,KAAI;QACnDC,qBAAqBd,CAAAA,2BAAAA,QAASc,mBAAmB,KAAI;QAErDC,cAAc,EAAEf,4BAAAA,0BAAAA,QAASe,cAAc,qBAAvBf,wBAAyBgB,GAAG,CAAC,CAACC,IAAMnB,WAAWmB;QAC/DC,gBAAgB,EAAElB,4BAAAA,4BAAAA,QAASkB,gBAAgB,qBAAzBlB,0BAA2BgB,GAAG,CAAC,CAACG,IAAMrB,WAAWqB;QAEnEC,WAAWnB;QACXoB,WAAWrB,CAAAA,2BAAAA,QAASqB,SAAS,KAAI;QACjCC,WAAWrB;QACXsB,WAAWvB,CAAAA,2BAAAA,QAASuB,SAAS,KAAI;IACnC;AACF;AAEA,OAAO,SAASC,2BACdxB,OAA6C;QAW3BA,yBACEA;IAVpB,OAAO;QACLS,KAAKT,CAAAA,2BAAAA,QAASS,GAAG,KAAI;QAErBC,UAAUC,wBAAwBX,2BAAAA,QAASU,QAAQ;QAEnDE,aAAaZ,CAAAA,2BAAAA,QAASY,WAAW,KAAI;QACrCC,oBAAoBb,CAAAA,2BAAAA,QAASa,kBAAkB,KAAI;QACnDC,qBAAqBd,CAAAA,2BAAAA,QAASc,mBAAmB,KAAI;QAErDC,cAAc,EAAEf,4BAAAA,0BAAAA,QAASe,cAAc,qBAAvBf,wBAAyBgB,GAAG,CAAC,CAACC,IAAMnB,WAAWmB;QAC/DC,gBAAgB,EAAElB,4BAAAA,4BAAAA,QAASkB,gBAAgB,qBAAzBlB,0BAA2BgB,GAAG,CAAC,CAACG,IAAMrB,WAAWqB;IACrE;AACF;AAEA,OAAO,SAASR,wBACdX,OAA0C;IAE1C,OAAO;QACLyB,OAAOzB,CAAAA,2BAAAA,QAASyB,KAAK,KAAI;QACzBC,KAAK1B,CAAAA,2BAAAA,QAAS0B,GAAG,KAAI;QACrBC,YAAY3B,CAAAA,2BAAAA,QAAS2B,UAAU,KAAI;QACnCC,SAASC,+BAA+B7B,2BAAAA,QAAS4B,OAAO;IAC1D;AACF;AAEA,OAAO,SAASC,+BACd7B,OAA6C;IAE7C,OAAO;QACL0B,KAAK1B,CAAAA,2BAAAA,QAAS0B,GAAG,KAAI;QACrBC,YAAY3B,CAAAA,2BAAAA,QAAS2B,UAAU,KAAI;IACrC;AACF"}