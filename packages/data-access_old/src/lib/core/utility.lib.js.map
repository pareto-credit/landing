{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/core/utility.lib.ts"],"sourcesContent":["import { Period, UnitTime } from './utility.model'\nimport moment from 'moment'\nimport Ajv, { ErrorObject } from 'ajv'\nimport { difference, identity, pickBy, uniq } from 'lodash'\nimport { BigNumberValue, BNify } from './bigint.lib'\nimport BigNumber from 'bignumber.js'\n\n/**\n * Escape Regular Expression for security reason\n * @param value - the string to excape\n * @returns the string excaped\n */\nexport function escapeRegExp(value: string) {\n  return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\n/**\n * Stringify object with bigint check\n * @param s - the object to stringify\n * @returns the string of the object\n */\nexport function stringify(s: any): string {\n  return JSON.stringify(s, (_, v) => (typeof v === 'bigint' ? v.toString() : v))\n}\n\n/**\n * Compare two string\n * @param s1 - the string one\n * @param s2 - the string two\n * @returns true if equal\n */\nexport function compLower(s1: string, s2: string): boolean {\n  return s1.toLowerCase() === s2.toLowerCase()\n}\n\n/**\n * Validate object against schema\n * @param schema schema.valueOf()\n * @param object object to validate\n * @returns object schema validation\n */\nexport function validateSchema(\n  schema: any,\n  object: any\n): {\n  valid: boolean\n  errors?: null | ErrorObject[]\n} {\n  try {\n    const ajv = new Ajv({ strict: false })\n    const validate = ajv.compile(schema)\n    const valid = validate(object)\n    return {\n      valid,\n      errors: validate.errors,\n    }\n  } catch (err) {\n    return {\n      valid: false,\n      errors: [err as ErrorObject],\n    }\n  }\n}\n\n/**\n * Replace many assertion\n * @param str - the string\n * @param replacements - the replacements to use\n * @returns the new string\n */\nexport function replaceMany(\n  str: string,\n  replacements: Record<string, string>\n): string {\n  return Object.entries(replacements).reduce((acc: string, [key, value]) => {\n    return acc.replace(key, value)\n  }, str)\n}\n\n/**\n * Format a number using Internationalization API\n * @param amount - the amount\n * @param lang - the lang code\n * @param currency - the currency to use\n * @returns the number formatted\n */\nexport function numberFormat(\n  amount: number | bigint,\n  options?: Intl.NumberFormatOptions,\n  lang: 'en-US' = 'en-US'\n): string {\n  const formatter = new Intl.NumberFormat(lang, options)\n  return formatter.format(amount)\n}\n\n/**\n * Format seconds in a human readable unit time\n * @param seconds the seconds amount\n * @returns the period data\n */\nexport function secondsToPeriod(seconds: number): Period {\n  const duration = seconds || 0\n  const unit: UnitTime =\n    duration < 120\n      ? 'seconds'\n      : duration < 3600\n      ? 'minutes'\n      : duration < 86400\n      ? 'hours'\n      : 'days'\n\n  return {\n    duration: +moment\n      .duration(seconds || 0, 'seconds')\n      .as(unit)\n      .toFixed(2),\n    unit,\n  }\n}\n\n/**\n * Format a period to seconds\n * @param duration - the duration\n * @param unit - the unit time\n * @returns the amount of seconds\n */\nexport function periodToSeconds(duration: number, unit: UnitTime): number {\n  return Math.floor(moment.duration(duration, unit).asSeconds())\n}\n\n/**\n * Split an amount of seconds into multiple periods\n * @param seconds the seconds amount\n * @returns the periods\n */\nexport function secondsToPeriods(seconds: any) {\n  const units = [\n    { label: 'year', seconds: 31536000 },\n    { label: 'day', seconds: 86400 },\n    { label: 'hour', seconds: 3600 },\n    { label: 'minute', seconds: 60 },\n    { label: 'second', seconds: 1 },\n  ]\n\n  let timeString = ''\n\n  for (const unit of units) {\n    const unitValue = Math.floor(seconds / unit.seconds)\n    if (unitValue > 0) {\n      timeString += `${unitValue} ${unit.label}${unitValue > 1 ? 's' : ''} `\n      seconds %= unit.seconds\n    }\n  }\n\n  return timeString.trim()\n}\n\n/**\n * Capitalize the first letter of a string\n * @param string - the string to modify\n * @returns the string capitalized\n */\nexport function capitalize(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/**\n * Format a string \"Hello %{friend}\" and params { 'friend': 'John' }\n * into a parsed string \"Hello John\"\n * @param template - the template string\n * @param params - the params\n * @returns the string formatted\n */\nexport function formatString(\n  template: string,\n  params: { [key: string]: string | number } = {}\n): string {\n  return template.includes('%{')\n    ? template.replace(/%\\{(.*?)\\}/g, (match, key) => {\n        return params[key] !== undefined ? String(params[key]) : match\n      })\n    : template\n}\n\n/**\n * Remove all falsy values from an object\n * @param obj - the object to clean\n * @return the object cleaned\n */\nexport function cleanObject<T extends object>(obj: T): T {\n  return pickBy(obj, identity) as T\n}\n\n/**\n * Make the difference between two arrays and returns\n * @param first - the first array data\n * @param second - the second array data\n * @returns the difference values between two arrays\n */\nexport function arrayDiff<T, K>(\n  first: { items: T[]; key?: keyof T },\n  second: { items: K[]; key?: keyof K }\n) {\n  return difference<unknown>(\n    uniq(\n      first.items\n        .map((item) => (first.key ? item[first.key] : item))\n        .filter((value) => value !== undefined)\n    ),\n    uniq(\n      second.items\n        .map((sec) => (second.key ? sec[second.key] : sec))\n        .filter((value) => value !== undefined)\n    )\n  )\n}\n\n/**\n * Compound APR and return APY\n * @param apr APR\n * @param period compounding period\n * @returns Compounded APR\n */\nexport function apr2apy(apr: BigNumberValue, period = 365): BigNumber {\n  return BNify(\n    BNify(1).plus(BNify(apr).div(period)).pow(period).minus(1).toFixed(18)\n  )\n}\n\n/**\n *  * Return an array of items (useful for route filters)\n * @param item item\n * @returns array of items\n */\nexport function arrayFy<T = any>(item: T) {\n  return Array.isArray(item) ? item : item ? [item] : []\n}\n\n/**\n * Check if a string is a code\n * @paramc code - the code string to verify\n * @returns true if is a code\n */\nexport function isCode(\n  code: string,\n  minLength: number,\n  maxLength: number\n): boolean {\n  const regex = new RegExp(`^[a-zA-Z0-9]{${minLength},${maxLength}}$`)\n  return !!code.match(regex)\n}\n"],"names":["moment","Ajv","difference","identity","pickBy","uniq","BNify","escapeRegExp","value","replace","stringify","s","JSON","_","v","toString","compLower","s1","s2","toLowerCase","validateSchema","schema","object","ajv","strict","validate","compile","valid","errors","err","replaceMany","str","replacements","Object","entries","reduce","acc","key","numberFormat","amount","options","lang","formatter","Intl","NumberFormat","format","secondsToPeriod","seconds","duration","unit","as","toFixed","periodToSeconds","Math","floor","asSeconds","secondsToPeriods","units","label","timeString","unitValue","trim","capitalize","string","charAt","toUpperCase","slice","formatString","template","params","includes","match","undefined","String","cleanObject","obj","arrayDiff","first","second","items","map","item","filter","sec","apr2apy","apr","period","plus","div","pow","minus","arrayFy","Array","isArray","isCode","code","minLength","maxLength","regex","RegExp"],"mappings":"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"}