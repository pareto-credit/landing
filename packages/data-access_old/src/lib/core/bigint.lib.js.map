{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/core/bigint.lib.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport { iBigInt } from './utility.model'\n\nexport type BigNumberValue = BigNumber.Value | bigint\n\n/**\n * Transform a value to BigNumber\n * @param value - the value to transform\n * @returns the big number\n */\nexport function BNify(value: BigNumberValue = 0): BigNumber {\n  return new BigNumber(\n    typeof value === 'bigint'\n      ? value.toString()\n      : typeof value === 'object'\n      ? value\n      : String(value)\n  )\n}\n\n/**\n * Transform a value to BigNumber string\n * @param value - the value to transform\n * @returns the big number as string\n */\nexport function BNstring(value: BigNumberValue): iBigInt {\n  return BNify(value).toString()\n}\n\n/**\n * Transform a value to BigNumber fixed to specified decimals\n * @param value - the value to transform\n * @returns the big number as fixed string\n */\nexport function BNFixed(value: BigNumberValue = 0, decimals = 0): iBigInt {\n  return BNify(value).toFixed(decimals)\n}\n\n/**\n * Is BigInt greather than\n * @param bigInt - the bigint string\n * @param value - the value to compare\n * @returns true if greater\n */\nexport function BNgt(\n  bigInt: BigNumberValue = 0,\n  value: BigNumberValue = 0\n): boolean {\n  return BNify(bigInt).gt(BNify(value))\n}\n\n/**\n * Is BigInt greather than or equal\n * @param bigInt - the bigint string\n * @param value - the value to compare\n * @returns true if greater\n */\nexport function BNgte(\n  bigInt: BigNumberValue = 0,\n  value: BigNumberValue = 0\n): boolean {\n  return BNify(bigInt).gte(BNify(value))\n}\n\n/**\n * Is BigInt less than\n * @param bigInt - the bigint string\n * @param value - the value to compare\n * @returns true is less than\n */\nexport function BNlt(\n  bigInt: BigNumberValue = 0,\n  value: BigNumberValue = 0\n): boolean {\n  return BNify(bigInt).lt(BNify(value))\n}\n\n/**\n * Is BigInt less than or equal\n * @param bigInt - the bigint string\n * @param value - the value to compare\n * @returns true is less than or equal\n */\nexport function BNlte(\n  bigInt: BigNumberValue = 0,\n  value: BigNumberValue = 0\n): boolean {\n  return BNify(bigInt).lte(BNify(value))\n}\n\n/**\n * Is BigInt equal\n * @param bigInt - the bigint string\n * @param value - the value to compare\n * @returns true if equal\n */\nexport function BNeq(\n  bigInt: BigNumberValue = 0,\n  value: BigNumberValue = 0\n): boolean {\n  return BNify(bigInt).eq(BNify(value))\n}\n\n/**\n * Remove all decimals from bigNumberValue\n * @param value - the value to parse\n * @returns the string of the value\n */\nexport function BNint(value: BigNumberValue = 0): string {\n  return BNify(value).integerValue(BigNumber.ROUND_FLOOR).toFixed(0)\n}\n"],"names":["BigNumber","BNify","value","toString","String","BNstring","BNFixed","decimals","toFixed","BNgt","bigInt","gt","BNgte","gte","BNlt","lt","BNlte","lte","BNeq","eq","BNint","integerValue","ROUND_FLOOR"],"mappings":"AAAA,OAAOA,eAAe,eAAc;AAKpC;;;;CAIC,GACD,OAAO,SAASC,MAAMC,QAAwB,CAAC;IAC7C,OAAO,IAAIF,UACT,OAAOE,UAAU,WACbA,MAAMC,QAAQ,KACd,OAAOD,UAAU,WACjBA,QACAE,OAAOF;AAEf;AAEA;;;;CAIC,GACD,OAAO,SAASG,SAASH,KAAqB;IAC5C,OAAOD,MAAMC,OAAOC,QAAQ;AAC9B;AAEA;;;;CAIC,GACD,OAAO,SAASG,QAAQJ,QAAwB,CAAC,EAAEK,WAAW,CAAC;IAC7D,OAAON,MAAMC,OAAOM,OAAO,CAACD;AAC9B;AAEA;;;;;CAKC,GACD,OAAO,SAASE,KACdC,SAAyB,CAAC,EAC1BR,QAAwB,CAAC;IAEzB,OAAOD,MAAMS,QAAQC,EAAE,CAACV,MAAMC;AAChC;AAEA;;;;;CAKC,GACD,OAAO,SAASU,MACdF,SAAyB,CAAC,EAC1BR,QAAwB,CAAC;IAEzB,OAAOD,MAAMS,QAAQG,GAAG,CAACZ,MAAMC;AACjC;AAEA;;;;;CAKC,GACD,OAAO,SAASY,KACdJ,SAAyB,CAAC,EAC1BR,QAAwB,CAAC;IAEzB,OAAOD,MAAMS,QAAQK,EAAE,CAACd,MAAMC;AAChC;AAEA;;;;;CAKC,GACD,OAAO,SAASc,MACdN,SAAyB,CAAC,EAC1BR,QAAwB,CAAC;IAEzB,OAAOD,MAAMS,QAAQO,GAAG,CAAChB,MAAMC;AACjC;AAEA;;;;;CAKC,GACD,OAAO,SAASgB,KACdR,SAAyB,CAAC,EAC1BR,QAAwB,CAAC;IAEzB,OAAOD,MAAMS,QAAQS,EAAE,CAAClB,MAAMC;AAChC;AAEA;;;;CAIC,GACD,OAAO,SAASkB,MAAMlB,QAAwB,CAAC;IAC7C,OAAOD,MAAMC,OAAOmB,YAAY,CAACrB,UAAUsB,WAAW,EAAEd,OAAO,CAAC;AAClE"}