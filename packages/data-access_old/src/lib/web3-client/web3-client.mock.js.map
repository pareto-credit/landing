{"version":3,"sources":["../../../../../../../libs/shared/data-access/src/lib/web3-client/web3-client.mock.ts"],"sourcesContent":["import {\n  getWeb3HttpsProvider,\n  WEB3_DEFAULT_ADDR,\n  Web3BaseContract,\n  Web3Client,\n  Web3Clients,\n} from '.'\nimport { ChainMock } from '../chains'\nimport { VaultAbiParamMock } from '../vaults'\n\nexport function Web3BaseContractMock(\n  options?: Partial<Web3BaseContract>\n): Web3BaseContract {\n  return {\n    abi: VaultAbiParamMock(options?.abi),\n    address: options?.address || WEB3_DEFAULT_ADDR,\n  }\n}\n\n/**\n * Create a Web3ClientsMock\n * @returns the Web3Clients Mock\n */\nexport function Web3ClientsMock(): Web3Clients {\n  const tokens = {\n    INFURA: process.env['INFURA_TOKEN'],\n    ALCHEMY: process.env['ALCHEMY_ZK_TOKEN'],\n  }\n\n  // ChainsMocked\n  const chains = [\n    ChainMock({\n      _id: '6672a503689d1ff1e80e4ec1',\n      name: 'OP Mainnet',\n      hex: '0xa',\n      chainID: 10,\n      RPCs: [\n        {\n          name: 'Infura Optimism',\n          provider: 'INFURA',\n          https: 'https://optimism-mainnet.infura.io/v3/',\n          wss: 'wss://optimism-mainnet.infura.io/ws/v3/',\n        },\n      ],\n      blocksPerYear: 15768000,\n    }),\n    ChainMock({\n      _id: '6659d1cf6d1cfe32afdfcd96',\n      name: 'Ethereum Mainnet',\n      hex: '0x1',\n      chainID: 1,\n      RPCs: [\n        {\n          name: 'Infura Mainnet',\n          provider: 'INFURA',\n          https: 'https://mainnet.infura.io/v3/',\n          wss: 'wss://mainnet.infura.io/ws/v3/',\n        },\n      ],\n      blocksPerYear: 2613400,\n    }),\n    ChainMock({\n      _id: '674704dec66aaf0857b07c08',\n      name: 'Arbitrum One',\n      hex: '0xa4b1',\n      blocksPerYear: 126144000,\n      chainID: 42161,\n      RPCs: [\n        {\n          name: 'Infura Arbitrum',\n          provider: 'INFURA',\n          https: 'https://arbitrum-mainnet.infura.io/v3/',\n          wss: 'wss://arbitrum-mainnet.infura.io/ws/v3/',\n        },\n      ],\n    }),\n  ]\n\n  const web3Clients: Web3Clients = {}\n\n  for (const { _id, RPCs = [], blocksPerYear } of chains) {\n    const { web3, provider } = getWeb3HttpsProvider(RPCs, tokens)\n    web3Clients[_id] = new Web3Client({\n      web3,\n      provider,\n      blocksPerYear,\n    })\n  }\n\n  return web3Clients\n}\n"],"names":["getWeb3HttpsProvider","WEB3_DEFAULT_ADDR","Web3Client","ChainMock","VaultAbiParamMock","Web3BaseContractMock","options","abi","address","Web3ClientsMock","tokens","INFURA","process","env","ALCHEMY","chains","_id","name","hex","chainID","RPCs","provider","https","wss","blocksPerYear","web3Clients","web3"],"mappings":"AAAA,SACEA,oBAAoB,EACpBC,iBAAiB,EAEjBC,UAAU,QAEL,IAAG;AACV,SAASC,SAAS,QAAQ,YAAW;AACrC,SAASC,iBAAiB,QAAQ,YAAW;AAE7C,OAAO,SAASC,qBACdC,OAAmC;IAEnC,OAAO;QACLC,KAAKH,kBAAkBE,2BAAAA,QAASC,GAAG;QACnCC,SAASF,CAAAA,2BAAAA,QAASE,OAAO,KAAIP;IAC/B;AACF;AAEA;;;CAGC,GACD,OAAO,SAASQ;IACd,MAAMC,SAAS;QACbC,QAAQC,QAAQC,GAAG,CAAC,eAAe;QACnCC,SAASF,QAAQC,GAAG,CAAC,mBAAmB;IAC1C;IAEA,eAAe;IACf,MAAME,SAAS;QACbZ,UAAU;YACRa,KAAK;YACLC,MAAM;YACNC,KAAK;YACLC,SAAS;YACTC,MAAM;gBACJ;oBACEH,MAAM;oBACNI,UAAU;oBACVC,OAAO;oBACPC,KAAK;gBACP;aACD;YACDC,eAAe;QACjB;QACArB,UAAU;YACRa,KAAK;YACLC,MAAM;YACNC,KAAK;YACLC,SAAS;YACTC,MAAM;gBACJ;oBACEH,MAAM;oBACNI,UAAU;oBACVC,OAAO;oBACPC,KAAK;gBACP;aACD;YACDC,eAAe;QACjB;QACArB,UAAU;YACRa,KAAK;YACLC,MAAM;YACNC,KAAK;YACLM,eAAe;YACfL,SAAS;YACTC,MAAM;gBACJ;oBACEH,MAAM;oBACNI,UAAU;oBACVC,OAAO;oBACPC,KAAK;gBACP;aACD;QACH;KACD;IAED,MAAME,cAA2B,CAAC;IAElC,KAAK,MAAM,EAAET,GAAG,EAAEI,OAAO,EAAE,EAAEI,aAAa,EAAE,IAAIT,OAAQ;QACtD,MAAM,EAAEW,IAAI,EAAEL,QAAQ,EAAE,GAAGrB,qBAAqBoB,MAAMV;QACtDe,WAAW,CAACT,IAAI,GAAG,IAAId,WAAW;YAChCwB;YACAL;YACAG;QACF;IACF;IAEA,OAAOC;AACT"}